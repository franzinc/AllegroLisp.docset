<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>debug-window-after-error</title><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>IDE Dialog Tab</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 9.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/ide-menus-and-dialogs/debug-window-after-error.htm">9.0 version</a></td></tr></table><h2 id="2">Debug Window after an Error</h2>

<p id="3">
The Debug window displays debugging information when an error (more
precisely, any unhandled condition that calls break) occurs in the
IDE. Debugging in general is described in <a href="../debugging.htm">debugging.htm</a>. Please look at that
document for detailed discussion of the information displayed by the
debugger and debugging features. To produce the illustration, the
unbound symbol <code>a</code> was entered to the Debug window
prompt. Since <code>a</code> had no value, this Restarts dialog
was displayed:
</p>
<p id="4"><img src="../pictures/restarts.jpg"></p>

<p id="5">
Clicking on <b>Abort</b> will cause the error to be unwound.
Clicking on <b>Debug</b> changed the display of the Debug window to
look like this, with the listener below and the debugging pane above:
(<a href="debug-window.htm">click here</a> to
see the description of the listener in the Debug window):
</p>
<p id="6"><img src="../pictures/debug-err.jpg"></p>
<p id="7">
The debugging section at the top shows the error message in the text
control to the right. (The message also appears in the listener
portion but that is in part because that is where the error
occurred). Below the toolbar, an outline control shows a stack
backtrace (similar but not identical to what is printed in a listener
in response to the <a href="../tpl-commands/zoom.htm"><b>:zoom</b></a> command
-- see the note <b>The Debug Window after an error and the :zoom
top-level command</b> below). The buttons on the toolbar, identified
by their tooltips, are as follows. Note that if a button is
inappropriate for a situation, it is inactive and its tooltip will not
be displayed.
</p>
<ul>
<li id="8">
<b>Show Restarts</b>: display the Restarts dialog. This is a modal
dialog. Click Debug to return control to the Debug window.
</li>
<li id="9">
<b>Include Hidden Frames/Hide Hidden frames</b>: switch between
displaying and hiding hidden frames. See the <a href="../tpl-commands/hide.htm"><b>:hide</b></a> command for information on hidden
frames. Hidden frames are typically internal calls which are not
usually the cause of a problem. The tooltip says <b>Include</b> or
<b>Hide</b> as the frames are not or are currently shown.
</li>

<li id="10">
<b>Include Local Variables / Hide Local Variables</b>: switch between
displaying and hiding local variables when opening the frame items for
function calls to list the arguments that were passed. See the user
option <a href="../operators/ide/include-local-variables-in-backtraces.htm"><b>include-local-variables-in-backtraces</b></a>.
</li>

<li id="11">
<b>Continue</b>: if the error signaled is a continuable error
(signaled by a call to <a href="../../ansicl/dictentr/cerror.htm"><b>cerror</b></a>), this button is active and
clicking it allows you to choose a continuation. However, most errors
are not continuable (instead, they have restarts which is a
generalization of the idea of continuable errors) so this button is
usually inactive.
</li>
<li id="12">
<b>Return from Frame</b>: Return (as with the command 
<a href="../tpl-commands/return.htm"><b>:return</b></a>) from the
selected frame.
</li>
<li id="13">
<b>Retry Frame</b>: Restart (as with the command 
<a href="../tpl-commands/restart.htm"><b>:restart</b></a>) from the selected
frame.
</li>
<li id="14">
<b>Pop This Error</b>: clear one break level, as with the command 
<a href="../tpl-commands/pop.htm"><b>:pop</b></a>.
</li>
<li id="15">
<b>Pop and Retry</b>: pop the error and re-evaluate the form that caused the
error, as with the command <a href="../tpl-commands/prt.htm"><b>:prt</b></a>.
</li>
<li id="16">
<b>Abort This Process</b> (icon is a big X): unwind all errors from the stack of this process,
as with the command <a href="../tpl-commands/reset.htm"><b>:reset</b></a>.
</li>
<li id="17">
<b>Write a Bug Report</b> (icon is a picture of a bug): writes a file
containing the stack backtrace, along with <a href="../operators/excl/dribble-bug.htm"><b>dribble-bug</b></a> and allegro-ide-options.cl
information, which you can include in a bug report to <a href="mailto:support@franz.com">support@franz.com</a>.  The <a href="file-menu.htm#save">File |
Save</a> and <a href="file-menu.htm#save-as">File | Save As</a> commands save <a href="../operators/excl/dribble-bug.htm"><b>dribble-bug</b></a> and allegro-ide-options.cl
along with the backtrace contents when the keyboard focus is in a
backtrace pane. See <a href="../cgide.htm#bug-reports-1">About submitting a bug report from a break in the
IDE</a> in <a href="../cgide.htm">cgide.htm</a>.
</li>
</ul>

<p id="18">
If not all of the frames (function calls) that are on the stack are
initially displayed, additional ones can be displayed by scrolling to
the bottom of the backtrace, or by selecting the bottom-most displayed
frame.  The number of frames that are initially displayed (or added
later) is controlled by the user option <a href="../operators/ide/backtrace-frames-to-show.htm"><b>backtrace-frames-to-show</b></a>.
</p>
<p id="19">
If a backtrace should unexpectedly fail to appear when pressing the
<b>Debug</b> button on the <b>Restarts</b> dialog, then see
<a href="../operators/ide/backtrace-safe-mode.htm"><b>backtrace-safe-mode</b></a>.
</p>



<h3 id="20">
Navigating the outline 
</h3>


<p id="21">
The outline (which is an instance of an <a href="../classes/cg/outline.htm"><code>outline</code></a> widget) can be navigated quickly by
pressing the J, K, F, and D keys as alternatives to the down, up,
right, and left arrow keys respectively, and the T and B keys for the
Home and End keys. This works because the outline widgets in IDE tool
dialogs enable their <a href="../operators/cg/h/handle-home-key-shortcuts.htm"><b>handle-home-key-shortcuts</b></a> property.
</p>


<h3 id="22">Viewing Function Arguments and Local Variables</h3>

<p id="23">
There are two ways to see the arguments and local variables of any
function call (also called a frame) in the backtrace outline. One way
is to "open" the outline item to see the arguments in place in the
outline widget. Do this either by clicking the small blue arrow at
the left of the outline item, or by selecting it and pressing the
right arrow key (as usual with an outline control). It may be most
handy to use the up and down arrow keys to peruse the stack, then
pressing the right arrow key to see the arguments of a function call,
and then pressing the left arrow key to close that item before
proceeding to another one (to get the previous list of arguments out
of the way).
</p>
<p id="24">
The other way to view the arguments and local variables is to show
them in the inspector. This can be done either by double-clicking the
outline item for the desired function call (to the right of the blue
arrow), by selecting the "Inspect Arguments and Variables" command
from the right-button menu of the outline-item, or by invoking the
<a href="tools-menu.htm#inspect-selected-object">Tools | Inspect Selected Object</a>
command while the desired outline-item is selected.
</p>
<p id="25">
A combination of these two techniques may be used by opening an
outline-item and then double-clicking one of the arguments (or using
<a href="tools-menu.htm#inspect-selected-object">Tools | Inspect Selected
Object</a>) to inspect an individual argument value.
</p>
<p id="26">
When viewing arguments and local variables directly in the outline
control, the icon at the left of each value indicates what type of
argument or value it is.  Each icon is actually three letters, where
"Req" indicates a required argument, "Key" a keyword argument, "Opt"
an optional argument, "Res" a rest argument, "Aux" an aux argument,
and "Loc" indicates a local variable value.  The icons are in
different colors to help distinguish them.
</p>

<p id="27">
Each argument and variable value is printed according to the IDE
options <a href="../operators/ide/dialog-print-level.htm"><b>dialog-print-level</b></a>,
<a href="../operators/ide/dialog-print-length.htm"><b>dialog-print-length</b></a>,
<a href="../operators/ide/dialog-print-array.htm"><b>dialog-print-array</b></a>, and
<a href="../operators/ide/dialog-print-circle.htm"><b>dialog-print-circle</b></a>, which
can be set on the IDE 2 tab of the <a href="options-dialog.htm">Options dialog</a>.  If the printed
representation doesn't fit in the single line that's provided for it,
you can see the full text (or much more of it) in a large tooltip
window by holding the mouse cursor over the value.  Even if the value
does fit as printed, a tooltip will still appear if a longer
representation will be printed by extending the printer variables
<a href="../../ansicl/dictentr/print-le.htm"><code>*print-level*</code></a>,
<a href="../../ansicl/dictentr/print-le.htm"><code>*print-length*</code></a>, and
<a href="../../ansicl/dictentr/print-ar.htm"><code>*print-array*</code></a>.
Specifically, the tooltip will use a <a href="../../ansicl/dictentr/print-le.htm"><code>*print-level*</code></a> that's one greater
than <a href="../operators/ide/dialog-print-level.htm"><b>dialog-print-level</b></a>,
a <a href="../../ansicl/dictentr/print-le.htm"><code>*print-length*</code></a> that's
triple the value of
<a href="../operators/ide/dialog-print-length.htm"><b>dialog-print-length</b></a>, and
with <a href="../../ansicl/dictentr/print-ar.htm"><code>*print-array*</code></a>
always true.  The necessary hovering time for the tooltip to appear is
controlled by the CG option <a href="../operators/cg/t/tooltip-delay.htm"><b>tooltip-delay</b></a>, which can be set on the Common
Graphics tab of the <a href="options-dialog.htm">Options dialog</a>.
</p>



<h3 id="28">
Modifying Arguments and Local Variables
</h3>

<p id="29">
For debugging experiments, it can be useful to change the value of an
argument or local variable when execution is paused at a break, and
then to continue execution with the modified values.  In the IDE's
backtrace pane, there are two ways to modify an argument or local
variable: one way is to view all of the arguments and variables of a
stack frame in the inspector as described above, and then to modify
one or more values as usual in the inspector.  The other way is to
open the outline item for a stack frame, then right-click one of the
arguments or variables for that frame and select the <b>Modify
Argument or Variable</b> command.  A modal dialog will then appear,
into which you can enter a Lisp expression that will be evaluated to
produce the replacement value.
</p>
<p id="30">
Once you have modified one or more arguments or variables for a
particular frame, you can continue execution in one of two ways.  If
you modified an argument (rather than a variable), then you can press
the <b>Pop and Retry</b> button in the backtrace pane's toolbar to
retry the call to that frame's function with the replaced argument(s).
Or if execution is paused at a continuable error, then you can modify
either an argument <b>or</b> a local variable, and then press the
<b>Continue</b> button in the toolbar to continue execution from the
actual point of the error.  (It's not useful to modify local variables
for a non-continuable error.)
</p>


<h3 id="31">Inspecting the Function or Method Object</h3>

<p id="32">
The "Inspect Function Object" (or "Inspect Method Object") command on
the right-button menu of a backtrace outline-item will inspect the
function or method itself, rather than its arguments and local
variables.  Unlike the other commands on this right-button menu, this
one is not a shortcut for any IDE menu-bar command, and so this
particular action may be invoked only from the right-button menu.
</p>

<h3 id="33">The Debug Window after an error and the :zoom top-level command</h3>

<p id="34">
Though the IDE implements this specialized graphical interface for
browsing a backtrace and proceeding from an error, the corresponding
top-level commands such as <a href="../tpl-commands/zoom.htm"><b>:zoom</b></a>
are still always available in the listener pane. If both techniques
are used simultaneously, note that the two views of the stack are
independent, with each one maintaining its own currently selected
stack frame, and each one independently either currently showing
hidden frames or not. (The IDE display depends on the <b>Include
Hidden Frames/Hide Hidden frames</b> button, the <a href="../tpl-commands/zoom.htm"><b>:zoom</b></a> display depends on whether <a href="../tpl-commands/zoom.htm"><b>:zoom</b></a> is called with <code>:all
t</code> or <code>:all nil</code>.) In addition, the IDE
backtrace outline always shows the whole stack (adding new clumps of
frames as you scroll to the bottom), while the <a href="../tpl-commands/zoom.htm"><b>:zoom</b></a> command shows a certain number of
frames according to its (sticky) <i>count</i> argument.
</p>




<hr><p id="35"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had moderate revisions compared to the 9.0 page.</small><br><small>Created 2016.6.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 9.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/ide-menus-and-dialogs/debug-window-after-error.htm">9.0 version</a></td></tr></table></body></html>