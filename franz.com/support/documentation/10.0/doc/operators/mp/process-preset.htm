<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>process-preset</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: mp</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 9.0 to 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/mp/process-preset.htm">9.0 version</a></td></tr></table><h2 id="2">process-preset</h2>

<p id="3"><b>Arguments: </b><i>
process initial-function </i> &amp;rest <i>initial-args</i><i>
</i></p>


<p id="4">
This function sets the initial function and arguments of
<i>process</i>, then resets any computation in progress
in it. This does not make process active if it was not already
active.
</p>
<p id="5">
<a href="process-preset.htm"><b>process-preset</b></a>
will signal an error if <i>process</i> is an immigrant
process.
</p>

<p id="6">
<a href="process-preset.htm"><b>process-preset</b></a> is an extended
operation that is not atomic in Allegro CL implementations.  
<a href="process-preset.htm"><b>process-preset</b></a> is implemented
with a <a href="process-interrupt.htm"><b>process-interrupt</b></a> call
that causes a throw past the current initial-function of the process.
Another <a href="process-interrupt.htm"><b>process-interrupt</b></a>
call, or any <a href="../../../ansicl/dictentr/unwind-p.htm"><b>unwind-protect</b></a>
clauses in the current call chain can interrupt this throw and cancel
or modify the effect of the <a href="process-preset.htm"><b>process-preset</b></a>.  Therefore, only a cooperating
process can be expected to complete a <a href="process-preset.htm"><b>process-preset</b></a> call in all cases.  An
application cannot assume that a <a href="process-preset.htm"><b>process-preset</b></a> will always be effective if the
target process is not expecting it.
</p>
<p id="7">
<b>Example:</b>
</p>

<pre id="8">
Process A:  (with-timeout (2 (do-something)) (work))

Process B: Calls (process-preset A 'foo) while A is in (work).
</pre>

<p id="9">
The timeout in A can interrupt a <a href="process-preset.htm"><b>process-preset</b></a> and leave A
in <b>do-something</b> with
the <i>process-initial-function</i> set
to <b>foo</b>, but <b>foo</b> is never called.
</p>
<p id="10">
Solution:
</p>

<pre id="11">

Process B: 
  ;; Notify A that a process-preset is needed.
  (setf (getf (process-property-list A) 'preset-in-progress)
        (list 'foo))
  (process-preset A 'foo)

Process A:  
  (with-timeout (2
                 (let ((preset (getf (process-property-list 
                                      *current-process*) 
                                     'preset-in-progress)))
                    (when preset 
		      ;; If a process-preset was interrupted by the 
		      ;; timeout, resume the process-preset operation.
                      (apply #'process-preset *current-process* preset)))
                 (do-something)) 
            (work))
</pre>

<p id="12">
The above example is only an outline that illustrates the kind of
action that must be taken.  Additional interlocks and bookkeeping may
be needed to make this solution totally bomb-proof.
</p>


<p id="13">
See <a href="../../multiprocessing.htm">multiprocessing.htm</a>
for general
information on multiprocessing in Allegro CL.
</p>

<hr><p id="14"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 9.0 page.</small><br><small>Created 2015.5.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 9.0 to 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/mp/process-preset.htm">9.0 version</a></td></tr></table></body></html>