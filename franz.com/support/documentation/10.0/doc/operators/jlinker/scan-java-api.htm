<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>scan-java-api</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: net.jlinker</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 9.0 to 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/jlinker/scan-java-api.htm">9.0 version</a></td></tr></table><h2 id="2">scan-java-api</h2>

<p id="3"><b>Arguments: </b><i>
</i>&amp;key <i>jar init-args classpath keep classes mode out package names exclude rename</i><i>
</i></p>


<p id="4">
This function analyzes a collection of Java libraries and classes to
generate Lisp functions that call Java methods and constructors
through a Jlinker connection.
</p>
<p id="5">
Each Java instance method name is mapped to a Lisp function with a corresponding
Lisp name.  Overloading is handled by dynamic dispatch in Lisp.  More details
on this later.
</p>
<p id="6">
Each Java static method name is mapped to a Lisp name composed from the class
name and method name. 
</p>
<p id="7">
Java constructors are mapped to a Lisp name derived from the class name.
</p>
<p id="8">
Each static final field is mapped to a Lisp name derived from the class name
and field name.  The Lisp function caches the value in Lisp so that repeated
uses of the field do not require round-trips to Java.
</p>
<p id="9">
The scan and analysis is done by calling Java reflection API methods. 
Therefore, Java and the required jar files must be available during the scan 
and code generation.
</p>
<p id="10">
The generated code is sensitive to the case-mode of both the
generating and running Lisp.  In most cases code generated
in <code>:break</code> mode in <b>mlisp</b> will run equally
well in <b>alisp</b> or <b>mlisp</b>.  Code generated
in <code>:keep</code> mode in mlisp is most likely to cause
problems when run in <b>alisp</b>. (mlisp is the case-sensitive modern
Common Lisp version. alisp is the case-insensitive Common
Lisp. See <a href="../../case.htm">case.htm</a> for details of case sensitivity
in Allegro Common Lisp.
</p>
<h3 id="11">
Arguments:
</h3>
<p id="12">
<b><i>jar</i></b>: A jar file entry or a list of jar file
entries:
<pre id="13">
 	 jar-file-entry -&gt; path-string | (path-string filter... )
	 filter -&gt; :include reg-exp-string
	        -&gt; :exclude reg-exp-string
</pre>

<p id="14">
Each filter is applied in turn to each name in the jar
file manifest.
</p>
<p id="15">
Very often, a jar file contains many entries above and beyond
the documented public api in a library.  There is little
benefit in generating Lisp names for all the internal names
of the library.
</p>
<p id="16">
<b><i>init-args</i></b>: A list of initial arguments to
<a href="jlinker-init.htm"><b>jlinker-init</b></a>.
</p>
<p id="17">
<b><i>classpath</i></b>: A list of additional classpath
components.
</p>
If Jlinker is already running when <a href="scan-java-api.htm"><b>scan-java-api</b></a> is called, then
both <i>init-args</i> and <i>classpath</i>
are ignored.
</p>
<p id="18">
If Jlinker is not running, <a href="jlinker-init.htm"><b>jlinker-init</b></a> is called with the
specified arguments.  A <i>classpath</i> argument is
added to this list by combining the <i>classpath</i>
argument with the list of jar files.
</p>
<p id="19">
The remaining keyword arguments are:
</p>
<ul>
<li id="20">
<b><i>keep</i></b>: When
non-<code>nil</code> (default
is <code>nil</code>), <a href="scan-java-api.htm"><b>scan-java-api</b></a> saves the collected class
and method data as the value
of <code>user::*jscan-java-api-data*</code>. This information
may be of some value in reporting a problem in API generation.
</li>
<li id="21">
<b><i>classes</i></b>: A Java class name or a list of
class names. The classes mentioned in this argument are included in the
analysis and code generation. This argument may also include the names
of lists of classes defined with <a href="def-japi-classes.htm"><b>def-japi-classes</b></a>.
</li>
<li id="22">
<b><i>mode</i></b>: Specifies the result of the
call. The choices are:
<ul>
<li id="23">
<code>:gen</code> (the default) - Analyze and generate Lisp
code.
</li>
<li id="24">
<code>:walk</code> - Analyze the class tree and return a list of
all methods and fields.
</li>
<li id="25">
<i>:flat</i> - Analyze and return a flat list of
methods.
</li>
</ul>
</li>
<li id="26">
<b><i>out</i></b>: A pathname for the output
file. If <i>mode</i> is <code>:gen</code> and out
is <code>nil</code>, then <i>mode</i>
switches to <code>:walk</code>. Two output files are generated:
<ul>
<li id="27">
<i>out.cl</i> is the generated Lisp code.
</li>
<li id="28">
<i>out.txt</i> is a cross-reference listing of Lisp and Java names.
</li>
</ul>
</li>
<li id="29">
<b><i>package</i></b>: A name for the Lisp package where
the generated functions will reside.  If <i>mode</i>
is <code>:gen</code> and <i>package</i>
is <code>nil</code>, then <i>mode</i>
switches to <code>:walk</code>.
<p id="30">
A new package is created, using no other packages. All the generated
function names are exported from this package.
</p>
<p id="31">
If several jar files are involved, there may be Lisp name conflicts.
In that case, the code generation may need to be split among two or
more packages and the code generated into separate output files.  The
functions in each Lisp package must be generated with separate calls
to the generator function.
</p>
<p id="32">
If the generator is called twice for different libraries but the same
output package, conflicts between the two sets of functions will not
be detected when the code is generated; the conflicts may be detected
when the generated code is loaded.
</p>
</li>
<li id="33">
<b><i>names</i></b>: Specifies the method used to
generate Lisp names. The default is <code>:break</code>. The
choices are:
<ul>
<li id="34">
<code>:keep</code> - generate the Lisp name from the exact
spelling of the Java name, but remain sensitive to Lisp input case
mode by interning symbols with read-from-string. This style is likely
to cause problems in ANS Lisp (<b>alisp</b>) and thus is recommended
only in <b>mlisp</b> (Modern) mode. Here are some examples when using
<code>:keep</code>:
<pre id="35">
  Instance method addItem maps to Lisp function jpk:addItem
  Static method close in class com.foo.SomeClass
         maps to Lisp function jpk:SomeClass.close
  Constructor for class com.foo.SomeClass
         maps to Lisp function jpk:new-SomeClass
  Accessor for static final field foo in com.foo.SomeClass
         is Lisp function jpk:SomeClass.foo
</pre>
</li>
<li id="36">
<code>:break</code> - generate a Lisp name similar to the Java
name and avoid any case issues.  This style may generate name
conflicts in some cases (see the <i>exclude</i> arg
below). Here are some examples using <code>:break</code>:
<pre id="37">
  Instance method addItem maps to Lisp function jpk:add-item
  Static method close in class com.foo.SomeClass
         maps to Lisp function jpk:some-class-close
  Constructor for class com.foo.SomeClass
         maps to Lisp function jpk:new-some-class
  Accessor for static final field foo in com.foo.SomeClass
         is Lisp function jpk:some-class-foo
</pre>
</li>
<li id="38">
<code>:keep-case</code> - generate the Lisp name from the exact
spelling of the Java name and bypass Lisp input case conversion by
using <a href="../../../ansicl/dictentr/intern.htm"><b>intern</b></a> explicitly.  This
method is the same as <code>:keep</code> in Modern mode
(<b>mlisp</b>).  When used in ANS mode (<b>alisp</b>), the code must
be generated and compiled in ANS mode and can only run in ANS
Lisp. Most Java names will need to be escaped in any application code.
</li>
</ul>
<p id="39">
See the table below for all the possible case-mode and names variations.
</p>
</li>
<li id="40">
<b><i>exclude</i></b>: A list of method or class names
for which Lisp functions should not be generated.  Each entry in the
list may be a name regexp or a list of the form
<ul>
<li id="41">
<i>class-or-method-regexp</i> -- skip code generation for any Java
member if the class name or member name contains this regexp
</li>
<li id="42">
<code>({ :method | :static } [method-regexp [class-regexp
[(signature-regexp...)]]])</code> -- skip code generation for for
the specified method or methods. If the <code>class</code> and
<code>signature</code> regexps are omitted, skip code generation
for any method with a matching name.  If
the <code>class-regexp</code> is present, skip only methods in
matching classes.  If the signature regexps are specified, skip only
methods with that many arguments where the arguments match.
A <code>nil</code> or an empty string will match anything.
</li>
<li id="43">
<code>(:constructor [class-regexp
[(signature-regexp...)]])</code>
</li>
<li id="44">
<code>(:final class-regexp field-regexp)</code>
</li>
</ul>
</li>
<li id="45">
<b><i>rename</i></b>: A list of entries that specify
alternate Lisp names for Java members. Each entry is of the form
<pre id="46">
       ( Java-spec Lisp-name-spec )
</pre>
<p id="47">
where <code>Lisp-name-spec</code> may be a string or a symbol. A
string denotes a symbol in the generated code package. A symbol is
used as specified.  If the symbol is not in the generated code
package, the generated output file will assume that the needed package
exists.
</p>
<p id="48">
<code>Java-spec</code>: All the strings in the Java-spec must
match the Java class or method name exactly. The Java-specs can be:
</p>
<ul>
<li id="49">
a string -- All Java methods with this name will be mapped to the
specified Lisp name.
<pre id="50">
	(:static name [class [signature]]) 
	(:method name [class [signature]])  -- If class and signature
	            are omitted, the Lisp name is used for all methods
		    with the given name.  If class is specified, only 
		    methods in that class are affected.  If signature
		    is specified, the Lisp name is used for exactly
		    one method.

	(:final class name) -- The specified final static field will
	           have the specified Lisp accessor function.

        (:constructor class [signature])
</pre>
</li>
</ul>
</li>
</ul>

<p id="51">
Here is a table of consequences of the various values for the names
argument:
</p>
<table BORDER="1" CELLSPACING="1" CELLPADDING="2" WIDTH="90%">
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><strong>:names argument</strong></td>
    <td WIDTH="20%" VALIGN="TOP"><strong>ACL general</strong></td>
    <td WIDTH="20%" VALIGN="TOP"><strong>ACL compile</strong></td>
    <td WIDTH="20%" VALIGN="TOP"><strong>ACL run</strong></td>
    <td WIDTH="20%" VALIGN="TOP"><strong>Notes</strong></td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:break</code></td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI only</td>
    <td WIDTH="20%" VALIGN="TOP"></td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:break</code></td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI and Modern</td>
    <td WIDTH="20%" VALIGN="TOP"></td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:keep</code></td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI only</td>
    <td WIDTH="20%" VALIGN="TOP"></td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:keep</code></td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP"></td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:keep</code></td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">Conflicts likely</td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:keep</code></td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP">ANSI</td>
    <td WIDTH="20%" VALIGN="TOP"></td>
  </tr>
  <tr>
    <td WIDTH="20%" VALIGN="TOP"><code>:keep</code></td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP">Modern</td>
    <td WIDTH="20%" VALIGN="TOP"></td>
  </tr>
</table>
<p id="52">
All other case-mode combinations are likely to produce conflicts
and errors at code generation, compile or load time, and likely
garbled results at run time.
</p>

<h3 id="53">
Name conflicts in Lisp:
</h3>
<p id="54">
Lisp name conflicts occur when two or more Java names map to the same
generated Lisp name.  When a conflict is detected, a message is
printed to the console; the first definition detected for this name is
emitted, but any subsequent code is suppressed for that Lisp name.  A
summary of all the conflicts is inserted at the end of the generated
code file.
</p>
<p id="55">
When Java names cause conflicts in Lisp, there are several actions
possible:
</p>
<ul>
<li id="56">
Ignore the conflict.  In this case, the conflicting Java members can
only be reached by explicit reference through the jlinker funcall API.
</li>
<li id="57">
Add an exclude spec to the <a href="scan-java-api.htm"><b>scan-java-api</b></a> call to suppress the
conflict notification. The Java members are accessed as above.
</li>
<li id="58">
Add a rename spec to the <a href="scan-java-api.htm"><b>scan-java-api</b></a> call to specify alternate
Lisp names for the conflicting members.
</li>
</ul>


<h3 id="59">
Dynamic Dispatch of Java methods:
</h3>
<p id="60">
The generated Lisp functions attempt to dispatch overloaded Java
methods by analyzing the Java classes of the instance and other
arguments.  An available method is a potential match if the
instance and argument classes are subclasses of the declaring method
and declared signature parts.  If this results in more than one
match, then declaring classes are compared and any methods declared
on a superclass are discarded.  If there are still more than one method
remaining, and error is signaled.  No attempt is made to order the
methods by their signatures. 
</p>
<p id="61">
This strategy is similar to but not identical to the way methods are
dispatched by the Java compiler. In some cases, the Lisp code
identifies more than one method; in some cases it may be unable to
match the Lisp arguments to the declared method signatures; in these
case an error is signaled.
</p>
<h3 id="62">
Example:
</h3>
<pre id="63">
     Java classes       Fine extends Narrow;   Narrow extends Broad
     Java methods on class Foo       convert(Narrow x)   convert(Broad x)
     Lisp call          (convert instance-of-Foo, instance-of-Fine)
                 Dispatcher will find two convert methods.
</pre>
<p id="64">
It is also possible to call the wrong method when the intent is to
call a method more general than the most specific.  In Java the
situation is handled by casting the argument, but there is no way to
cast the argument in Lisp.  These situations must be recognized by the
programmer.
</p>
<p id="65">
In some of these cases, the solution is to call the desired method
explicitly with <a href="jcall.htm"><b>jcall</b></a>, <a href="jstatic.htm"><b>jstatic</b></a>, or <a href="jnew.htm"><b>jnew</b></a>.  In some, there is no way to call
the method with jlinker:
</p>

<p id="66">
See <a href="../../jlinker.htm">jlinker.htm</a> for more information on the
jLinker facility.
</p>

<hr><p id="67"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 9.0 page.</small><br><small>Created 2015.5.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 9.0 to 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/jlinker/scan-java-api.htm">9.0 version</a></td></tr></table></body></html>