<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>*alpha-blending*</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Variable</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">This page is new in 10.0.</a></small></td></tr></table><h2 id="2">*alpha-blending*</h2>

<p id="3">
This variable has an effect only on the Windows platform.
</p>
<p id="4">
This variable can be used to create translucent effects when drawing
lines, filling areas, and displaying pixmaps, where anything that was
drawn earlier appears to partially "show through" new content that is
drawn later.
</p>
<p id="5">
When the value is true, a drawing or filling function such as
<a href="../../operators/cg/d/draw-line.htm"><b>draw-line</b></a> or <a href="../../operators/cg/f/fill-polygon.htm"><b>fill-polygon</b></a> will use the alpha component of the
current <a href="../../operators/cg/f/foreground-color.htm"><b>foreground-color</b></a> that is being used for
the drawing. See
<a href="../../operators/cg/m/make-rgb.htm"><b>make-rgb</b></a>, where the alpha
component of a color can be specified. When displaying pixmaps, if the
alpha argument is passed to <a href="../../operators/cg/c/copy-to-stream.htm"><b>copy-to-stream</b></a> then it will be used whenever the
value of this variable is true.
</p>
<p id="6">
An alpha value is an integer between 0 and 255 inclusive.  A value of
255 represents full opacity, where the pre-existing background does
not show through at all, and is no different than drawing without
alpha blending. A value of 0 represents full transparency, where the
new content is not seen at all (and so of course is not useful). A
typical value might be 192, which will blend three-fourths of the
color that's being drawn with one-fourth of the colors that the pixels
had before.  This lets the underlying image show through a little
while mostly showing the new content in front of it.
</p>
<p id="7">
The default value is <code>nil</code> for backward
compatibility and efficiency. Typically you would bind this variable
to true around a block of drawing code where alpha blending is
desired. Or this variable could simply be set to true globally if the
effect is desired everywhere.
</p>
<p id="8">
<b>Caveat</b>: When using alpha-blending, any existing background at
all will be blended with the content that's being drawn.  Even with a
fairly large alpha value like 192 (for three-fourths opacity),
background areas that are white will still show through by one-fourth,
making the content that's being drawn appear somewhat washed-out.  And
new content that's drawn over black areas of the background will be
darker than they would be without alpha-blending.  This may limit the
usefulness of alpha blending to special effects, rather than where you
want the content that's being drawn in front to look as good as it can
look by itself.
</p>
<p id="9">
See <a href="s_antialiasing_s.htm"><code>*antialiasing*</code></a> and
<a href="s_color-gradient-filling_s.htm"><code>*color-gradient-filling*</code></a>
for other appearance-enhancing effects.
</p>

<h2 id="10">
Example
</h2>

<p id="11">
This example simply generates a set of random triangles and fills them
with random colors that use random amounts of alpha blending, and adds
bilateral symmetry.  Clicking the window generates another image.  The
alpha blending works only on the Windows platform, but the code runs
elsewhere. 
</p>

<pre id="12">

(defclass triangle-window (frame-window)
  ((triangles :accessor triangles :initform nil))
  (:default-initargs
      :double-buffered t
    :scrollbars nil
    :width 600 :height 600))

(defmethod make-triangles ((window triangle-window))
  (let* ((width (interior-width window))
         (height (interior-height window))
         triangles vertices mirrors x y color)
    (dotimes (j (+ 3 (random 12)))
      (setq vertices (make-array 3))
      (setq mirrors (make-array 3))
      (dotimes (k 3)
        (setq x (random width))
        (setq y (random height))
        (setf (aref vertices k)(make-position x y))
        (setf (aref mirrors k)(make-position (- width x) y)))
      (setq color (make-rgb :red (random 255) :green (random 255)
                            :blue (random 255) :alpha (random 255)))
      (push (list (list color vertices)
                  (list color mirrors))
            triangles))
    (setf (triangles window) triangles)))

(defmethod redisplay-window ((window triangle-window) &optional box)
  (declare (ignore box))
  (clear-page window)
  (unless (triangles window)
    (make-triangles window))
  (let* ((*antialiasing* t)
         (*alpha-blending* t))
    (dolist (pair (triangles window))
      (dolist (triangle pair)
        (with-foreground-color (window (first triangle))
          (fill-polygon window (second triangle))))
      (dolist (triangle pair)
        (with-foreground-color (window gray)
          (draw-polygon window (second triangle)))))))

(defmethod mouse-left-down ((window triangle-window) buttons position)
  (declare (ignore buttons position))
  (make-triangles window)
  (invalidate window))

(make-window :triangle-window
  :class 'triangle-window)
</pre>

<p id="13">
Here are some pictures showing triangles with alpha blending.
</p>

<p id="14">
<p id="15"><img src="../../pictures/alpha1.png"></p>
</p>
<p id="16">
<p id="17"><img src="../../pictures/alpha2.png"></p>
</p>
<p id="18">
<p id="19"><img src="../../pictures/alpha3.png"></p>
</p>
<p id="20">
<p id="21"><img src="../../pictures/alpha4.png"></p>
</p>
<p id="22">
<p id="23"><img src="../../pictures/alpha5.png"></p>
</p>
<p id="24">
<p id="25"><img src="../../pictures/alpha6.png"></p>
</p>
<p id="26">
<p id="27"><img src="../../pictures/alpha7.png"></p>
</p>


<hr><p id="28"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page is new in the  10.0 release.</small><br><small>Created 2016.6.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">This page is new in 10.0.</a></small></td></tr></table></body></html>