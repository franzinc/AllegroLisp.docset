<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../acldoc-styles.css" type="text/css"><title>:break</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Top-level Command</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/tpl-commands/break.htm">10.0 version</a></td></tr></table><h2 id="2">:break</h2>

<p id="3"><b>Arguments: </b><i>
</i> &amp;optional <i>mode</i><i>
</i> &amp;rest <i>mode-values</i><i>
</i></p>

<p id="4">This command allows the user to add or delete 
breakpoints and to print out information about the breakpoints
currently in use. </p>
<p id="5">
Called without arguments, this command prints information on what
breakpoints are set, if any. Breakpoint options, described
below, are displayed in the output.
</p>

<pre id="6">
cl-user(131): :break
No breakpoints set
cl-user(132): :break open
Adding #&lt;Function open&gt;: 0
               0: 48 81 ec 88 01 subq	rsp,$392      ; 49
                  00 00 
cl-user(133): :break
#&lt;Function open&gt;:  asm: pc=0 not yet hit
cl-user(134): 
</pre>
<p id="7">
Called with arguments, <b>:break</b> sets breakpoints or otherwise
manages them.
</p>
<p id="8">
Whether or not a breakpoint is effective (that is stops code
execution when reached) depends on whether it is <em>installed</em> or
<em>uninstalled</em>. An installed breakpoint is one which will cause
normal execution to stop and the debugger entered if an attempt is
made to execute the instruction at that location. An uninstalled
breakpoint will not cause such an interruption of execution. Deleted
breakpoints are always uninstalled but otherwise whether breakpoints
are or are not installed depends on (as we said just above) whether
ldb debugging mode is on, see <a href="ldb.htm"><b>:ldb</b></a>, or the code being evaluated is
within the body of <a href="../operators/excl/with-breakpoints-installed.htm"><b>with-breakpoints-installed</b></a> form.</p>

<p id="9">
The situation is further complicated by the fact that when a
breakpoint is hit and stops execution, the debugging mode changes from
ldb to ldb-step and breakpoints are then uninstalled. See <a href="../debugging.htm#ldb-stepper-1">The Lisp DeBug (ldb)
stepper</a> in <a href="../debugging.htm">debugging.htm</a> for information
on this point.
</p>

<p id="10">Again, <a href="break.htm"><b>:break</b></a> called with
arguments adds or deletes breakpoints from the current breakpoint
set. Its arguments are <b><i>mode</i></b> and
<b><i>mode-values</i></b>.
</p>

<p id="11"><i>mode</i> can be </p>

<ul>
  <li id="12"><code>:add</code>, to add
    breakpoints. <i>mode-values</i> in that case should
    be one or more breakpoint specifications (described just
    below). Any number of breakpoint specifications can be
    specified. If none are specified, the command is a no-op,
    i.e. does nothing.</li>
  <li id="13"><code>:del</code>, to delete
    breakpoints. <i>mode-values</i> in that case should
    be breakpoint specifications (described just below) for the
    breakpoints to be deleted (they must have been previously
    added). Any number of breakpoint specifications can be
    specified. If none are specified, the command is a no-op,
    i.e. does nothing.</li>
  <li id="14"><code>nil</code>, to delete all breakpoints.</li>
</ul>


<p id="15">A breakpoint specification is made up of a particular pc (program
counter, look at the output of <a href="../../ansicl/dictentr/disassem.htm"><b>disassemble</b></a>) offset from the beginning of a
particular function. A single breakpoint can be specified by</p>

<blockquote>
  <pre id="16"><em>function-name</em> [<em>offset</em>]</pre>
</blockquote>

<p id="17">where <em>offset</em> defaults to 0. Multiple breakpoints can be
specified by simply naming pairs:</p>

<blockquote>
  <pre id="18">foo 10 bar 20</pre>
</blockquote>

<p id="19">When multiple breakpoints are specified, the offsets are not
optional. However, multiple breakpoints within the same function can
be specified by leaving out all but the first function name; thus</p>

<blockquote>
  <pre id="20">foo 10 20 30</pre>
</blockquote>

<p id="21">is equivalent to specifying</p>

<blockquote>
  <pre id="22">foo 10 foo 20 foo 30</pre>
</blockquote>


<h3 id="23">
Location specification
</h3>

<p id="24">
In the examples above (like <code>foo 10</code>), the numeric
value (10) is a relative program counter, 10 bytes after the
start of the function <b>foo</b>. You can also specify a character
position, or a record number. The full specification is:
</p>

<pre id="25">
   &lt;function-name&gt; [:pc | :pos | :rec] number
</pre>

<p id="26">
:pc for offest from the program counter; :pos for character position;
and :rec for record number. The default is :pc, so that is what is
used in all examples above. Thus:
</p>

<pre id="27">
  :break foo 10
</pre>

<p id="28">
is the same as
</p>

<pre id="29">
  :break foo :pc 10
</pre>

<p id="30">
Either will set a breakpoint within function foo which contains
program-counter location 10 (the instruction or form may start
precisely at 10, or it may start earlier but contain pc 10 as part of
it).
</p>

<pre id="31">
 :break foo :rec 4
</pre>

<p id="32">
will select the fifth (zero-based) source debug record and set the
breakpoint there.
</p>
<p id="33">
<b>Note</b>: If none of :pc, :rec, or :pos are given <b>and</b> an
integer is also not given, then the default is :rec 0:
</p>

<pre id="34">
 :br foo
</pre>

<p id="35">
will set the breakpoint to the first record for function foo.  It may
be at pc 0, and if the language for foo's breakpoints is :asm then the
breakpoint will always be at pc location zero (since :asm breakpoint
records are manufactured on the fly).
</p>

<pre id="36">
 :br foo :pos 12497
</pre>

<p id="37">
will set the breakpoint whose form starts at character-position 12497
in the file. If there are multiple such records, the one which has
the lowest level (probably a level 0 record, which lexically appears
in the file) is selected. Usually, the form will start with a left
paren, and the file position is 0-based (contrast this with the
1-based position indication of emacs, so it might become a bit
confusing).
</p>

<p id="38">
Note: A breakpoint is set as soon as an integer is seen in the :break
command, or, if no integer is seen, when the command arguments have
been exhausted or a new function name is seen at which time the
integer 0 is used).  A function name starts a new breakpoint.  If some
of the above options are specified after an integer is seen, but
before the end of the command or a new function, then that option is
ignored.
</p>

<h2 id="39">
Other options: :slide, :set, :inside, :not-inside, :language, etc.
</h2>

<p id="40">
The options are :slide, :set, :inside, :not-inside, :include-process, :exclude-process,
:start-debug, :end-debug, and :trace.  These options may take
arguments.
</p>

<h3 id="41">
:slide
</h3>
<p id="42">
This option doesn't actually set the breakpoint, but sets a slide
point instead.  Sliding is a method for navigating around the source
debug info for a function without actually setting these breakpoints.
Contrast this option, which sets the slide point using breakpoint
criteria, with the <a href="slide.htm"><b>:slide</b></a> top-level command, which allows the slide
point to be moved around using navigation directions.
</p>

<h3 id="43">
:set
</h3>
<p id="44">
This option sets a breakpoint based on the current slide-point.  See
the description of the <a href="slide.htm"><b>:slide</b></a> top-level command.
</p>

<h3 id="45">
:language <i>language-name</i>
</h3>
<p id="46">
This option establishes the preferred language for a breakpoint.
Breakpoints set within the same command after this option will be of
the specified language.  The language can currently be :asm, :lisp, or
:python (when cl-python is loaded).  Other languages may follow.
</p>

<h3 id="47">
:inside <i>function-or-list</i>
<br>

:not-inside <i>function-or-list</i>
</h3>
<p id="48">
These are identical in specification and operation
the <code>:inside</code> and <code>:not-inside</code>
option to
<a href="../debugging.htm#tracer-1">trace</a>.  These
determine whether the breakpoint is stopped at based on whether there
is or is not a particular enclosing function on the stack.  See the
<code>:inside</code> and <code>:not-inside</code> options
in the description of the <a href="../debugging.htm#tracer-1">trace</a> macro. The
argument <i>function-or-list</i> should be a function
name, function object, or a list of those.
</p>
<h3 id="49">
:include-process <i>process</i>
<br>

:exclude-process <i>process</i>
</h3>
<p id="50">
These options takes a single argument which designates the process to
include or exclude.  Each option can be used multiple times, as long
as the opposite option has not yet been used. If neither of these
options are used, then breakpoints will stop regardless of the process
that is executing that code.  If only one process is specified
in <code>:include-process</code> then all others will be
excluded by default.
</p>

<h3 id="51">
:start-debug
</h3>
<p id="52">
The breakpoint being set is marked as
a <code>:start-debug</code> breakpoint, which means it will not
stop like other breakpoints do, but it will cause the thread being
stopped at to be marked as being debugged. This means that the garbage
collector will walk the stack in a conservative manner, which also
means that variable slots in the stack which have died but which still
have valid Lisp values in them will continue to be forwarded, so as to
allow the user to see local variables even after they have just died.
</p>
<h3 id="53">
:end-debug
</h3>
<p id="54">
The breakpoint being set
is not stopped at, but signals to the debugger to revert the
current thread back to not being debugged (i.e. back to
precise-gc).
</p>
<h3 id="55">
:trace
</h3>
<p id="56">
Instead of stopping, the
breakpoint will be printed out.
</p>



<p id="57">See <a href="../debugging.htm#ldb-stepper-1">The Lisp DeBug (ldb)
stepper</a> in <a href="../debugging.htm">debugging.htm</a> for
information on ldb stepping. See <a href="../top-level.htm">top-level.htm</a> for
more information on top-level commands.</p>
<hr><p id="58"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had moderate revisions compared to the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/tpl-commands/break.htm">10.0 version</a></td></tr></table></body></html>