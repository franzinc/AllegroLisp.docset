<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../acldoc-styles.css" type="text/css"><title>inspect-dialog</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>IDE Dialog</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/ide-menus-and-dialogs/inspect-dialog.htm">10.0 version</a></td></tr></table><h2 id="2">Inspect</h2>

<p id="3"><img src="../pictures/insp.jpg"></p>
<p id="4">
The Inspector window displays information about objects. The same
information is displayed (when not in the IDE) using the function
<a href="../../ansicl/dictentr/inspect.htm"><b>inspect</b></a> and the various
inspector top-level commands documented in the <a href="../inspector.htm">inspector.htm</a>.
</p>
<p id="5">
This dialog is displayed by the various Inspect commands on
the <a href="tools-menu.htm">Tools menu</a>, such
as <a href="tools-menu.htm#inspect-selected-object">Tools | Inspect Selected
Object</a>. It is also displayed (even when the IDE is not
running but is loaded) by the operators <a href="../operators/ide/ide-inspect.htm"><b>ide:ide-inspect</b></a> and
<a href="../operators/ide/ide-inspect-standalone.htm"><b>ide:ide-inspect-standalone</b></a>.
</p>
<p id="6">
The illustration shows an Inspector window inspecting a form.
We describe the various fields and controls on the Inspector,
and the right button menu.
</p>
<h3 id="7">The Properties and Internals buttons</h3>
<p id="8">
The buttons at the top (in the illustration, <b>Properties and
Internals</b>, other objects may have more or different buttons),
indicate what pane of the window is visible. In the illustration, the
Properties pane is visible and the button looks pressed. Properties
are usually changeable aspects of the object while Internals should
not normally be modified. Controls have an Events button listing the
event functions called when certain mouse events occur over the
control.
</p>


<p id="9">
The Inspector lists various component parts or other attributes of the
object that is being inspected, with the name of the part appearing in
the lefthand column and its value in the righthand column.  The
component parts of a standard object, for example, are its slots,
whereas the parts of a list are the list's elements, with the indices
of the elements serving as the part names.  If the inspected object is
a standard-object or structure-object, then the home package of each
slot name symbol is also shown in the left column.
</p>

<p id="10">
Each value is printed according to the IDE options <a href="../operators/ide/dialog-print-level.htm"><b>dialog-print-level</b></a>, <a href="../operators/ide/dialog-print-length.htm"><b>dialog-print-length</b></a>, <a href="../operators/ide/dialog-print-array.htm"><b>dialog-print-array</b></a>, and <a href="../operators/ide/dialog-print-circle.htm"><b>dialog-print-circle</b></a>, which can be set on the
<b>IDE 2</b> tab of the <a href="options-dialog.htm">Options dialog</a>.  If the printed
representation doesn't fit in the single-line table cell that's
provided for it, you can see the full text (or much more of it) in a
large tooltip window by holding the mouse cursor over the value in the
righthand column.  Even if the value does fit as printed, a tooltip
will still appear if a longer representation will be printed by
extending the printer variables <a href="../../ansicl/dictentr/print-le.htm"><code>*print-level*</code></a>, <a href="../../ansicl/dictentr/print-le.htm"><code>*print-length*</code></a>, and <a href="../../ansicl/dictentr/print-ar.htm"><code>*print-array*</code></a>.  Specifically, the tooltip will
use a <a href="../../ansicl/dictentr/print-le.htm"><code>*print-level*</code></a>
that's one greater than the IDE option <a href="../operators/ide/dialog-print-level.htm"><b>dialog-print-level</b></a>, a
<a href="../../ansicl/dictentr/print-le.htm"><code>*print-length*</code></a> that's
triple the value of <a href="../operators/ide/dialog-print-length.htm"><b>dialog-print-length</b></a>, and
with <a href="../../ansicl/dictentr/print-ar.htm"><code>*print-array*</code></a>
always true.  The necessary hovering time for the tooltip to appear is
controlled by the Common Graphics option <a href="../operators/cg/t/tooltip-delay.htm"><b>tooltip-delay</b></a>, which can be set on the CG tab of
the <a href="options-dialog.htm">Options
dialog</a>.
</p>

<p id="11">
You can replace the value of most object parts by clicking on the
value in the righthand column to select it, and then typing in a new
value.  This works only if the Lisp reader can return the desired type
of value from the string that you type.  Alternately, you can click on
the small <i>extended editor</i> button at the right end of the
selected row to show a dialog for editing the value in a more powerful
way.  On the <b>Internals</b> tab, the extended editor will always be
a text-editing window where you can enter a Lisp form that will be
evaluated to produce the value to use.  On the <b>Properties</b> tab,
a more specialized dialog may appear that's designed for editing the
particular type of value that the property is declared to have, such
as the font dialog when the property is declared to hold a font.  The
image on the extended editor button indicates which specialized dialog
will appear.
</p>
<p id="12">
Clicking on a part name in the lefthand column will inspect the value
of that part.  Then clicking the left arrow button at the upper left
of the inspector will return to the first object.
</p>

<h3 id="13">The drop-down list</h3>
<p id="14">
The drop-down list at the top shows a history of the objects that have
already been inspected by this inspector. The objects are arranged
into a hierarchy, where objects that were inspected by clicking in the
left column of the inspector are indented just below the objects from
which they were inspected; otherwise more recently inspected objects
appear toward the top of the list.  Clicking an item in this list
re-inspects it.
</p>
<p id="15">
A pixmap appears at the left of each item in the drop-down history
list to make it easier to find objects of various types. By default,
widgets are identified with the pixmaps that are used for them in the
Component Toolbar, windows display a picture of an empty window, all
other first-class objects (instances of standard-object or
structure-object) display a solid gray dot, and all remaining
objects show a hollow dot. These pixmaps (except for the dots) also
appear in the always-visible part of the history widget for the
currently inspected object, and appear in the rows of the inspector
body when it is inspecting a sequence.
</p>
<p id="16">
The inspector may be customized to show additional pixmaps for other
types of objects by defining <a href="../operators/cg/p/pixmap.htm"><b>pixmap</b></a> methods.
</p>
<h3 id="17">The button with the left-pointing arrow</h3>
<p id="18">
The button with a left-pointing arrow at the upper left of the
inspector re-inspects the previously-inspected object. Clicking this
button multiple times will re-inspect successively older objects
from the inspector history. Or use your mouse's
back button if it has one.
</p>
<h3 id="19">The status bar at the bottom</h3>
<p id="20">
The status bars at the bottom show the type of value accepted (on the
left) and information on the value on the right.
</p>
<h3 id="21">The right button menu over the inspector</h3>
<p id="22">
Right-clicking in the inspector shows a pop-up menu of additional
inspector commands. A child menu of this menu shows further inspector
commands that are more easily accomplished in other ways but are shown
as a reminder of their keyboard shortcuts. Here are the
inspector-specific commands on the main pop-up menu:
</p>
<ul>
<li id="23">
<b>Inspect in New Window</b>: Inspects the currently selected object,
but first opening a new inspector window in which to inspect it. This
allows retaining the current state of the earlier inspector.
</li>

<li id="24">
<b>Inspect Callers</b>: Inspects a list of the names of the functions,
methods, and macros that call the currently selected function or use
the selected macro, if one is selected. This command will appear on
the menu only if the currently selected value is a either an fbound
symbol, a list of <a href="../../ansicl/dictentr/setfpset.htm"><b>setf</b></a> and an fbound-symbol, a method
spec list, a function object, or a method object. When the value
specifies a method, the list that is inspected will include all of the
callers of the method's generic function rather than of that
particular method, because the particular methods that a function
calls is determined only when arguments are passed at run time.  The
inspected list is obtained by calling <a href="../operators/xref/get-relation.htm"><b>xref:get-relation</b></a>,
passing <code>:calls</code> as the <i>relation</i>
argument.  Callers are known only when <a href="../variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a> and <a href="../variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> are true when the code is
compiled and loaded respectively; those variables are always true by
default in the IDE.
</li>
<li id="25">
<b>Inspect Users</b>: Inspects a list of the names of the functions,
methods, and macros that use the currently selected global variable,
if one is selected. This menu command will appear on the menu only if
the currently selected value is a bound symbol. The inspected list is
obtained by calling <a href="../operators/xref/get-relation.htm"><b>xref:get-relation</b></a>,
passing <code>:uses</code> as the <i>relation</i>
argument. Users are known only when <a href="../variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a> and <a href="../variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> are true when the code
is compiled and loaded respectively; those variables are always true
by default in the IDE.
</li>
<li id="26">
<b>Inspect Referencers</b>: Inspects a vector of all of the objects in
the Lisp heap that point directly to the selected value object. The
inspected vector is obtained by calling <a href="../operators/excl/get-references.htm"><b>excl:get-references</b></a>.  To avoid including
objects that are no longer being used, you may want to first do a
<code>(</code><code><a href="../operators/excl/gc.htm"><b>gc</b></a></code><code> t)</code>
and/or use the <b>Clear History</b> command on this same menu and the
<b>Clear History</b> button in the <a href="debug-window.htm">Debug Window</a>'s toolbar and
the <b>Clear</b> button on the <a href="trace-dialog.htm">Trace Dialog</a>.
</li>

<li id="27">
<b>Refresh Values</b>: Updates the currently displayed information to
reflect any changes that have occurred in the lisp environment since
the most recent inspection was done. This essentially re-inspects the
current object. Information is also updated when re-inspecting an
object from the inspector history, or for an individual attribute if
it is not read-only and is selected for typing in a new value.
</li>

<li id="28">
<b>Inspect Sorted Copy</b>: This command will appear only if the
currently inspected object is a list or a vector. It inspects a new
list that is created by sorting a copy of the inspected object
alphanumerically by the print names of the elements of the sequence.
This may facilitate finding a particular item in the sequence.
</li>



<li id="29">
<b>Back in History</b>: Re-inspects the previously inspected object,
just as the arrow button at the upper left or your mouse's back
button does.
</li>

<li id="30">
<b>Forward in History</b>: Re-inspects later objects just after earlier
objects have been re-inspected. Or use your
mouse's forward button if it has one.
</li>
<li id="31">
<b>Clear History</b>: Empties the inspector history of all objects
that have been inspected so far. This may be needed before
calling <a href="../operators/excl/get-objects.htm"><b>get-objects</b></a>
or <a href="../operators/excl/get-references.htm"><b>get-references</b></a> to examine
the heap, so that the garbage collector can first remove this old
information from the heap. This command does not trigger a garbage
collection itself, though; that can be done with a call
to <a href="../operators/excl/gc.htm"><b>gc</b></a>. Alternately
you could close the inspector window. You may also want to use the
<b>Clear History</b> button in the listener's
(<a href="debug-window.htm">Debug Window</a>'s)
toolbar for the same reason.
</li>
</ul>
<h3 id="32">Inspecting Long Sequences</h3>
<p id="33">
When you inspect a long list or vector, the inspector will initially
display only the first fifty elements, for efficiency reasons. To
display the next set of fifty elements, you simply need to scroll to
the bottom of the ones that are displayed so far. You can do that
either with the keyboard (using the <b>PageDown</b> key or the down
arrow key) or with the mouse (by dragging the scrollbar or pressing
its lower arrow button). <b>GTK note</b>: You may need to use the
keyboard technique if the scrollbar method does not work.
</p>
<h3 id="34">More on the Properties and Events tabs</h3>
<p id="35">
The Properties and Events tabs also provide brief documentation on how
to access an object programmatically (assuming that properties are
defined for the object). The function for reading the value of a
property almost always has the same name as the property.
</p>
<p id="36">
Thus if you notice in the inspector that an object has a property
called <a href="../operators/cg/b/border.htm"><b>border</b></a>,
this means that you can read the current value of that property with a
form such as
</p>
<pre id="37">
(border my-object)
</pre>
<p id="38">
Likewise, the writer function is almost always the setf of the
property name, and the initarg for specifying the property value when
creating the object is almost always the corresponding keyword.  So
</p>
<pre id="39">
(setf (border my-object) :frame)
</pre>
<p id="40">
would set the border property, and an initarg/value pair such as
</p>
<pre id="41">
:border :frame
</pre>
<p id="42">
would initialize the border when creating the object.
</p>
<h3 id="43">Other comments</h3>
<p id="44">
A property value is displayed in a bold font if it is not equivalent
to the programmatic default value for that property.  This highlights
values that you have changed, as well as some sample values that are
given to widgets that you place onto forms (and which you typically
will want to change).  A read-only value will never be bold.  A
handful of properties are never shown bold because they generally do
not have meaningful default values and are more distracting than
useful when made bold; these exceptions include the properties <a href="../operators/cg/c/child-p.htm"><b>child-p</b></a>, <b>class</b>, <a href="../operators/cg/t/tab-position.htm"><b>tab-position</b></a>, <a href="../operators/cg/l/left.htm"><b>left</b></a>, <a href="../operators/cg/t/top.htm"><b>top</b></a>, <a href="../operators/cg/w/width.htm"><b>width</b></a>, <a href="../operators/cg/h/height.htm"><b>height</b></a>, <a href="../operators/cg/d/dialog-items.htm"><b>dialog-items</b></a>, and <a href="../operators/cg/p/pixmap-use-handle.htm"><b>pixmap-use-handle</b></a>.
</p>
<p id="45">
Brief help information is supplied in the main Allegro status bar when
a property is selected in the inspector, and for more detailed help
(or to make sure that the accessor functions really have the same
name) you can invoke the <a href="help-menu.htm#help-on-selected-sym">Help | Help On
Selected Symbol</a> command (shortcut F1) while the property or event
handler of interest is selected in the inspector.
</p>
<p id="46">
For further information on using properties programmatically, refer to
<a href="../operators/cg/d/defproperties.htm"><b>defproperties</b></a> or
<a href="../operators/cg/d/define-property.htm"><b>define-property</b></a>.
</p>




<hr><p id="47"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/ide-menus-and-dialogs/inspect-dialog.htm">10.0 version</a></td></tr></table></body></html>