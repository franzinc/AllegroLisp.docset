<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="acldoc-styles.css" type="text/css"><title>Date-time (ISO 8601) support in Allegro CL</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/date-time.htm">10.0 version</a></td></tr></table><h1 id="2">Date-time (ISO 8601) support in Allegro CL</h1><p id="3">This document contains the following sections:</p><a href="#dt-intro-1">1.0 date-time introduction</a><br><a href="#iso-8601-1">2.0 ISO 8601</a><br>&nbsp;&nbsp;&nbsp;<a href="#iso-8601-dates-2">2.1 ISO 8601 dates</a><br>&nbsp;&nbsp;&nbsp;<a href="#iso-8601-times-2">2.2 ISO 8601 times</a><br>&nbsp;&nbsp;&nbsp;<a href="#parsing-iso-8601-2">2.3 Parsing ISO 8601 date-time representations</a><br>&nbsp;&nbsp;&nbsp;<a href="#validating-iso-8601-2">2.4 Validating ISO 8601 date-time representations</a><br><a href="#iso-8601-and-ut-1">3.0 Conversions between date-time and CL universal-time</a><br>&nbsp;&nbsp;&nbsp;<a href="#dt-strings-2">3.1 Getting a date-time value as a string</a><br><a href="#time-ints-1">4.0 Time-intervals</a><br><a href="#add-sub-dur-1">5.0 Adding/Subtracting Durations</a><br><a href="#dt-classes-1">6.0 date-time classes</a><br>&nbsp;&nbsp;&nbsp;<a href="#date-time-2">6.1 The date-time class</a><br>&nbsp;&nbsp;&nbsp;<a href="#duration-2">6.2 The duration class</a><br>&nbsp;&nbsp;&nbsp;<a href="#time-interval-2">6.3 The time-interval class</a><br><a href="#dt-ops-1">7.0 date-time operators</a><br><a href="#dt-vars-1">8.0 date-time variables</a><br><a href="#ut-parser-1">9.0 General date to universal time parsers</a><br><a href="#copyleft-1">10.0 Copyright notice</a><br><a name="example-preamble">
<h3 id="4">
Module and package names
</h3>
</a><p id="5">
The <b>datetime</b> module is loaded by evaluating:
</p><pre id="6">
(require :datetime)
</pre><p id="7">
Symbols naming operators, variables, and classes in the datetime
module are in the <code>util.date-time</code> package. The
examples in the documentation assume <code>(require
:datetime)</code> has been evaluated and that <code>(use-package
:util.date-time)</code> has been evaluated in the current package.
</p><hr><hr><h2 id="8"><a name="dt-intro-1">1.0 date-time introduction</a></h2>

<p id="9">
The datetime module provides tools to parse and generate time
expressions using the ISO 8601 standard as well as to manipulate and
convert the resulting date-time instances.
</p>
<p id="10">
Specifically, the datetime module does the following:
</p>
<ul>
<li id="11">
Defines classes that represent points of time (dates and times of
day), time durations, and time intervals.
</li>
<li id="12">
Provides parsing tools that create date-time instances of these
classes from ISO 8601 date-time representation texts.
</li>
</ul>

<p id="13">
The Allegro <a href="operators/excl/locale-print-time.htm"><b>locale-print-time</b></a> and <a href="operators/excl/locale-format-time.htm"><b>locale-format-time</b></a> functions can be used to
display the contents of the <a href="classes/date-time/date-time.htm"><code>date-time</code></a> instances.  The default
<a href="../ansicl/dictentr/print-ob.htm"><b>print-object</b></a> method for
date-time objects displays the date-time instance in ISO 8601
format. The global variable <a href="variables/date-time/s_date-time-fmt_s.htm"><code>util.date-time:*date-time-fmt*</code></a> can be
used to override the default date-time printer.
</p>

<p id="14">
Several additional functions for converting strings in a variety of
time formats to universal times, and vice versa are also
available. They are described
in <a href="#ut-parser-1">Section 9.0 General date to universal time parsers</a> below.
</p>


<hr><hr><h2 id="15"><a name="iso-8601-1">2.0 ISO 8601</a></h2>

<p id="16">
ISO 8601 is an international standard for representing dates in the
Gregorian calendar and times and representations of periods of times.
(There are descriptions in a number of places. See, for example, <a href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> in the <a href="http://en.wikipedia.org/wiki/Main_Page">Wikipedia
Encyclopedia</a>, where you will find additional links. This essay was
adapted from that Wikipedia article -- see
<a href="#copyleft-1">Section 10.0 Copyright notice</a>.)
</p>
<p id="17">
ISO 8601 specifies formats for specifying dates (see
<a href="#iso-8601-dates-2">Section 2.1 ISO 8601 dates</a>) and times (see
<a href="#iso-8601-times-2">Section 2.2 ISO 8601 times</a>). 
</p>
<p id="18">
All dates use the <a href="http://en.wikipedia.org/wiki/Gregorian_calendar">Gregorian
Calendar</a>, the calendar currently in use almost everywhere on
earth, even dates prior to the implementation of the Gregorian
Calendar on 15 October 1582. This means that the ISO 8601 date for an
event prior to 15 October 1582 will very likely be different from the
common specification of that date, and certainly be different from
contemporary specifications of that date. (Thus, 14 October 1582 is a
valid ISO 8601 date, but there was no such date in areas that accepted
the Gregorian Calendar because that was when the adjustment of 10 days
was made.
</p>
<p id="19">
Also, ISO 8601 specifies that there was a year 0 while most references
to BCE (Before Common Era) years assume there was no year 0. Thus
Caesar invaded Britain in 54 BCE by most accounts but 53 BCE in ISO
8601.
</p>
<p id="20">
These details are important for understanding and using ISO 8601,
particularly for pre-modern dates, but we will not discuss them
further here. Follow the links to discussions of ISO 8601 above to
find out more about its definitions and background.
</p>
<p id="21">
In the rest of this essay, we discuss the implementation and interface
to ISO 8601 dates in Allegro CL.
</p>



<hr><h2 id="22"><a name="iso-8601-dates-2">2.1 ISO 8601 dates</a></h2>


<p id="23">
An ISO 8601 description of a date can be as a 
</p>
<ul>
<li id="24">
<b>Calendar date</b>
</li>
<li id="25">
<b>Week date</b>
</li>
<li id="26">
<b>Ordinal date</b>
</li>
</ul>

<p id="27">
A <b>Calendar date</b> is written as YYYY-MM-DD (extended) or YYYYMMDD
(basic).  YYYY indicates a year with century.  MM indicates the month
of the year (01 through 12).  DD indicates the day of that month (01
through 31).  Examples: "19850412" and "1985-04-12" denote the same
date: the 12th of April in 1985.
</p>
<p id="28">
A <b>Week date</b> is written as YYYY-Www-D (extended) or YYYYWwwD
(basic).  YYYY indicates a year, ww indicates a week number (01
through 53 -- the <b>W</b> is the letter W), and D is the weekday
number (1 through 7).  Monday is 1, Sunday is 7.  Week 01 is the week
with the year's first Thursday in it.  Examples: "1985-W15-5" is the
fifth day of the week containing the fifteenth Thursday of the year
1985.  This happens to be equivalent to the 12th of April in 1985
(1985-04-12).
</p>
<p id="29">
Note that the week year can be different than the normal (Gregorian)
year for dates at the end or start of the ordinary year.  For
example, "2008-12-29" is written as "2009-W01-1".
</p>
<p id="30">
An <b>Ordinal date</b> is written as YYYY-DDD (extended) or YYYYDDD
(basic).  YYYY indicates a year, and DDD is the ordinal day in the
year.  For example, the date representing "1985-04-12" can also be
written "1985-102".
</p>
<p id="31">
ISO 8601 describes possible reduced precision and truncated date
representations.  For example, YYYY-MM is used to specify a month.
Also, YY-MM-DD is used to specify a date in an implied century.
</p>
<p id="32">
It is also possible to represent negative years or years greater than
9999.  However, the Lisp datetime module parser needs to know that
extra year digits are being used parsed to avoid ambiguities.
</p>



<hr><h2 id="33"><a name="iso-8601-times-2">2.2 ISO 8601 times</a></h2>

<p id="34">
An ISO 8601 description of a time is HH:MM:SS (extended) or HHMMSS
(basic).  A 24-hour clock is used.  Fractions may also be used with
the time elements.  For example, "14 hours, 30 and one half minutes"
can be represented as "14:30.5" or "14:30,5" (that is, either a period
or a comma may be used as the fraction separator).
</p>
<p id="35">
An ISO 8601 description of a time zone is &lt;time&gt;Z or
&lt;time&gt; followed by a plus (+) or minus (-) followed by HH:MM
(extended) or HHMM (basic).  The number is the offset from
UTC. (<b>UTC</b> is <a href="http://en.wikipedia.org/wiki/Coordinated_Universal_Time">Coordinated
Universal Time</a>, also called Greenwich Mean Time.)
</p>
<p id="36">
An ISO 8601 description of a date-time combination is
&lt;date&gt;T&lt;time&gt;.  For example, 1985-04-12T23:20:50+02:00 is
23:20:50 on 1985-04-12 in the time zone that is 2 hours ahead of UTC.
</p>
<p id="37">
Note that the Lisp datetime module allows a single space to be used
in place of T to separate &lt;date&gt; and &lt;time&gt;.
</p>



<hr><h2 id="38"><a name="parsing-iso-8601-2">2.3 Parsing ISO 8601 date-time representations</a></h2>

<p id="39">
The <a href="operators/date-time/date-time.htm"><b>date-time</b></a>
function is used to parse ISO 8601 date-time expressions.  A <a href="classes/date-time/date-time.htm"><code>date-time</code></a> instance is
returned.
</p>
<p id="40">
A <a href="classes/date-time/date-time.htm"><code>date-time</code></a>
instance holds not only the result of the parse, but, when applicable,
other equivalent representations for the parsed date-time.
</p>

<h4 id="41">
Example
</h4>

<pre id="42">
 &gt; (require :datetime)
 t
 &gt; (use-package :util.date-time)
 t
 &gt; (setq d (date-time &quot;1985-04-12&quot;))
 #&lt;date-time &quot;1985-04-12&quot; @ ...&gt;

 ;; Directly parsed information
 &gt; (date-time-year d)
 1985

 ;; Directly parsed information
 &gt; (date-time-ymd-month d)
 4

 ;; Directly parsed information
 &gt; (date-time-ymd-day d)
 12

 ;; Calculated information from the parse
 &gt; (date-time-yd-day d)
 102

 ;; Here is DESCRIBE on the date-time instance D.
 ;; Notice that no time information is present as
 ;; none was provided:
 &gt; (describe d)
 #&lt;date-time &quot;1985-04-12&quot; @ ...&gt; is a date-time.
  ymd-yd-before-year-0         nil
  ymd-yd-century               19
  ymd-yd-year-in-century       85
  ymd-month                    4
  ymd-day                      12
  yd-day                       102
  ywd-before-year-0            nil
  ywd-century                  19
  ywd-decade-in-century        8
  ywd-year-in-decade           5
  ywd-week                     15
  ywd-day                      5
  zone-hour                    nil
  zone-minute                  nil
  hour                         nil
  hourf                        nil
  minute                       nil
  minutef                      nil
  second                       nil
  secondf                      nil
 Displayed using various locale-print-time fmts:
  &quot;%Y-%m-%d&quot;                         1985-04-12
 Calendar Date:
  &quot;%Y-%m-%d&quot;                         1985-04-12
 Ordinal Date:
  &quot;%Y-%j&quot;                            1985-102
 Week Date:
  &quot;%G-W%V-%u&quot;                        1985-W15-5
 &gt;
</pre>

<p id="43">
By default, the calculations that complete the date-time instance are
done at parse time.  These calculations can be suppressed by setting
the <i>complete</i> keyword argument to <a href="operators/date-time/date-time.htm"><b>date-time</b></a> to <code>nil</code> (thus instructing the system not to calculate
value for all slots). An incomplete date-time instance can
subsequently be completed using the <a href="operators/date-time/complete-date-time.htm"><b>complete-date-time</b></a> function, which
updates the date-time instance.
</p>

<h4 id="44">
Example <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>
<pre id="45">
 &gt; (setq d (date-time &quot;1985-04-12&quot; :complete nil))
 #&lt;date-time &quot;1985-04-12&quot; @ ...&gt;

 &gt; (date-time-ymd-day d)
 12

 ;; The date-time was not completed, so the following 
 ;; reader returns nil.
 &gt; (date-time-yd-day d)
 nil

 ;; Update the date-time instance.
 &gt; (complete-date-time d)
 #&lt;date-time &quot;1985-04-12&quot; @ ...&gt;

 &gt; (date-time-yd-day d)
 102
</pre>



<hr><h2 id="46"><a name="validating-iso-8601-2">2.4 Validating ISO 8601 date-time representations</a></h2>

<p id="47">
No checking in done to determine whether a string passed to <a href="operators/date-time/date-time.htm"><b>date-time</b></a> is a valid
date. So, for example, no checking is done in this case:
</p>
<pre id="48">
cl-user(48) (util.date-time:date-time &quot;2011-02-30&quot;)
#&lt;util.date-time:date-time &quot;2011-02-30&quot; @ #x2101948a&gt;
</pre>

<p id="49">
Even though there is no 30th of February (in any year) a date-time
object is returned. We do not do validation since it would slow down
every call. It is easy enough to write a validation function, like the
following:
</p>

<pre id="50">
cl-user(49): (defun valid-date-p (s)
                (string= s
                         (format nil "~,v/locale-format-time/"
                                 "%Y-%m-%d" 
                                 (util.date-time:complete-date-time s))))
valid-date-p
cl-user(50): (valid-date-p "2011-02-28")
t
cl-user(51): (valid-date-p "2011-02-29")
nil
cl-user(52): (valid-date-p "2012-02-29")
t
cl-user(53):
</pre>





<hr><hr><h2 id="51"><a name="iso-8601-and-ut-1">3.0 Conversions between date-time and CL universal-time</a></h2>

<p id="52">
The datetime Lisp module provides functions, <a href="operators/date-time/date-time-to-ut.htm"><b>date-time-to-ut</b></a>
and <a href="operators/date-time/ut-to-date-time.htm"><b>ut-to-date-time</b></a>, that convert
date-time instances holding both a date and a time to/from the
associated Common Lisp universal-time (a non-negative integer) or an
extended CL universal time (which can be zero or a ratio, positive or
negative).  Since ISO 8601 allows for dates/times to be specified
outside the range of those representable by universal-time (i.e.,
dates before 1900, or times containing fractional seconds), an
extended universal-time is used.  This extended universal-time allows
for negative values to represent dates before 1900.  In addition,
extended universal-times can be non-integer rationals representing
times with fractional seconds.
</p>

<h4 id="53">
Example 1 <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>
<pre id="54">
 &gt; (setq d (date-time &quot;1985-04-12T23:20:50+02:00&quot;))
 #&lt;date-time &quot;1985-04-12T23:20:50+02:00&quot; @ ...&gt;

 &gt; (setq ut (date-time-to-ut d))
 2691177650

 &gt; (decode-universal-time ut (- (date-time-zone d)))
      ;; Note the sign of the time zone is reversed: the ISO 8601 convention
      ;; and the CL convention (as implemented in Allegro CL) are opposite,
      ;; so a negative time zone in one is a positive time zone in the other.
 50     ; second
 20     ; minute
 23     ; hour
 12     ; day
 4      ; month
 1985   ; year
 4      ; day of week 
 nil    ; daylight savings time
 -2     ; timezone
</pre>
<h4 id="55">
Example 2 <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>
<pre id="56">
 &gt; (setq d (date-time &quot;1885-04-12T23:20:50+02:00&quot;))
 #&lt;date-time &quot;1885-04-12T23:20:50+02:00&quot; @ ...&gt;

 ;; The following returns a negative number since the date is before 1900.
 ;; 
 &gt; (setq ut (date-time-to-ut d))
 -464481550
</pre>
<p id="57">
There are three special date-time designators: 
</p>
<ul>
<li id="58">
<b><code>:now</code></b> means the current time
</li>
<li id="59">
<b><code>:today</code></b> means the start (00:00:00) of the
current day
</li>
<li id="60">
<b><code>:zero</code></b> means the start of Jan 1, 0000
</li>
</ul>

<h4 id="61">
Examples <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>
<pre id="62">
;; The examples for :now and :today are correct when the
;; document was written. You will, of course, get different values
 (date-time :now) =&gt; #&lt;date-time &quot;2006-07-11T22:28:08&quot; @ #x7185242a&gt;
 (date-time :today) =&gt; #&lt;date-time &quot;2006-07-11T00:00:00&quot; @ #x7185ec6a&gt;
 (date-time :zero)  =&gt; #&lt;date-time &quot;0000-01-01T00:00:00&quot; @ #x717dcad2&gt;
</pre>
<p id="63">
<a href="operators/date-time/date-time-to-ut.htm"><b>date-time-to-ut</b></a>
takes a <i>defaults</i> keyword argument whose default
value is <code>:zero</code>.  Thus, the default behavior is to
merge the argument <a href="classes/date-time/date-time.htm"><code>date-time</code></a> instance with
<code>(date-time :zero)</code> to get a complete date-time
instance that can be converted to universal-time (see <a href="operators/date-time/merge-date-times.htm"><b>merge-date-times</b></a>).  You can
override the default by specifying <code>:today</code>,
<code>:now</code>, or any other date-time instance.
</p>

<h4 id="64">
Examples <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>

<pre id="65">
 (ut-to-date-time (date-time-to-ut &quot;1985-04-12&quot;))
   =&gt; #&lt;date-time &quot;1985-04-12T00:00:00+08:00&quot; @ #x718bad0a&gt;

 (ut-to-date-time (date-time-to-ut &quot;1985-04&quot;))
   =&gt; #&lt;date-time &quot;1985-04-01T00:00:00+08:00&quot; @ #x718c108a&gt;

 (ut-to-date-time (date-time-to-ut &quot;1985&quot;))
   =&gt; #&lt;date-time &quot;1985-01-01T00:00:00+08:00&quot; @ #x718c7092&gt;

 ;; Note that the default may not be desirable in the following case:
 ;;
 (ut-to-date-time (date-time-to-ut &quot;85-04-12&quot;))
   =&gt; #&lt;date-time &quot;0085-04-12T00:00:00+08:00&quot; @ #x718ebcba&gt;

 ;; The following are ways to specify different defaults:

 (ut-to-date-time (date-time-to-ut &quot;85-04-12&quot;
                                    :defaults (merge-date-times &quot;1900&quot; :zero)))
   =&gt; #&lt;date-time &quot;1985-04-12T00:00:00+08:00&quot; @ #x7191cc8a&gt;

 (ut-to-date-time (date-time-to-ut &quot;85-04-12&quot; :defaults :today))
   =&gt; #&lt;date-time &quot;2085-04-12T00:00:00+08:00&quot; @ #x71924f5a&gt;

 (ut-to-date-time (date-time-to-ut &quot;85-04-12&quot; :defaults :now))
   =&gt; #&lt;date-time &quot;2085-04-12T22:36:32+08:00&quot; @ #x7192cce2&gt;
</pre>


<hr><h2 id="66"><a name="dt-strings-2">3.1 Getting a date-time value as a string</a></h2>

<p id="67">
Once you have a date-time value, you can print it
with <a href="../ansicl/dictentr/writepri.htm"><b>princ</b></a> or get its
printed representation as a string with <a href="../ansicl/dictentr/format.htm"><b>format</b></a>. Here is an example. We start
with a universal time and go from there:
</p>

<pre id="68">
 cl-user(16): (setq ut (get-universal-time))
3488049643

;; print a universal-time as a date-time
;;
cl-user(25): (princ (util.date-time:ut-to-date-time ut))
2010-07-13T15:40:43-07:00

;; or put it in a string
;;
cl-user(26): (format nil "~a" (util.date-time:ut-to-date-time ut))
"2010-07-13T15:40:43-07:00"

;; or get all sorts of other things from it
;;
cl-user(17): (locale-print-time ut :fmt "Day is %A, Month is %B")
Day is Tuesday, Month is July

cl-user(18): (locale-print-time ut :fmt "Day is %A, Month is %B" 
                  :locale "nl_NL")
Day is dinsdag, Month is juli

cl-user(19): (locale-print-time ut :show-date t :show-time t 
                  :locale "nl_NL")
dinsdag 13 juli 2010 15:40:43 uur

cl-user(20): (locale-print-time ut :show-date t :show-time t 
                  :locale "en_US")
Tuesday, July 13, 2010 03:40:43 PM

cl-user(21): (locale-print-time ut :fmt "%Y-%m-%dT%H:%M:%S")
2010-07-13T15:40:43

cl-user(22):
</pre>





<hr><hr><h2 id="69"><a name="time-ints-1">4.0 Time-intervals</a></h2>

<p id="70">
ISO 8601 specifies textual representations for time-intervals.  They
may be specified in four ways:
</p>
<ol>
<li id="71">
Start and end, such as 2002-03-01T13:00:00Z/2003-05-11T15:30:00Z
</li>
<li id="72">
Start and duration, such as 2002-03-01T13:00:00Z/P1Y2M10DT2H30M
</li>
<li id="73">
Duration and end, such as P1Y2M10DT2H30M/2003-05-11T15:30:00Z
</li>
<li id="74">
Duration only, such as P1Y2M10DT2H30M
</li>
</ol>

<p id="75">
A repeating interval is formed by adding "Rn/" to the beginning of an
interval expression.  For example, to repeat the interval
P1Y2M10DT2H30M five times starting at 2002-03-01T13:00:00Z, use 
R5/2002-03-01T13:00:00Z/P1Y2M10DT2H30M
</p>
<p id="76">
Time-intervals are represented as objects in the Lisp datetime module.
They can be parsed using the <a href="operators/date-time/parse-iso8601.htm"><b>parse-iso8601</b></a> function.  
</p>

<h4 id="77">
Example <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>

<pre id="78">
 &gt; (describe
    (parse-iso8601
     &quot;R5/2002-03-01T13:00:00Z/P1Y2M10DT2H30M&quot;))

 #&lt;time-interval R5/2002-03-01T13:00:00Z/P1Y2M10DT2H30M0S @ ...&gt; is an
     instance of #&lt;standard-class time-interval&gt;:
  The following slots have :instance allocation:
   start         #&lt;date-time &quot;2002-03-01T13:00:00Z&quot; @ ...&gt;
   end           nil
   duration      #&lt;duration 1Y2M10DT2H30M0S @ ...&gt;
   recurrences   5
</pre>

<hr><hr><h2 id="79"><a name="add-sub-dur-1">5.0 Adding/Subtracting Durations</a></h2>

<p id="80">
The Lisp datetime module provides a way to add and subtract durations
to/from date-time instances.  The following steps describe the
addition/subtraction procedures:
</p>
<ol>
<li id="81">
The &lt;year, month&gt; of the duration is added to or subtracted from the
date.  If the day is out of range, it is pinned to be within range.
For example, April 31 is pinned to April 30.
</li>
<li id="82">
The &lt;day, hour, minute, second&gt; is added/subtracted component-wise.
This operation can cause the year and month to change.
</li>
</ol>

<h3 id="83">
Duration addition and subtraction are not inverse operations
</h3>

<p id="84">
Adding durations of days, hours, minutes, and seconds to a date-time
is an unambiguous operations, but adding months (often) and years
(sometimes) is more problematic. 
</p>
<p id="85">
Consider a Month/Day: adding a month should result in (+ Month
1)/Day. That definition is fine when there is a (+ Month 1)/Day but
often there isn't. This Adding a month to April 4 gives May 4, and a
month to June 30 gives July 30. But what about adding a month to May
31? There is no June 31. The result could be July 1, but June 30 seems
to make more sense (it would be uninitutive for the addition of one
month to result in the Month value increasing by 2). ISO 8601 does not
address this point. Allegro CL follows the XML schema behavior, which
follows this rule:
</p>
<blockquote>
<p id="86">
<b>The addition of one month result in the month value being increased
by 1 (mod 12) and the day value being unchanged, unless the day does
not exist in the new month, in which case the day value is the largest
possible for the new month (i.e. the last day of the month).</b>
</p>
</blockquote>
<p id="87">
But following that rule results duration addition and subtraction not
being inverse operations. For example, adding <b>1 month</b> to
<code>May 31</code> yields <code>June 30</code>, but
subtracting <b>1 month</b> from <code>June 30</code> yields
<code>May 30</code>, and <i>not</i> <code>May 31</code>.
</p>

<h4 id="88">
Example <a href="#example-preamble">[assumes the current package uses the
util.date-time package]</a>
</h4>

<pre id="89">
;; Here we use January 31, in a leap year:

 &gt; (setq one-month (time-interval-duration (time-interval &quot;P1M&quot;)))
 #&lt;duration 0Y1M0DT0H0M0S @ ...&gt;

 &gt; (setq dt (add-duration (date-time &quot;19840131&quot;) one-month))
 #&lt;date-time &quot;1984-02-29&quot; @ ...&gt;

 &gt; (subtract-duration dt one-month)
 #&lt;date-time &quot;1984-01-29&quot; @ ...&gt;

;; Note that adding one month to January 31 (in a leap year) 
;; produced February 29, and subtracting one month from that 
;; produced January 29, not January 31.

;; The same point is made with this example (using August 31):

 &gt; (subtract-duration
        (add-duration (date-time &quot;--0831&quot;) one-month)
        one-month)
 #&lt;date-time &quot;--08-30&quot; @ ...&gt;
</pre>

<p id="90">
The same problem occurs with years, but only with leap years. February
29, 1984, or 1984/02/29, plus one year is February 28, 1985, or
1985/02/28 (as February 29, 1985 does not exist). 1985/02/28 minus one
year is 1984/02/28, not 1984/02/29.
</p>
<p id="91">
Duration addition and subtraction restricted to weeks, days, hours,
minutes, and second are inverse operations because there is never any
ambiguity about what adding or subtracting those values gives.
</p>
<p id="92">
(The problem arises becaus duration addition for months and years are
not a one-to-one functions. One month plus 1985/01/31, 1985/01/30,
1985/01/29, and 1985/01/28 all give 1985/02/28, so 1985/02/28 minus
one month is necessarily ambiguous. This ambiguity is inherent: there
is no definition of "adding one month" other than "always adding a
specific number (31?) of days regardless of the starting month" that
will not be ambiguous. But addition of days, hours, minutes, and
second is always one to one and so always invertable.)
</p>

<h4 id="93">
Duration addition is not associative
</h4>
<p id="94">
One consequence of the fact that adding a month or year is defined to
keep the same day in the new month if possible, otherwise use the last
day of the month is that duration addition is not associative: a
date-time plus one month plus one month need not be the same as the
date-time plus two months: (August 31 plus 2 months in October
31. August 31 plus one month is September 30, which plus one month is
October 30. Similarly, February 29, 1984 plus four years is February
29, 1988, while February 29, 1984 plus two years in February 28, 1986,
which plus two years is February 28, 1988.
</p>
<h4 id="95">
Duration instances
</h4>
<p id="96">
A duration instance can be created directly without using the <a href="operators/date-time/time-interval.htm"><b>time-interval</b></a> parser by
using the Lisp <a href="operators/date-time/duration.htm"><b>duration</b></a> function.
</p>
<pre id="97">
 &gt; (add-duration (date-time &quot;1985-04-10T10:30:40&quot;) (duration &quot;1MT1H4S&quot;))
 #&lt;date-time &quot;1985-05-10T11:30:44&quot; @ ...&gt;
</pre>

<hr><hr><h2 id="98"><a name="dt-classes-1">6.0 date-time classes</a></h2>

<hr><h2 id="99"><a name="date-time-2">6.1 The date-time class</a></h2>

<p id="100">
Instances of the <a href="classes/date-time/date-time.htm"><code>date-time</code></a> encode a specific date and
time. The class is complicated because it includes several slots used
to hold different formats of the specific date-time instance.  Slots
named with the <b>ymd-</b> prefix are those used for Calendar
(year-month-date) dates.  Slots named with the <b>yd-</b> prefix are
those used for Ordinal (year-date) dates.  Slots named with the
<b>ywd-</b> prefix are those used for Week (year-week-date) dates.
Some slots use the <b>ymd-yd-</b> prefix to indicate that they can be
used for either Calendar or Ordinal dates.
</p>
<p id="101">
We describe some of the core slots here:
</p>
<ul>
<li id="102">
<b>ymd-yd-before-year-0</b> -- indicates if the date is before year 0,
reader <a href="operators/date-time/date-time-ymd-yd-before-year-0.htm"><b>date-time-ymd-yd-before-year-0</b></a>.
</li>
<li id="103">
<b>ymd-yd-century</b> -- the date's century, reader <a href="operators/date-time/date-time-ymd-yd-century.htm"><b>date-time-ymd-yd-century</b></a>.
</li>
<li id="104">
<b>ymd-yd-year-in-century</b> -- the date's year in century, reader
<a href="operators/date-time/date-time-ymd-yd-year-in-century.htm"><b>date-time-ymd-yd-year-in-century</b></a>.
</li>
<li id="105">
<b>ymd-month</b> -- the calendar date's month, reader <a href="operators/date-time/date-time-ymd-month.htm"><b>date-time-ymd-month</b></a>.
</li>
<li id="106">
<b>ymd-day</b> -- the calendar date's date, reader <a href="operators/date-time/date-time-ymd-day.htm"><b>date-time-ymd-day</b></a>.
</li>
<li id="107">
<b>yd-day</b> -- the ordinal date's date, reader <a href="operators/date-time/date-time-yd-day.htm"><b>date-time-yd-day</b></a>.
</li>
<li id="108">
<b>ywd-before-year-0</b> -- indicates if the the week date is before
year 0, reader <a href="operators/date-time/date-time-ywd-before-year-0.htm"><b>date-time-ywd-before-year-0</b></a>.
</li>
<li id="109">
<b>ywd-century</b> -- the week date's century, reader <a href="operators/date-time/date-time-ywd-century.htm"><b>date-time-ywd-century</b></a>.
</li>
<li id="110">
<b>ywd-decade-in-century</b> -- the week date's decade in century,
reader <a href="operators/date-time/date-time-ywd-decade-in-century.htm"><b>date-time-ywd-decade-in-century</b></a>.
</li>
<li id="111">
<b>ywd-year-in-decade</b> -- the week date's year in decade, reader
<a href="operators/date-time/date-time-ywd-year-in-decade.htm"><b>date-time-ywd-year-in-decade</b></a>.
</li>
<li id="112">
<b>ywd-week</b> -- the week date's week, reader
<a href="operators/date-time/date-time-ywd-week.htm"><b>date-time-ywd-week</b></a>.
</li>
<li id="113">
<b>ywd-day</b> -- the week date's day, reader
<a href="operators/date-time/date-time-ywd-day.htm"><b>date-time-ywd-day</b></a>.
</li>
<li id="114">
<b>zone-hour</b> -- the time-zone's hour, reader
<a href="operators/date-time/date-time-zone-hour.htm"><b>date-time-zone-hour</b></a>.
</li>
<li id="115">
<b>zone-minute</b> -- the time-zone's minute, reader <a href="operators/date-time/date-time-zone-minute.htm"><b>date-time-zone-minute</b></a>.
</li>
<li id="116">
<b>hour</b> -- the hour, reader <a href="operators/date-time/date-time-hour.htm"><b>date-time-hour</b></a>.
</li>
<li id="117">
<b>hourf</b> -- the minutes, seconds, and fractional seconds of the
time expressed as an hour fraction, reader <a href="operators/date-time/date-time-hourf.htm"><b>date-time-hourf</b></a>.
</li>
<li id="118">
<b>minute</b> -- the minute of the time, reader <a href="operators/date-time/date-time-minute.htm"><b>date-time-minute</b></a>.
</li>
<li id="119">
<b>minutef</b> -- the seconds and fractional seconds of the time
expressed as a minute fraction, reader <a href="operators/date-time/date-time-minutef.htm"><b>date-time-minutef</b></a>.
</li>
<li id="120">
<b>second</b> -- the second of the time, reader <a href="operators/date-time/date-time-second.htm"><b>date-time-second</b></a>.
</li>
<li id="121">
<b>secondf</b> -- the fractional seconds of the time, reader <a href="operators/date-time/date-time-secondf.htm"><b>date-time-secondf</b></a>.
</li>
</ul>

<p id="122">
<a href="classes/date-time/date-time.htm"><code>date-time</code></a>
instances are to be created by the <a href="operators/date-time/date-time.htm"><b>date-time</b></a> and <a href="operators/date-time/merge-date-times.htm"><b>merge-date-times</b></a> functions. They can
be updated by the <a href="operators/date-time/merge-date-times.htm"><b>merge-date-times</b></a> and <a href="operators/date-time/complete-date-time.htm"><b>complete-date-time</b></a>
functions.  Otherwise, <a href="classes/date-time/date-time.htm"><code>date-time</code></a> instances are immutable.
</p>



<hr><h2 id="123"><a name="duration-2">6.2 The duration class</a></h2>

<p id="124">
Instances of the <a href="classes/date-time/duration.htm"><code>duration</code></a> class encode an unanchored
period of time. (An unanchored time period has no specified start or
end. The class <a href="classes/date-time/time-interval.htm"><code>time-interval</code></a> has a duration and a
start and end.)
</p>
<p id="125">
The slots in the <a href="classes/date-time/duration.htm"><code>duration</code></a> class are as follows. The
slot value can be accessed by the indicated reader generic
function. (The slots have no defined writers and should not be
modified.)
</p>
<ul>
<li id="126">
<b>years</b> -- the reader is <a href="operators/date-time/duration-years.htm"><b>duration-years</b></a>
</li>
<li id="127">
<b>months</b> -- the reader is <a href="operators/date-time/duration-months.htm"><b>duration-months</b></a>
</li>
<li id="128">
<b>weeks</b> -- the reader is <a href="operators/date-time/duration-weeks.htm"><b>duration-weeks</b></a>
</li>
<li id="129">
<b>days</b> -- the reader is <a href="operators/date-time/duration-days.htm"><b>duration-days</b></a>
</li>
<li id="130">
<b>hours</b> -- the reader is <a href="operators/date-time/duration-hours.htm"><b>duration-hours</b></a>
</li>
<li id="131">
<b>minutes</b> -- the reader is <a href="operators/date-time/duration-minutes.htm"><b>duration-minutes</b></a>
</li>
<li id="132">
<b>seconds</b> -- the reader is <a href="operators/date-time/duration-seconds.htm"><b>duration-seconds</b></a>
</li>
</ul>



<hr><h2 id="133"><a name="time-interval-2">6.3 The time-interval class</a></h2>

<p id="134">
Instances of the <a href="classes/date-time/time-interval.htm"><code>time-interval</code></a> class encode a
specific period of time with a duration, a start, and an end, and
recurrences. (Any or all slots may be unspecified.)
</p>
<p id="135">
The slots in the <a href="classes/date-time/time-interval.htm"><code>time-interval</code></a> class are as
follows. The slot value can be accessed by the indicated reader
generic function. (The slots have no defined writers and should not be
modified.)
</p>
<ul>
<li id="136">
<b>start</b> -- the value should be a <a href="classes/date-time/date-time.htm"><code>date-time</code></a> object. The reader is
<a href="operators/date-time/time-interval-start.htm"><b>time-interval-start</b></a>.
</li>
<li id="137">
end -- the value should be a <a href="classes/date-time/date-time.htm"><code>date-time</code></a> object or <code>nil</code>. The reader is <a href="operators/date-time/time-interval-end.htm"><b>time-interval-end</b></a>.
</li>
<li id="138">
<b>duration</b> -- the value should be a <a href="classes/date-time/duration.htm"><code>duration</code></a> object or <code>nil</code>. The reader is <a href="operators/date-time/time-interval-duration.htm"><b>time-interval-duration</b></a>.
</li>
<li id="139">
<b>recurrences</b> -- the value should be an integer or <code>nil</code>. The reader is <a href="operators/date-time/time-interval-recurrences.htm"><b>time-interval-recurrences</b></a>.
</li>
</ul>



<hr><hr><h2 id="140"><a name="dt-ops-1">7.0 date-time operators</a></h2>

<p id="141">
The following operators are supported in the datetime module. Each is
described on its own documentation page.
</p>

<ul>
<li id="142">
<a href="operators/date-time/add-duration.htm"><b>add-duration</b></a>
(Function)
</li>
<li id="143">
<a href="operators/date-time/complete-date-time.htm"><b>complete-date-time</b></a>
(Function)
</li>
<li id="144">
<a href="operators/date-time/date-time.htm"><b>date-time</b></a> (Generic
Function)
</li>
<li id="145">
<a href="operators/date-time/date-time-hour.htm"><b>date-time-hour</b></a>
(Generic Function)
</li>
<li id="146">
<a href="operators/date-time/date-time-secondf.htm"><b>date-time-secondf</b></a>
(Generic Function)
</li>
<li id="147">
<a href="operators/date-time/date-time-to-ut.htm"><b>date-time-to-ut</b></a>
(Function)
</li>
<li id="148">
<a href="operators/date-time/date-time-yd-day.htm"><b>date-time-yd-day</b></a>
(Generic Function)
</li>
<li id="149">
<a href="operators/date-time/date-time-ymd-day.htm"><b>date-time-ymd-day</b></a>
(Generic Function)
</li>
<li id="150">
<a href="operators/date-time/date-time-ymd-month.htm"><b>date-time-ymd-month</b></a> (Generic
Function)
</li>
<li id="151">
<a href="operators/date-time/date-time-ymd-yd-before-year-0.htm"><b>date-time-ymd-yd-before-year-0</b></a>
(Generic Function)
</li>
<li id="152">
<a href="operators/date-time/date-time-ymd-yd-century.htm"><b>date-time-ymd-yd-century</b></a> (Generic
Function)
</li>
<li id="153">
<a href="operators/date-time/date-time-ymd-yd-year-in-century.htm"><b>date-time-ymd-yd-year-in-century</b></a>
(Generic Function)
</li>
<li id="154">
<a href="operators/date-time/date-time-ywd-before-year-0.htm"><b>date-time-ywd-before-year-0</b></a> (Generic
Function)
</li>
<li id="155">
<a href="operators/date-time/date-time-ywd-century.htm"><b>date-time-ywd-century</b></a> (Generic
Function)
</li>
<li id="156">
<a href="operators/date-time/date-time-ywd-day.htm"><b>date-time-ywd-day</b></a>
(Generic Function)
</li>
<li id="157">
<a href="operators/date-time/date-time-ywd-decade-in-century.htm"><b>date-time-ywd-decade-in-century</b></a>
(Generic Function)
</li>
<li id="158">
<a href="operators/date-time/date-time-ywd-week.htm"><b>date-time-ywd-week</b></a>
(Generic Function)
</li>
<li id="159">
<a href="operators/date-time/date-time-ywd-year-in-decade.htm"><b>date-time-ywd-year-in-decade</b></a>
(Generic Function)
</li>
<li id="160">
<a href="operators/date-time/date-time-hourf.htm"><b>date-time-hourf</b></a>
(Generic Function)
</li>
<li id="161">
<a href="operators/date-time/date-time-minute.htm"><b>date-time-minute</b></a>
(Generic Function)
</li>
<li id="162">
<a href="operators/date-time/date-time-minutef.htm"><b>date-time-minutef</b></a>
(Generic Function)
</li>
<li id="163">
<a href="operators/date-time/date-time-second.htm"><b>date-time-second</b></a>
(Generic Function)
</li>
<li id="164">
<a href="operators/date-time/date-time-year.htm"><b>date-time-year</b></a>
(Generic Function)
</li>
<li id="165">
<a href="operators/date-time/date-time-zone.htm"><b>date-time-zone</b></a>
(Generic Function)
</li>
<li id="166">
<a href="operators/date-time/date-time-zone-hour.htm"><b>date-time-zone-hour</b></a> (Generic
Function)
</li>
<li id="167">
<a href="operators/date-time/date-time-zone-minute.htm"><b>date-time-zone-minute</b></a> (Generic
Function)
</li>
<li id="168">
<a href="operators/date-time/decode-date-time.htm"><b>decode-date-time</b></a>
(Function)
</li>
<li id="169">
<a href="operators/date-time/duration.htm"><b>duration</b></a> (Generic
Function)
</li>
<li id="170">
<a href="operators/date-time/duration-days.htm"><b>duration-days</b></a>
(Generic Function)
</li>
<li id="171">
<a href="operators/date-time/duration-hours.htm"><b>duration-hours</b></a>
(Generic Function)
</li>
<li id="172">
<a href="operators/date-time/duration-minutes.htm"><b>duration-minutes</b></a>
(Generic Function)
</li>
<li id="173">
<a href="operators/date-time/duration-months.htm"><b>duration-months</b></a>
(Generic Function)
</li>
<li id="174">
<a href="operators/date-time/duration-seconds.htm"><b>duration-seconds</b></a>
(Generic Function)
</li>
<li id="175">
<a href="operators/date-time/duration-weeks.htm"><b>duration-weeks</b></a>
(Generic Function)
</li>
<li id="176">
<a href="operators/date-time/duration-years.htm"><b>duration-years</b></a>
(Generic Function)
</li>
<li id="177">
<a href="operators/date-time/merge-date-times.htm"><b>merge-date-times</b></a>
(Function)
</li>
<li id="178">
<a href="operators/date-time/parse-iso8601.htm"><b>parse-iso8601</b></a>
(Function)
</li>
<li id="179">
<a href="operators/date-time/subtract-duration.htm"><b>subtract-duration</b></a>
(Function)
</li>
<li id="180">
<a href="operators/date-time/time-interval.htm"><b>time-interval</b></a>
(Generic Function)
</li>
<li id="181">
<a href="operators/date-time/time-interval-duration.htm"><b>time-interval-duration</b></a> (Generic
Function)
</li>
<li id="182">
<a href="operators/date-time/time-interval-end.htm"><b>time-interval-end</b></a>
(Generic Function)
</li>
<li id="183">
<a href="operators/date-time/time-interval-recurrences.htm"><b>time-interval-recurrences</b></a> (Generic
Function)
</li>
<li id="184">
<a href="operators/date-time/time-interval-start.htm"><b>time-interval-start</b></a> (Generic
Function)
</li>
<li id="185">
<a href="operators/date-time/ut-to-date-time.htm"><b>ut-to-date-time</b></a>
(Function)
</li>
</ul>

<hr><hr><h2 id="186"><a name="dt-vars-1">8.0 date-time variables</a></h2>

<p id="187">
The following variables are defined in the datetime module:
</p>
<ul>
<li id="188">
<a href="variables/date-time/s_date-time-fmt_s.htm"><code>*date-time-fmt*</code></a>
</li>
</ul>


<hr><hr><h2 id="189"><a name="ut-parser-1">9.0 General date to universal time parsers</a></h2>



<p id="190">
There are three functions which parse strings representing dates and
times, returning universal times; take universal times and return
strings in various time formats; and convert strings with special
commands into formatter-like functions.
</p>
<p id="191">
These functions are not part of the date-time module described above
in this document (they are instead part of
the <code>:anydate</code> module, which is autoloaded when any
of the exported functions in the module is called). They are useful
utility functions which can be used in conjunction with the date-time
functionality.
</p>
<p id="192">
The functions are:
</p>
<ul>
<li id="193">
<a href="operators/excl/string-to-universal-time.htm"><b>string-to-universal-time</b></a>:
this function converts a string specifying a date and time, in a
variety of formats (including ISO 8601) to a universal time (an
integer). This function differs from <a href="operators/date-time/date-time-to-ut.htm"><b>date-time-to-ut</b></a> in returning
different additional values after the universal time and in accepting a
number of date/time formats represented as a string rather than a
date-time object as the required argument. (<a href="operators/excl/string-to-universal-time.htm"><b>string-to-universal-time</b></a> will also return a
date-time object rather than a universal time with the right
combination of arguments.)
</li>
<li id="194">
<a href="operators/excl/universal-time-to-string.htm"><b>universal-time-to-string</b></a>:
this function converts a universal time to a string in a variety of
supported formats, including ISO 8601. It differs
from <a href="operators/date-time/ut-to-date-time.htm"><b>ut-to-date-time</b></a> in that it returns a
a string rather than returning a date-time object
(returns a string with the correct arguments -- it will also,
depending on the arguments, write the string to a stream).
</li>
<li id="195">
<a href="operators/excl/ut-to-string-formatter.htm"><b>ut-to-string-formatter</b></a>: this
function takes a string containing format-like directives for
specifying dates and times and returns a function suitable as a value
for the <i>format</i> keyword argument
to <a href="operators/excl/universal-time-to-string.htm"><b>universal-time-to-string</b></a>
when the relative keyword argument to that function is also true.
</li>
</ul>
<p id="196">
See the individual function descriptions for more information. Here
are some example of how the functions work:
</p>

<pre id="197">

(string-to-universal-time &quot;Thu, 01 Jan 04 19:48:21 GMT&quot; :format :rfc2822)
  =&gt; 3281975301 :rfc2822 0
(universal-time-to-string 3281975301 :format :rfc2822)
  =&gt; &quot;Thu, 01 Jan 2004 11:48:21 -0800&quot;
(string-to-universal-time &quot;Thu, 01 Jan 04 19:48:21 GMT&quot;)
  =&gt; 3281975301 :rfc2822 0
(universal-time-to-string 3281975301)
  =&gt; &quot;2004-01-01T11:48:21&quot;

(string-to-universal-time &quot;Thu, 01 Jan 2004 19:48:21 GMT&quot; :format :rfc2822)
  =&gt; 3281975301 :rfc2822 0
(universal-time-to-string 3281975301 :format :rfc2822)
  =&gt; &quot;Thu, 01 Jan 2004 11:48:21 -0800&quot;
(string-to-universal-time &quot;Thu, 01 Jan 2004 19:48:21 GMT&quot;)
  =&gt; 3281975301 :rfc2822 0
(universal-time-to-string 3281975301)
  =&gt; &quot;2004-01-01T11:48:21&quot;

(string-to-universal-time &quot;2003-12-31T10:14:55-08:00&quot; :format :w3cdtf)
  =&gt; 3281883295 :w3cdtf 28800
(universal-time-to-string 3281883295 :format :w3cdtf)
  =&gt; &quot;2003-12-31T10:14:55&quot;
(string-to-universal-time &quot;2003-12-31T10:14:55-08:00&quot;)
  =&gt; 3281883295 :w3cdtf 28800
(universal-time-to-string 3281883295)
  =&gt; &quot;2003-12-31T10:14:55&quot;

(string-to-universal-time &quot;2003-12-31T10:14:55Z&quot; :format :w3cdtf)
  =&gt; 3281854495 :w3cdtf 0
(universal-time-to-string 3281854495 :format :w3cdtf)
  =&gt; &quot;2003-12-31T02:14:55&quot;
(string-to-universal-time &quot;2003-12-31T10:14:55Z&quot;)
  =&gt; 3281854495 :w3cdtf 0
(universal-time-to-string 3281854495)
  =&gt; &quot;2003-12-31T02:14:55&quot;

(string-to-universal-time &quot;2003&quot; :format :w3cdtf)
  =&gt; 3250396800 :w3cdtf :time-zone-not-specified
(universal-time-to-string 3250396800 :format :w3cdtf)
  =&gt; &quot;2003-01-01T00:00:00&quot;
(string-to-universal-time &quot;2003&quot;)
  =&gt; 3250396800 :w3cdtf :time-zone-not-specified
(universal-time-to-string 3250396800)
  =&gt; &quot;2003-01-01T00:00:00&quot;

(string-to-universal-time &quot;2003-12&quot; :format :w3cdtf)
  =&gt; 3279254400 :w3cdtf :time-zone-not-specified
(universal-time-to-string 3279254400 :format :w3cdtf)
  =&gt; &quot;2003-12-01T00:00:00&quot;
(string-to-universal-time &quot;2003-12&quot;)
  =&gt; 3279254400 :w3cdtf :time-zone-not-specified
(universal-time-to-string 3279254400)
  =&gt; &quot;2003-12-01T00:00:00&quot;

(string-to-universal-time &quot;2003-12-31&quot; :format :w3cdtf)
  =&gt; 3281846400 :w3cdtf :time-zone-not-specified
(universal-time-to-string 3281846400 :format :w3cdtf)
  =&gt; &quot;2003-12-31T00:00:00&quot;
(string-to-universal-time &quot;2003-12-31&quot;)
  =&gt; 3281846400 :w3cdtf :time-zone-not-specified
(universal-time-to-string 3281846400)
  =&gt; &quot;2003-12-31T00:00:00&quot;

(string-to-universal-time &quot;20031231&quot; :format :iso8601)
  =&gt; 3281846400 :iso8601 :time-zone-not-specified
(universal-time-to-string 3281846400 :format :iso8601)
  =&gt; &quot;2003-12-31T00:00:00&quot;
(string-to-universal-time &quot;20031231&quot;)
  =&gt; 3281846400 :iso8601 :time-zone-not-specified
(universal-time-to-string 3281846400)
  =&gt; &quot;2003-12-31T00:00:00&quot;
(string-to-universal-time &quot;20031231&quot; :format :iso8601 :native t)
  =&gt; #&lt;util.date-time:date-time &quot;2003-12-31&quot; @ #x1000117b1f2&gt; nil nil

(string-to-universal-time &quot;Sun Jan  4 16:29:06 2004&quot; :format :asctime)
  =&gt; 3282251346 :asctime :time-zone-not-specified
(universal-time-to-string 3282251346 :format :asctime)
  =&gt; &quot;Sun Jan  4 16:29:06 2004&quot;
(string-to-universal-time &quot;Sun Jan  4 16:29:06 2004&quot;)
  =&gt; 3282251346 :asctime :time-zone-not-specified
(universal-time-to-string 3282251346)
  =&gt; &quot;2004-01-04T16:29:06&quot;

(string-to-universal-time &quot;2004-07-08 23:56:58&quot; :format :mssql)
  =&gt; 3298345018 :mssql :time-zone-not-specified
(universal-time-to-string 3298345018 :format :mssql)
  =&gt; &quot;2004-07-08 23:56:58&quot;
(string-to-universal-time &quot;2004-07-08 23:56:58&quot;)
  =&gt; 3298345018 :iso8601 :time-zone-not-specified
(universal-time-to-string 3298345018)
  =&gt; &quot;2004-07-08T23:56:58&quot;

(string-to-universal-time &quot;2004-07-08 23:56:58.1&quot; :format :mssql)
  =&gt; 32983450181/10 :mssql :time-zone-not-specified
(universal-time-to-string 32983450181/10 :format :mssql)
  =&gt; &quot;2004-07-08 23:56:58.1&quot;
(string-to-universal-time &quot;2004-07-08 23:56:58.1&quot;)
  =&gt; 32983450181/10 :iso8601 :time-zone-not-specified
(universal-time-to-string 32983450181/10)
  =&gt; &quot;2004-07-08T23:56:58.1&quot;

(excl::universal-time-to-string (get-universal-time) :format &quot;%H:%M:%S&quot;)
  =&gt; &quot;11:01:44&quot;


(setq ut 3603660634)
(universal-time-to-string ut :relative (+ ut 1 (* 10 3600)))
  =&gt; &quot;10:00:01&quot;

(setq f (compile nil (ut-to-string-formatter &quot;%Dd%2Hh%2Mm%2Ss&quot;)))
(universal-time-to-string ut :relative (+ ut (* 40 3666)) :format f)
  =&gt; &quot;1d16h44m00&quot;

(setq f (compile nil (ut-to-string-formatter
      		      &quot;%D day%p, %H hour%p, %M minute%p and %S second%p&quot;)))
(universal-time-to-string 3603660634
			  :relative (+ 3603660634 (* 41 3666))
			  :format f)
  =&gt; &quot;1 day, 17 hours, 45 minutes and 6 seconds&quot;
</pre>


<hr><hr><h2 id="198"><a name="copyleft-1">10.0 Copyright notice</a></h2>



<p id="199">
Material in this document is adapted from the Wikipedia article on ISO
8601 from July, 2006
(<a href="http://en.wikipedia.org/wiki/ISO_8601">http://en.wikipedia.org/wiki/ISO_8601</a>. Wikipedia
material is governed by the GNU Documentation Copyleft
(see <a href="http://www.gnu.org/copyleft/fdl.html">GNU Free
Documentation License</a>). Therefore, notwithstanding any other
notices in the document, this essay is governed by that same
agreement. (But documents linked to from this document are not
governed by that agreement unless they explicitly say so.) The text of
this document is available in HTML using the usual <b>View Source</b>
command. This essay is adapted from the Wikipedia article. It is not a
copy and any errors or omissions are the responsibility of Franz
Inc. Anyone who uses material in this essay under the Copyleft, please
(1) link to this article using the link
<b>http://franz.com/support/documentation/current/doc/date-time.htm</b>
and (2) say explicitly that you have modified it (if you have).
</p>

</body><hr><p id="2"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/date-time.htm">10.0 version</a></td></tr></table></html>