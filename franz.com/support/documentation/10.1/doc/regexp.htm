<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="acldoc-styles.css" type="text/css"><title>Regular Expression API</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/regexp.htm">10.0 version</a></td></tr></table><h1 id="2">Regular Expression API</h1><p id="3">This document contains the following sections:</p><a href="#regexp-intro-1">1.0 Regular Expression handling in Allegro CL</a><br><a href="#regexp-new-1">2.0 The regexp2 module</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-new-matching-2">2.1 Matching mode in the regexp2 module</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-new-summary-2">2.2 Regular expression syntax summary</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-new-capturing-2">2.3 Capturing and back reference</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-tree-2">2.4 Regexp trees</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-new-api-2">2.5 User-level API in the regexp2 module</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-new-compatibility-2">2.6 Compatibility issues in the regexp2 module</a><br>&nbsp;&nbsp;&nbsp;<a href="#regexp-new-performace-2">2.7 Performance notes in the regexp2 module</a><br><hr><hr><h2 id="4"><a name="regexp-intro-1">1.0 Regular Expression handling in Allegro CL</a></h2>


<p id="5">
In the <b>regexp2</b> module, the functions are named by symbols in the
<code>excl</code> package, and are named <a href="operators/excl/compile-re.htm"><b>compile-re</b></a>, <a href="operators/excl/match-re.htm"><b>match-re</b></a>,
<a href="operators/excl/split-re.htm"><b>split-re</b></a>,
and <a href="operators/excl/replace-re.htm"><b>replace-re</b></a>. (There is
also an older <b>regexp</b> module which is maintained for backward
compatibility but no longer discussed in this document.)
</p>


<hr><hr><h2 id="6"><a name="regexp-new-1">2.0 The regexp2 module</a></h2>

<p id="7">
The <b>regexp2</b> module provides a fast, mostly-Perl-compatible
regular expression matcher. It handles Unicode character set
(UCS-2). Symbols in the regexp2
module are in the excl package. 
</p>

<p id="8">
You load the regexp2 module with the form
</p>
<pre id="9">
(require :regexp2)
</pre>

<hr><h2 id="10"><a name="regexp-new-matching-2">2.1 Matching mode in the regexp2 module</a></h2>

<p id="11">
Like Perl, there are four types of 'mode switches' that affect the 
meaning of regular expressions. The switch can be specified by the
keyword arguments passed to regexp APIs, or by embedding 'flags' in
the regular expression itself.   The following table lists the valid
mode switches.
</p>
<table BORDER="1" CELLSPACING="1" CELLPADDING="2" WIDTH="90%">
<tr>
<td WIDTH="15%" VALIGN="TOP"><strong>Flag</strong></td>
<td WIDTH="25%" VALIGN="TOP"><strong>Keyword argument</strong></td>
<td WIDTH="60%" VALIGN="TOP"><strong>Descrption (when 'on')</strong></td>
</tr>
<tr>
<td WIDTH="15%" VALIGN="TOP">
<b>i</b>
</td>
<td WIDTH="25%" VALIGN="TOP">
<code>:case-fold</code>
</td>
<td WIDTH="40%" VALIGN="TOP">
Case-insensitive match (when true). Currently, case folding is only
effective for ASCII characters.
</td>
</tr>
<tr>
<td WIDTH="15%" VALIGN="TOP">
<b>m</b>
</td>
<td WIDTH="25%" VALIGN="TOP">
<code>:multiple-lines</code>
</td>
<td WIDTH="40%" VALIGN="TOP">
Treats the input string as multiple lines. If turned on, "^" and "$"
matches the start and end of any line instead of the beginning and end
of the whole string.
</td>
</tr>
<tr>
<td WIDTH="15%" VALIGN="TOP">
<b>s</b>
</td>
<td WIDTH="25%" VALIGN="TOP">
<code>:single-line</code>
</td>
<td WIDTH="40%" VALIGN="TOP">
Treats the input string as a single line. If turned on, "." matches
any character, even a newline.  Normally "." matches any character
<b><i>except</i></b> a newline.
</td>
</tr>
<tr>
<td WIDTH="15%" VALIGN="TOP">
<b>x</b>
</td> 
<td WIDTH="25%" VALIGN="TOP">
<code>:ignore-whitespace</code>
</td>
<td WIDTH="40%" VALIGN="TOP">
Extend syntax.  Whitespace in the regular expression is ignored, and
comments can be inserted, to increase legibility of the regular
expression.
</td>
</tr>
</table>

<p id="12">
Within a regular expression, a mode switch can be turned on/off
locally by <code>(?:...)</code> construct.  For example,
<code>(?i:foo)</code> makes <code>foo</code> match case
insensitively.  <code>(?-i:foo)</code> makes
<code>foo</code> match case sensitively.  You can combine
multiple flags, like <code>(?im-sx:foo)</code>.  A construct
like <code>(?i)</code> changes the mode switch until the end of
the current grouping.
</p>



<hr><h2 id="13"><a name="regexp-new-summary-2">2.2 Regular expression syntax summary</a></h2>

<h3 id="14">
You must double backslashes in strings
</h3>

<p id="15">
The backslash character is treated by the Lisp reader as an escape
character, telling the reader to treat the next character as a literal
rather than some sort of a control charcater. Thus, suppose you want
to make a string of
</p>

<pre id="16">
ab"cd
</pre>

<p id="17">
You want the double quote character to be part of the string, but the
reader will misunderstand
</p>

<pre id="18">
"ab"cd"
</pre>

<p id="19">
so you specify it as
</p>

<pre id="20">
"ab\"cd"
</pre>

<p id="21">
When those 8 characters are read, a 5 character string will be stored,
with no backslash and the double quote as the third character:
</p>

<pre id="22">
cl-user(4): (setq str "ab\"cd")
"ab\"cd"
cl-user(5): (length str)
5
cl-user(6): (char str 2)
#\"  ;; note " not \
cl-user(7): 
</pre>

<p id="23">
Backslashes are used extensively in regular expressions. In order to
specify a backslash in a string, you enter two backslashes (the first
is read as an escape and the second as the character (a backslash)
which you want to include. So
</p>

<pre id="24">
cl-user(7): "\|"
"|"
cl-user(8): "\\|"
"\\|"
cl-user(9): (length *)
2
cl-user(10): (split-re "\\|" "this|is|a|string")
("this" "is" "a" "string")
cl-user(11): 


;; "\|" matches the empty string so the result is the letters as strings:

cl-user(11): (split-re "\|" "this|is|a|string")
("t" "h" "i" "s" "|" "i" "s" "|" "a" "|" "s" "t" "r" "i" "n" "g")


;; More examples with tabs (\t):

cl-user(12): (split-re "\\t" "this	is	a	string	with	tabs")
("this" "is" "a" "string" "with" "tabs")
cl-user(13): (split-re "\\x09" "this	is	a	string	with	tabs")
("this" "is" "a" "string" "with" "tabs")
cl-user(14): 


</pre>

<h3 id="25">
Characters
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
x
</td>
<td width="74%">
The character x
</td>
</tr>
<tr>
<td width="26%">
\\
</td>
<td width="74%">
A backslash character
</td>
</tr>
<tr>
<td width="26%">
\0
</td>
<td width="74%">
#\null
</td>
</tr>
<tr>
<td width="26%">
\0n
</td>
<td width="74%">
(&lt;= 0 n 7)  A character x where (= (char-code x) #on)
</td>
</tr>
<tr>
<td width="26%">
\0nn
</td>
<td width="74%">
(&lt;= 0 n 7)  A character x where (= (char-code x) #onn)
</td>
</tr>
<tr>
<td width="26%">
\nn
</td>
<td width="74%">
(&lt;= 0 n 7) A character x where (= (char-code x) #onn), if this
cannot be a back-reference
</td>
</tr>
<tr>
<td width="26%">
\mnn
</td>
<td width="74%">
(&lt;= 0 m 3) (&lt;= 0 n 7) A character x where (= (char-code x) #omnn)
</td>
</tr>
<tr>
<td width="26%">
\xhh
</td>
<td width="74%">
A character x where (= (char-code x) #xhh)
</td>
</tr>
<tr>
<td width="26%">
\xh
</td>
<td width="74%">
A character x where (= (char-code x) #xh) if at the end of regexp or
followed by non-hexdigit char.
</td>
</tr>
<tr>
<td width="26%">
\x{h...}
</td>
<td width="74%">
A character x where (= (char-code x) #xh...).
</td>
</tr>
<tr>
<td width="26%">
\a
</td>
<td width="74%">
#\bell
</td>
</tr>
<tr>
<td width="26%">
\e
</td>
<td width="74%">
#\esc
</td>
</tr>
<tr>
<td width="26%">
\f
</td>
<td width="74%">
#\form
</td>
</tr>
<tr>
<td width="26%">
\t
</td>
<td width="74%">
#\tab
</td>
</tr>
<tr>
<td width="26%">
\n
</td>
<td width="74%">
#\linefeed
</td>
</tr>
<tr>
<td width="26%">
\r
</td>
<td width="74%">
#\return
</td>
</tr>
<tr>
<td width="26%">
\cx
</td>
<td width="74%">
control character corresponding to x (e.g. \cG for #\bell).
</td>
</tr>
</table>

<h3 id="26">
Predefined character classes
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
.
</td>
<td width="74%">
any character except newline (if 's' flag is on, matches any character
including newline).
</td>
</tr>
<tr>
<td width="26%">
\d
</td>
<td width="74%">
A digit character [0-9]
</td>
</tr>
<tr>
<td width="26%">
\D
</td>
<td width="74%">
A non-digit character [^0-9]
</td>
</tr>
<tr>
<td width="26%">
\s
</td>
<td width="74%">
A whitespace character [&nbsp;\n\r\t\f] (that is, #\space, #\newline,
#\return, #\tab, and #\formfeed).
</td>
</tr>
<tr>
<td width="26%">
\S
</td>
<td width="74%">
A non-whitespace character [^&nbsp;\n\r\t\f] 
</td>
</tr>
<tr>
<td width="26%">
\w
</td>
<td width="74%">
A word-constituent character. Currently, alphanumeric characters, #\_,
and any character whose code is larger than 128 is considered as a
word constituent character.  The treatment of large character set may
be improved in the later versions.
</td>
</tr>
<tr>
<td width="26%">
\W
</td>
<td width="74%">
A non-word-constituent character
</td>
</tr>
</table>

<h3 id="27">
Character classes
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
[abc]
</td>
<td width="74%">
a, b, or c
</td>
</tr>
<tr>
<td width="26%">
[^abc]
</td>
<td width="74%">
any character except a, b, or c
</td>
</tr>
<tr>
<td width="26%">
[a-zA-Z]
</td>
<td width="74%">
character range (a through z or A through Z)
</td>
</tr>
<tr>
<td width="26%">
\n, \nn, \mnn, \x, \xh, \xhh, \x{h..} \\, \a, \e, \f, \t, \n, \r, \cx
</td>
<td width="74%">
Octal and hexadecimal character notation, and the above single
character escape, are valid in character class as well.
</td>
</tr>
<tr>
<td width="26%">
other
</td>
<td width="74%">
\d, \D, \s, \S, \w, and \W can also be used within character class
notation, e.g.  [abc\d] == [abc0-9].
</td>
</tr>
</table>

<h3 id="28">
Assertions
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
 ^
</td>
<td width="74%">
Beginning of a string.  (if 'm' flag is on, matches at the beginning
of a string or just after a linefeed).
</td>
</tr>
<tr>
<td width="26%">
$
</td>
<td width="74%">
End of a string.  (if 'm' flag is on, matches at the end of a string
or just before a linefeed).
</td>
</tr>
<tr>
<td width="26%">
\b
</td>
<td width="74%">
A word boundary.
</td>
</tr>
<tr>
<td width="26%">
\B
</td>
<td width="74%">
A non word boundary.
</td>
</tr>
<tr>
<td width="26%">
\A
</td>
<td width="74%">
Beginning of a string.
</td>
</tr>
<tr>
<td width="26%">
\Z
</td>
<td width="74%">
End of a string, or before linefeed at the end.
</td>
</tr>
<tr>
<td width="26%">
\z
</td>
<td width="74%">
End of a string.
</td>
</tr>
</table>

<h3 id="29">
Greedy repetition
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
X?
</td>
<td width="74%">
Zero or one occurrence of X
</td>
</tr>
<tr>
<td width="26%">
X*
</td>
<td width="74%">
Zero or more occurrence of X
</td>
</tr>
<tr>
<td width="26%">
X+
</td>
<td width="74%">
One or more occurrence of X
</td>
</tr>
<tr>
<td width="26%">
X{n}
</td>
<td width="74%">
n times of X
</td>
</tr>
<tr>
<td width="26%">
X{n,}
</td>
<td width="74%">
n times or more repetition of X
</td>
</tr>
<tr>
<td width="26%">
X{n,m}
</td>
<td width="74%">
between n and m times of repetition of X
</td>
</tr>
</table>

<h3 id="30">
Non-greedy repetition
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
X??
</td>
<td width="74%">
Zero or one occurrence of X
</td>
</tr>
<tr>
<td width="26%">
X*?
</td>
<td width="74%">
Zero or more occurrences of X
</td>
</tr>
<tr>
<td width="26%">
X+?
</td>
<td width="74%">
One or more occurrences of X
</td>
</tr>
<tr>
<td width="26%">
X{n}?
</td>
<td width="74%">
n times of X
</td>
</tr>
<tr>
<td width="26%">
X{n,}?
</td>
<td width="74%">
n times or more repetition of X
</td>
</tr>
<tr>
<td width="26%">
X{n,m}?
</td>
<td width="74%">
between n and m times of repetition of X
</td>
</tr>
</table>

<h3 id="31">
Logical operators
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
XY
</td>
<td width="74%">
X followed by Y
</td>
</tr>
<tr>
<td width="26%">
X|Y
</td>
<td width="74%">
X or Y
</td>
</tr>
</table>

<h3 id="32">
Grouping and special constructs 
</h3>

<p id="33">
See <a href="#regexp-new-capturing-2">Section 2.3 Capturing and back reference</a> below for
the operation of capturing and reference.
</p>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
(X)
</td>
<td width="74%">
Groups X, and captures submatch.
</td>
</tr>
<tr>
<td width="26%">
(?&lt;name&gt;X)
</td>
<td width="74%">
Groups X, and captures submatch, assigning name as the name of the
submatch.  Name must consist of a sequence of word-constituent
characters.
</td>
</tr>
<tr>
<td width="26%">
(?:X)
</td>
<td width="74%">
Groups X, but does no captures.
</td>
</tr>
<tr>
<td width="26%">
(?imsx-imsx:X)
</td>
<td width="74%">
Groups X, with turning on/off the given flags.
</td>
</tr>
<tr>
<td width="26%">
(?imsx-imsx)
</td>
<td width="74%">
Successfully matches nothing, and changes the given flags within the
current group.
</td>
</tr>
<tr>
<td width="26%">
(?=X)
</td>
<td width="74%">
Zero-width positive look-ahead
</td>
</tr>
<tr>
<td width="26%">
(?!X)
</td>
<td width="74%">
Zero-width negative look-ahead
</td>
</tr>
<tr>
<td width="26%">
(?&lt;=X)
</td>
<td width="74%">
Zero-width positive look-behind
</td>
</tr>
<tr>
<td width="26%">
(?&lt;!X)
</td>
<td width="74%">
Zero-width negative look-behind
</td>
</tr>
<tr>
<td width="26%">
(?&gt;X)
</td>
<td width="74%">
Matches X, and never backtrack. (also known as "standalone" group)
</td>
</tr>
<tr>
<td width="26%">
(?(n)Y)
</td>
<td width="74%">
If submatch N has a value, match Y.
</td>
</tr>
<tr>
<td width="26%">
(?(n)Y|Z)
</td>
<td width="74%">
If submatch X has a value, match Y; otherwise match Z.
</td>
</tr>
<tr>
<td width="26%">
(?(?=X)Y|Z)<br>
(?(?!X)Y|Z)<br>
(?(?&lt;=X)Y|Z)<br>
(?(?&lt;!X)Y|Z)
</td>
<td width="74%">
Try the look-ahead or look-behind assertion of X, and if succeeds,
match Y; otherwise match Z. '|Z' part can be omitted.
</td>
</tr>
</table>

<h3 id="34">
Back reference
</h3>

<table border="1" width="95%">
<tr>
<td width="26%">
<b>Construct</b>
</td>
<td width="74%">
<b>Matches</b>
</td>
</tr>
<tr>
<td width="26%">
\n
</td>
<td width="74%">
Matches the n-th submatch (n&gt;=1).  If n-th submatch doesn't have a
value, it doesn't match anything (match just fails). If n is more than
one digit, it becomes a back reference only if there are that many
capturing groups in the regular expressions; otherwise, it is
interpreted as an octal character notation if possible.
</td>
</tr>
<tr>
<td width="26%">
\k&lt;name&gt;
</td>
<td width="74%">
Matches the submatch with name.  If there are more than one submatches
that has the name, this tries to match the one that has the biggest
number first, and if it fails, the smaller numbered submatches are
tried.
</td>
</tr>
</table>




<hr><h2 id="35"><a name="regexp-new-capturing-2">2.3 Capturing and back reference</a></h2>

<p id="36">
Capturing submatches <code>(X)</code> and
<code>(?&lt;name&gt;X)</code> are numbered in the order of its
opening parenthesis from left to right. Named submatch is counted the
same as unnamed submatch, and can be back-referenced by both name and
number.
</p>
<p id="37">
When the input string matches X, the portion of the input string is saved.
It can be referenced within a regular expression, by the back reference
construct, or can be returned to the user program as a submatch.
</p>
<p id="38">
If the capturing construct matches more than once, it saves the last
match.
</p>



<hr><h2 id="39"><a name="regexp-tree-2">2.4 Regexp trees</a></h2>

<p id="40">
Most functions that accept a regexp string such as <a href="operators/excl/match-re.htm"><b>match-re</b></a> and <a href="operators/excl/compile-re.htm"><b>compile-re</b></a> also accept a regexp tree. A regexp
tree is an s-expression with the syntax described below. The syntax
was defined by CL-PPCRE and is intended to be compatible with it. This
documentation was taken from the CL-PPCRE documentation, available as
<a href="http://www.weitz.de/cl-ppcre/">http://www.weitz.de/cl-ppcre/</a>.
</p>
<p id="41">
Programmers are usually most familiar with regexp string syntax, and
it suffices for many normal regexp applications.  However, string
syntax does not scale very well -- complex regexps are hard to write
and even harder to parse. The frequent need for backslach escapes is
a further complication. In such cases, programmers may find tree
syntax easiler to code in Lisp source code editors with their autmatic
indentation and parentheses matching.
</p>
<p id="42">
Further, in any application that generates regular expressions on the
fly will undoubtedly find it easier to generate s-expr tress than
trying to perform and extra level of encoding into string syntax, only
to force the regexp system immediately to parse the string back.
</p>
<p id="43">
Tree syntax is as follows:
</p>
<ul>
<li id="44">
Every string and character is a parse tree and is treated literally as
a part of the regular expression, i.e. parentheses, brackets,
asterisks and such aren't special.
</li>
<li id="45">
The symbol <code>:void</code> is equivalent to the empty string.
</li>
<li id="46">
The symbol <code>:everything</code> is equivalent to Perl's dot,
i.e it matches everything (except maybe a newline character depending
on the mode).
</li>
<li id="47">
The symbols <code>:word-boundary</code> and
<code>:non-word-boundary</code> are equivalent to Perl's "\b"
and "\B".
</li>
<li id="48">
The symbols <code>:digit-class</code>,
<code>:non-digit-class</code>,
<code>:word-char-class</code>,
<code>:non-word-char-class</code>,
<code>:whitespace-char-class</code>, and
<i>:non-whitespace-char-class</i> are equivalent to
Perl's special character classes "\d", "\D", "\w", "\W", "\s", and
"\S" respectively.
</li>
<li id="49">
The symbols <code>:start-anchor</code>,
<code>:end-anchor</code>,
<code>:modeless-start-anchor</code>,
<code>:modeless-end-anchor</code>, and
<code>:modeless-end-anchor-no-newline</code> are equivalent to
Perl's "^", "$", "\A", "\Z", and "\z" respectively.
</li>
<li id="50">
The symbols <code>:case-insensitive-p</code>,
<code>:case-sensitive-p</code>,
<code>:multi-line-mode-p</code>,
<code>:not-multi-line-mode-p</code>,
<code>:single-line-mode-p</code>, and
<code>:not-single-line-mode-p</code> are equivalent to Perl's
embedded modifiers "(?i)", "(?-i)", "(?m)", "(?-m)", "(?s)", and
"(?-s)". As usual, changes applied to modes are kept local to the
innermost enclosing grouping or clustering construct.
</li>
<li id="51">
<code>(:flags {&lt;modifier&gt;}*)</code> where &lt;modifier&gt;
is one of the modifier symbols from above is used to group modifier
symbols. The modifiers are applied from left to right. (This construct
is obviously redundant. It is only there because it's used by the
parser.)
</li>
<li id="52">
<code>(:sequence {&lt;parse-tree&gt;}*)</code> means a sequence
of parse trees, i.e. the parse trees must match one after
another. Example: <code>(:sequence #\f #\o #\o)</code> is
equivalent to the parse tree "foo".
</li>
<li id="53">
<code>(:group {&lt;parse-tree&gt;}*)</code> is like
<code>:sequence</code> but changes applied to modifier flags
(see above) are kept local to the parse trees enclosed by this
construct. Think of it as the S-expression variant of Perl's
&quot;(?:&lt;pattern&gt;)&quot; construct.
</li>
<li id="54">
<code>(:alternation {&lt;parse-tree&gt;}*)</code> means an
alternation of parse trees, i.e. one of the parse trees must
match. Example: <code>(:alternation #\b #\a #\z)</code> is
equivalent to the Perl regex string "b|a|z".
</li>
<li id="55">
<code>(:branch &lt;test&gt; &lt;parse-tree&gt;)</code> is for
conditional regular expressions with the syntax
<pre id="56">
  (?(condition)yes-pattern)
  (?(condition)yes-pattern|no-pattern)
</pre>
<p id="57">
&lt;test&gt; is either a number which stands for a register or a parse
tree which is a look-ahead or look-behind assertion. If the parse-tree
following the condition is an alteration, it must enclose exactly one
or two parse trees where the second one (if present) will be treated
as the &quot;no-pattern&quot; - in all other cases &lt;parse-tree&gt; will be
treated as the &quot;yes-pattern&quot;, executed if the condition matched.  If
the condition refers to a register, the condition succeeds if that
register already succeeded in matching somehing.
</p>
</li>
<li id="58">
<code>(:positive-lookahead|:negative-lookahead|:positive-lookbehind|:negative-lookbehind
&lt;parse-tree&gt;)</code> -- the meaning should be pretty obvious.
</li>
<li id="59">
<code>(:greedy-repetition|:non-greedy-repetition
&lt;min&gt; &lt;max&gt; &lt;parse-tree&gt;)</code> where &lt;min&gt; is a
non-negative integer and &lt;max&gt; is either a non-negative integer
not smaller than &lt;min&gt; or <code>nil</code> will
result in a regular expression which tries to match &lt;parse-tree&gt;
at least &lt;min&gt; times and at most &lt;max&gt; times (or as often
as possible if &lt;max&gt; is <code>nil</code>). So, e.g.,
<code>(:non-greedy-repetition 0 1 "ab")</code> is equivalent to
the Perl regex string "(?:ab)??".
</li>
<li id="60">
<code>(:standalone &lt;parse-tree&gt;)</code> is an
"independent" subexpression, i.e. <code>(:standalone
"bar")</code> is equivalent to the Perl regex string &quot;(?&gt;bar)&quot;.
</li>
<li id="61">
<code>(:register &lt;parse-tree&gt;)</code> is a capturing
register group. As usual, registers are counted from left to right
beginning with 1.
</li>
<li id="62">
<code>(:back-reference &lt;number&gt;)</code> where
&lt;number&gt; is a positive integer is a back-reference to a register
group.  <code>(:char-class|:inverted-char-class
{&lt;item&gt;}*)</code> where &lt;item&gt; is either a character, a
character range, or a symbol for a special character class (see above)
will be translated into a (one character wide) character class. A
character range looks like <code>(:range &lt;char1&gt;
&lt;char2&gt;)</code> where &lt;char1&gt; and &lt;char2&gt; are
characters such that <code>(char&lt;= &lt;char1&gt;
&lt;char2&gt;)</code> is true. Example:
<code>(:inverted-char-class #\a (:range #\d #\g)
:digit-class)</code> is equivalent to the Perl regex string
"[^aD-G\d]".
</li>
</ul>
<p id="63">
There is a small region of ambiguity between string syntax and tree
syntax.  Although a single string is a valid parse tree, it will be
interpreted as a Perl regexp strings when given to compile-re and
friends. To circumvent this you can use the equivalent parse tree
(:GROUP &lt;string&gt;).  See also <a href="operators/excl/quote-re.htm"><b>quote-re</b></a>.
</p>
<p id="64">
If you want to find out how parse trees are related to Perl regex
strings you should play around with <a href="operators/excl/parse-re.htm"><b>parse-re</b></a> - a function which converts a Perl
regexp strings to a parse tree.
</p>



<hr><h2 id="65"><a name="regexp-new-api-2">2.5 User-level API in the regexp2 module</a></h2>

<p id="66">
There are seven functions (listed first) and three macros in the API:
</p>
<ul>
<li id="67">
<a href="operators/excl/compile-re.htm"><b>compile-re</b></a>
</li>
<li id="68">
<a href="operators/excl/match-re.htm"><b>match-re</b></a>
</li>
<li id="69">
<a href="operators/excl/quote-re.htm"><b>quote-re</b></a>
</li>
<li id="70">
<a href="operators/excl/parse-re.htm"><b>parse-re</b></a>
</li>
<li id="71">
<a href="operators/excl/replace-re.htm"><b>replace-re</b></a>
</li>
<li id="72">
<a href="operators/excl/split-re.htm"><b>split-re</b></a>
</li>
<li id="73">
<a href="operators/excl/re-submatch.htm"><b>re-submatch</b></a>
</li>
<li id="74">
<a href="operators/excl/re-lambda.htm"><b>re-lambda</b></a>
</li>
<li id="75">
<a href="operators/excl/re-let.htm"><b>re-let</b></a>
</li>
<li id="76">
<a href="operators/excl/re-case.htm"><b>re-case</b></a>
</li>
</ul>




<hr><h2 id="77"><a name="regexp-new-compatibility-2">2.6 Compatibility issues in the regexp2 module</a></h2>

<ol>
<li id="78">
Traditionally, '{' and '}' characters that do not consist of a valid
repetition syntax are taken literally.  That is, a regular expression
"x{1,3,4}" matches the string "x{1,3,4}", and a regular expression
"a{" matches the string "a{".  Currently, these regular expressions
raise a syntax error in our regexp library.
</li>
<li id="79">
Embedded Perl expressions like (?{ $a = 3+$b }) are not supported
because Lisp cannot execute Perl code.
</li>
<li id="80">
The following escape sequences are not supported.  Precisely speaking,
these are actually a feature of Perl's literal string syntax, and not
a part of regular expression.
<pre id="81">
  \N{name}   named char
  \lx        lowercase x
  \ux        uppercase x
  \Lx..\E    lowercase x..
  \Ux..\E    uppercase x..
  \Qx..\E    quote non-alphanumeric chars in x.
</pre>
</li>
<li id="82">
The character properties (\p{property} and \P{property}), and extended
unicode combining sequence \X, aren't supported.
</li>
<li id="83">
POSIX character class syntax [:class:] within character classes is not
supported.
</li>
<li id="84">
<b>Inconsistent capturing and alternation order</b>. This is due to
Perl's bug. Only appears in the mixture of very tricky situation and
optimization. See <a href="http://www.weitz.de/cl-ppcre/">http://www.weitz.de/cl-ppcre/</a>
for the details.
</li>
</ol>



<hr><h2 id="85"><a name="regexp-new-performace-2">2.7 Performance notes in the regexp2 module</a></h2>

<p id="86">
Theoretically ACL's regexp library uses the same mechanism that Perl
and CL-PPCRE are using: Nondeterministic finite automaton (NFA).  When
there are multiple possibilies of matching, it "remembers" the current
state and tries each possibility one at a time.  If a trial fails, it
backs up the last saved state and tries the next possibility; that is
called a "backtrack". It is possible to compose a very short regular
expression that does a huge number of backtracks; if you have nested
repetitions and alternations, the number of required backtracks grows
exponentially.
</p>
<p id="87">
The regexp optimizer tries to reduce the number of backtracks, but it is
not always possible.  Here are some tips to improve the performance
of the matcher.
</p>
<ul>
<li id="88">
If applicable, use of standalone group <code>(?&gt;X)</code> in
the inner loop. It effectively turns the nested repetition into
unnested repetition from the viewpoint of NFA.  Lots of optimizations
can be done for unnested repetition, but not much can be done for
a nested one.
</li>
<li id="89">
If the input string is very long, it is a good idea to split it up by
non-backtracking regexp first, then apply more compilicated regexp to
the small chunks.  Non-backtracking NFA runs in constant space and
linear time to the input length.  Single-nested backtracking NFA runs
in linear space and quadratic time to the input length.
<p id="90">
Note that an unnested greedy repetition followed by a character or a
character set that are exclusive to the beginning of the repetition
becomes a non-backtracking regexp; for example, the regular expression
<code>(\w+)\s+</code> runs without backtracking.
</p>
</li>
</ul>




</body><hr><p id="2"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/regexp.htm">10.0 version</a></td></tr></table></html>