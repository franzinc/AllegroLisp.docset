<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="acldoc-styles.css" type="text/css"><title>The Allegro CL interface to the Amazon Elastic Compute Cloud (EC2)</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/ec2.htm">10.0 version</a></td></tr></table><h1 id="2">The Allegro CL interface to the Amazon Elastic Compute Cloud (EC2)</h1><p id="3">This document contains the following sections:</p><a href="#ec2-intro-1">1.0 EC2 introduction</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-mod-pack-2">1.1 The EC2 module, package, and supported platforms</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-example-setup-2">1.2 Example requirements</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-general-comments-2">1.3 General comments on the EC2 interface</a><br><a href="#ec2-requirements-1">2.0 EC2 setup and requirements</a><br><a href="#ec2-classes-1">3.0 EC2 classes</a><br><a href="#ec2-image-manip-1">4.0 Functions for image manipulation</a><br><a href="#instance-manipulation-ops-1">5.0 Functions for instance manipulation</a><br><a href="#key-pair-manipulation-1">6.0 Functions for key pair manipulation</a><br><a href="#security-manipulation-1">7.0 Functions for security manipulation</a><br><a href="#functions-elastic-address-manipulation-1">8.0 Functions for Elastic IP address manipulation</a><br><a href="#ebs-manipulation-1">9.0 Functions for EBS manipulation</a><br><a href="#high-level-funs-1">10.0 High-level EC2 functions</a><br><a href="#misc-ops-1">11.0 Miscellaneous functions</a><br><a href="#ec2-vars-1">Appendix A. EC2 variables</a><br><a href="#ec2-classes-1">Appendix B. EC2 classes</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-instance-class-2">Appendix B.1. The ec2-instance class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-image-2">Appendix B.2. The ec2-image class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-key-2">Appendix B.3. The ec2-key class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-security-group-2">Appendix B.4. The ec2-security-group class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-ip-permissions-2">Appendix B.5. The ec2-ip-permissions class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-volume-2">Appendix B.6. The ec2-volume class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-attachment-2">Appendix B.7. The ec2-attachment class</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-snapshot-2">Appendix B.8. The ec2-snapshot class</a><br><a href="#ec2-ops-1">Appendix C. EC2 operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-image-ops-2">Appendix C.1. Image manipulation operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#ops-instance-manip-2">Appendix C.2. Instance manipulation operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#key-pair-ops-2">Appendix C.3. Key pair manipulation operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#security-manipulation-ops-2">Appendix C.4. Security manipulation operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#elastic-address-manip-ops-2">Appendix C.5. Elastic IP address manipulation operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#ebs-manipulation-ops-2">Appendix C.6. Functionality for EBS manipulation</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-high-level-ops-2">Appendix C.7. High-level operators</a><br>&nbsp;&nbsp;&nbsp;<a href="#ec2-misc-ops-2">Appendix C.8. Miscellaneous operators</a><br><a href="#ec2-other-1">Appendix D. EC2 other functionality: ec2-region, ec2-identity, and ec2-error</a><br>

<hr><hr><h2 id="4"><a name="ec2-intro-1">1.0 EC2 introduction</a></h2>


<p id="5">
Allegro CL provides an interface to the API for the Amazon Elastic
Compute Cloud (EC2).  Amazon has different versions of their API and
we use version 2014-09-01. The Getting Started Guide 
is here:
<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html</a>.
The API documentation for this version is here:
<a href="http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Welcome.html">http://docs.aws.amazon.com/AWSEC2/latest/APIReference/Welcome.html</a>.
</p>
<p id="6">
To use Amazon's EC2, you must have an Amazon Web Services account.
You can sign up for that
here: <a href="http://aws.amazon.com/">http://aws.amazon.com/</a>.
This document is specific to the version of the API given above.  When
a new version of the API is released by Amazon, we will need to port
the current interface to EC2 to that new API version.
</p>

<p id="7">
The Allegro CL interface to EC2 uses the Amazon Query API.  The other
choices were the command line tools and SOAP API (note the SOAP API is
deprecated by Amazon). We use neither, however we do believe the
command line tools are useful as there are some things you can do with
the CLI that you cannot do with the Query or SOAP APIs.  We also find
the Elasticfox add-on for FireFox very useful.  You can download it
here:
<a href="https://aws.amazon.com/developertools/9302537431253167">https://aws.amazon.com/developertools/9302537431253167</a>.
</p>
<p id="8">
Almost all of the Lisp API has a direct mapping to the EC2 Query API,
but there are a few things in the Lisp API that assume `ssh' access to
the running instances being managed from Lisp.  Specifically, the
queries of load average and memory usages have no mirror in the Amazon
API.  These Lisp constructs use `ssh' and standard Linux commands to
operate, so they will only be useful with Linux guests.  There is a
section below about the extra information needed to use these Lisp API
entries.
</p>

<hr><h2 id="9"><a name="ec2-mod-pack-2">1.1 The EC2 module, package, and supported platforms</a></h2>

<p id="10">
The module for the Lisp API is named <b>ec2</b>. Load the module with
a form like:
</p>

<pre id="11">
(require :ec2)
</pre>

<p id="12">
It is not an error to evaluate that form when the module is already loaded.
</p>
<p id="13">
Symbols naming functionality in the module are in the <b>net.ec2</b>
package. We assume in this document that the net.ec2 package is used
so we do not qualify exported symbols in that package. Use the package
by evaluating <code>(use-package :ec2)</code> after the module
is loaded.
</p>
<h3 id="14">
SSL moduled is needed
</h3>
<p id="15">
The Amazon Query API requires the use of SSL, so the EC2 module only
works on those systems where SSL is supported--at the time of this
writing, all but 64-bit Mac OS X. You can tell if your implementation
supports SSL if the feature <code>:ssl-support</code> is on the
<a href="../ansicl/dictentr/features.htm"><code>*features*</code></a>
list. If the form <code>(featurep :ssl-support)</code> returns a
non-<code>nil</code> value, SSL is supported on your
platform.
</p>



<hr><h2 id="16"><a name="ec2-example-setup-2">1.2 Example requirements</a></h2>

<p id="17">
The example in this document assume the following forms, or
equivalents, have been evaluated:
</p>
<pre id="18">
  (require :ec2)
  (use-package :net.ec2)
  :ld ~/src/aws.cl
</pre>

<p id="19">
The last form, using the <a href="tpl-commands/ld.htm"><b>:ld</b></a>
top-level command, loads the file that sets the value of various
special variables as described
in <a href="#ec2-requirements-1">Section 2.0 EC2 setup and requirements</a>. See the
information in that section under the
heading <a href="#aw2-file">Using a file to set the keys
and identity</a>.
</p>



<hr><h2 id="20"><a name="ec2-general-comments-2">1.3 General comments on the EC2 interface</a></h2>

<ul>
<li id="21">
<b>This document is not a manual for the Amazon EC2</b>. We assume you
know what it is and how to use it. This document describes how you
can interface to EC2 using Lisp. Follow the links above for the Amazon
documentation on EC2. Further, while we say what kind of Lisp object
(a number, a string, an instance of a class, or whatever) should be
supplied as an argument, we do not always say exactly what the
possible values are or what effects the different values have,
depending on users looking for that information in the Amazon EC2
documentation.
</li>
<li id="22">
<b>EC2 objects are CLOS instances</b>. With some exceptions, such as the
<a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> and <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a> classes,
there are readers rather than accessors for slots, so the values
cannot be changed with <b>setf</b>. (These values should all be
considered read-only.)  The values in the CLOS objects are populated
by calls to the EC2 API.
</li>
<li id="23">
<b>Describe means return rather than print information</b>.
The word <i>describe</i> as generally used in Lisp
means print information about whatever is being described. The word in
the EC2 API means return information about the current state of something
in the cloud.   New instances are always created by the <i>describe-</i>
functions.   Calling
a <b>describe-</b> function, like, for example, <a href="ec2.htm#describe-instances-op-bookmarkxx"><b>describe-instances</b></a>,
causes new instances of the objects being described to be created
containing current information.
</li>
</ul>





<hr><hr><h2 id="24"><a name="ec2-requirements-1">2.0 EC2 setup and requirements</a></h2>

<p id="25">
To use the Allegro CL EC2 API you need to have an AWS access key and secret
access key. You obtain these from Amazon's website and we will assume
you have them. You also need an SSH keypair name, since ssh is the
sole method of interacting with your running instances.
</p>
<p id="26">
To use the EC2 interface, you must create a default identity and make
it the value of <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a> and following three
slot must be filled with the AWS access key, the secret access key,
and the keypair name using the accessors <a href="ec2.htm#ec2-identity-access-key-op-bookmarkxx"><b>ec2-identity-access-key</b></a>,
<a href="ec2.htm#ec2-identity-secret-access-key-op-bookmarkxx"><b>ec2-identity-secret-access-key</b></a>,
and <a href="ec2.htm#ec2-identity-keypair-name-op-bookmarkxx"><b>ec2-identity-keypair-name</b></a>.
</p>
<pre id="27">
(setq *default-identity* (make-instance 'ec2-identity))

(setf (ec2-identity-access-key *default-identity*) [your access key])
(setf (ec2-identity-secret-access-key *default-identity*) [your secret access key])
;; Never give this to anyone and guard the security of this secret access key.
(setf (ec2-identity-keypair-name *default-identity*) [your keypair name])
;; See <a href="ec2.htm#create-key-pair-op-bookmarkxx"><b>create-key-pair</b></a> for more information.

;; You can specify those values with init args as well as using
;; the accessors.
</pre>

<p id="28">
Once you have set the access key and the secret access key, you need
to put together the identities you will be using. The components of an
identity are given by the <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> class, and are (in addition
to the three mentioned above):
</p>
<ul>
<li id="29">
The SSH user
</li>
<li id="30">
The SSH identity file (for ssh'ing into your instances)
</li>
<li id="31">
The AWS keypair name
</li>
<li id="32">
The region in which your instances run
</li>
</ul>
<p id="33">
The SSH user will vary depending on the AMI you are using. For Ubuntu
(Linux) it will be "ubuntu".  For Fedora (Linux) it will be "root".
</p>
<p id="34">
Here are some example identities that you might use (assumes the
net.ec2 package has been used):
</p>

<pre id="35">
(defparameter *identity-us-east*
   (make-instance 'ec2-identity
     :ssh-user "ubuntu"
     :keypair-name "aws-us-east"
     :ssh-identity-file "~/.ssh/aws-us-east.pem"
     :region (find-region-by-name "us-east")))

(defparameter *identity-us-west*
   (make-instance 'ec2-identity
     :ssh-user "ubuntu"
     :keypair-name "aws-us-west"
     :ssh-identity-file "~/.ssh/aws-us-west.pem"
     :region  (find-region-by-name "us-west")))
</pre>

<h3 id="36">
<a name="aw2-file"></a>
Using a file to set the keys, regions, and identities
</h3>

<p id="37">
Once you have created identities, it's probably a good idea to put the settings of <a href="ec2.htm#ec2-identity-access-key-op-bookmarkxx"><b>ec2-identity-access-key</b></a>,
<a href="ec2.htm#ec2-identity-secret-access-key-op-bookmarkxx"><b>ec2-identity-secret-access-key</b></a>,
and <a href="ec2.htm#ec2-identity-keypair-name-op-bookmarkxx"><b>ec2-identity-keypair-name</b></a> in a file that
is appropriately protected. You can also specifiy
a <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a> (to capture other
slots). The examples below will use <b>~/src/aws.cl</b>. It should
contain something like this:
</p>

<pre id="38">
  (in-package :net.ec2)

  (setq *default-identity* (make-instance 'ec2-identity))
  (setf (ec2-identity-access-key *default-identity*) [your access key])
  (setf (ec2-identity-secret-access-key *default-identity*) [your secret access key])
  (setf (ec2-identity-keypair-name *default-identity*) [your keypair name])
;; etc.
</pre>

<h3 id="39">
Other variables
</h3>

<p id="40">
The values of the following special variables should be considered
read-only:
</p>

<ul>
<li id="41">
<a href="ec2.htm#s_ec2-signature-version_s-var-bookmarkxx"><code>*ec2-signature-version*</code></a>: the signature
version for API calls.
</li>
<li id="42">
<a href="ec2.htm#s_ec2-api-version_s-var-bookmarkxx"><code>*ec2-api-version*</code></a>: the EC2 API version
used by the Lisp API
</li>
</ul>

<p id="43">
The variable <a href="ec2.htm#s_ec2-signature-method_s-var-bookmarkxx"><code>*ec2-signature-method*</code></a> specifies the
encoding method.
</p>



<h3 id="44">
EC2 errors
</h3>

<p id="45">
Errors signaled by the Allegro CL EC2 API are of
type <a href="ec2.htm#ec2-error-class-bookmarkxx"><code>ec2-error</code></a>.
</p>



<hr><hr><h2 id="46"><a name="ec2-classes-1">3.0 EC2 classes</a></h2>

<p id="47">
The EC2 functionality uses CLOS classes. Each class typically has a
large number of slots. A complete list of the slots of each class
is given in an appendix, along with definitions of associated
functions. Here we just give brief introductions.
</p>


<h3 id="48">
The ec2-instance class
</h3>

<p id="49">
<a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a> is the name of the
class for which many API functions return an instance.  This
represents a running AMI in the cloud.  The functions defined for this
class.
</p>
<h3 id="50">
The ec2-image class
</h3>

<p id="51">
<a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a> is the name of the
class for which many API functions return an instance. This represents
images which can be run on the cloud.
</p>
<h3 id="52">
The ec2-key class
</h3>

<p id="53">
<a href="ec2.htm#ec2-key-class-bookmarkxx"><code>ec2-key</code></a> is the name of the class
for which some API functions return an instance. This represents the
SSH keyname used to access a remotely running instance.
</p>

<h3 id="54">
The ec2-security-group class
</h3>

<p id="55">
<a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a> is the name of the
class for which some API functions return an instance.  This
represents a security group
definition. See <a href="#ec2-security-group-2">Appendix B.4 The ec2-security-group class</a>
for information on slots, the predicate function, and accessors.
</p>

<h3 id="56">
The ec2-ip-permissions class
</h3>

<p id="57">
ec2-ip-permissions is the name of the class for which some
API functions return an instance.  This represents the permissions
which can be set for access to an
instance. See <a href="#ec2-ip-permissions-2">Appendix B.5 The ec2-ip-permissions class</a> for
information on slots, the predicate function, and accessors. 
</p>

<h3 id="58">
The ec2-volume class
</h3>

<p id="59">
<a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a> is the name of the
class for which some API functions return an instance. This represents
the volume definition, or unit of
storage. See <a href="#ec2-volume-2">Appendix B.6 The ec2-volume class</a> for
information on slots, the predicate function, and accessors.
</p>

<h3 id="60">
The ec2-attachment class
</h3>

<p id="61">
<a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a> is the name of the
class for which some API functions return an instance. This
represents an attached volume on an
instance. See <a href="#ec2-attachment-2">Appendix B.7 The ec2-attachment class</a> for
information on slots, the predicate function, and accessors.
</p>

<h3 id="62">
The ec2-snapshot class
</h3>

<p id="63">
<a href="ec2.htm#ec2-snapshot-class-bookmarkxx"><code>ec2-snapshot</code></a> is the name of the
class for which some API functions return an instance. This
represents a snapshot of a volume.
See <a href="#ec2-snapshot-2">Appendix B.8 The ec2-snapshot class</a> for information on
slots, the predicate function, and accessors.
</p>




<hr><hr><h2 id="64"><a name="ec2-image-manip-1">4.0 Functions for image manipulation</a></h2>

<p id="65">
This section deals with copying, registering, querying and deregistering
images. The functions discussed are listed below. Follow the links for
the complete definitions.
</p>

<ul>
<li id="66">
<a href="ec2.htm#copy-image-op-bookmarkxx"><b>copy-image</b></a> (<i>source-region
source-image-id</i> &key (<i>identity</i> *default-identity*):
copy <i>source-image-id</i> from <i>source-region</i> to the region
specified in <i>identity</i>.
</li>
<li id="67">
<a href="ec2.htm#register-image-op-bookmarkxx"><b>register-image</b></a> (<i>manifest</i>): register
an image with Amazon. Returns an image id.
</li>
<li id="68">
<a href="ec2.htm#describe-images-op-bookmarkxx"><b>describe-images</b></a> (&key <i>image-id
owner executable-by region</i>): return a list of available images
(<a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a> instances) after updating the
information about them.
</li>
<li id="69">
<a href="ec2.htm#deregister-image-op-bookmarkxx"><b>deregister-image</b></a> (<i>image-id</i>):
deregister an image.
</li>
</ul>

<h3 id="70">
describe-images example
</h3>

<pre id="71">
cl-user(5): <b>(describe-images :image-id *default-ami-name*)</b>
(#&lt;ec2-image
    id=&quot;ami-2a5fba43&quot;
    location=&quot;ec2-public-images/fedora-8-x86_64-base-v1.07.manifest.xml&quot;
    state=:available
    owner-id=&quot;amazon&quot;
    is-public=t
    architecture=&quot;x86_64&quot;
    type=&quot;machine&quot;
    kernel-id=&quot;aki-b51cf9dc&quot;
    ramdisk-id=&quot;ari-b31cf9da&quot;
    @ #x1001867df2&gt;)
cl-user(6): <b>(describe-images :owner "self")</b>
(#&lt;ec2-image
    id=&quot;ami-871df9ee&quot;
    location=&quot;/bms/bms.manifest.xml&quot;
    state=:available
    owner-id=&quot;210979525344&quot;
    architecture=&quot;x86_64&quot;
    type=&quot;machine&quot;
    @ #x100188dca2#gt;)
cl-user(7): <b>(length (describe-images))</b>
1265
</pre>



<hr><hr><h2 id="72"><a name="instance-manipulation-ops-1">5.0 Functions for instance manipulation</a></h2>

<p id="73">
This section deals with running, querying and terminating instances.
See <a href="#ops-instance-manip-2">Appendix C.2 Instance manipulation operators</a> for formal
definitions of the functions mentioned in this section.
</p>

<ul>
<li id="74">
<a href="ec2.htm#run-instances-op-bookmarkxx"><b>run-instances</b></a> (<i>image-id min-count
max-count</i> &key <i>wait verbose identity region
instance-type kernel-id
ramdisk-id availability-zone</i>): runs one or more instances on the
cloud. Upon success returns a list of <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>
instances. See the full description for descriptions of the arguments.
</li>
<li id="75">
<a href="ec2.htm#describe-instances-op-bookmarkxx"><b>describe-instances</b></a> (&key
(<i>states</i> '(:running :shutting-down :pending)) <i>identity
instances</i>): returns a list of instances running in the cloud (the
information cached in Lisp will be updated). The keywords (see the
full descripion for details) can narrow the result, which is a list
of <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a> instances.
</li>
<li id="76">
<a href="ec2.htm#terminate-instances-op-bookmarkxx"><b>terminate-instances</b></a> (<i>instances</i>
&key <i>verbose</i>): terminates the set of instances given by the
arguments, one or more instances of <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>. Returns a
list of status information for each terminated instance.
</li>
</ul>

<h3 id="77">
Instance manipulation functionality example
</h3>

<pre id="78">
cl-user(8): <b>(setq instances1
	       (run-instances "ami-2b5fba42" 2 2 :wait t :verbose t))</b>
; waiting for instance i-e51aa58c to enter :running state.
; waiting for instance i-e51aa58c to enter :running state.
[repeated similar lines deleted for space]
; waiting for instance i-e21aa58b to enter :running state.
; waiting for instance i-e21aa58b to enter :running state.
(#&lt;ec2-instance
    id=&quot;i-e21aa58b&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-ED-D7.compute-1.internal&quot;
    dns-name=&quot;ec2-75-101-197-132.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=0
    instance-type=&quot;m1.small&quot;
    launch-time=3437965484
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-113c9e78&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x10017de392&gt;
    @ #x1001977c92&gt;
 #&lt;ec2-instance
    id=&quot;i-e51aa58c&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-C4-E3.compute-1.internal&quot;
    dns-name=&quot;ec2-75-101-236-186.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=1
    instance-type=&quot;m1.small&quot;
    launch-time=3437965484
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-113c9e78&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x10017de392&gt;
    @ #x1001900c52&gt;)


;; Get the status of just the instances in the list `instances1'
;;
cl-user(9): <b>(describe-instances :instances instances1)</b>
(#&lt;ec2-instance
    id=&quot;i-e51aa58c&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-C4-E3.compute-1.internal&quot;
    dns-name=&quot;ec2-75-101-236-186.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=1
    instance-type=&quot;m1.small&quot;
    launch-time=3437965484
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-113c9e78&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x10017de392&gt;
    @ #x10019c92a2&gt;
 #&lt;ec2-instance
    id=&quot;i-e21aa58b&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-ED-D7.compute-1.internal&quot;
    dns-name=&quot;ec2-75-101-197-132.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=0
    instance-type=&quot;m1.small&quot;
    launch-time=3437965484
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-113c9e78&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x10017de392&gt;
    @ #x10019c8d72&gt;)
cl-user(10): <b>(terminate-instances instances1)</b>
((:instanceId "i-e21aa58b" :shutdownState-code "32" :shutdownState-name
  "shutting-down" :previousState-code "16" :previousState-name "running")
 (:instanceId "i-e51aa58c" :shutdownState-code "32" :shutdownState-name
  "shutting-down" :previousState-code "16" :previousState-name "running"))
cl-user(11): 
</pre>



<hr><hr><h2 id="79"><a name="key-pair-manipulation-1">6.0 Functions for key pair manipulation</a></h2>

<p id="80">
This section deals with creation, querying and deleting key
pair. See <a href="#key-pair-ops-2">Appendix C.3 Key pair manipulation operators</a> for formal
descriptions of the functions listed in this section.
</p>

<ul>
<li id="81">
<a href="ec2.htm#create-key-pair-op-bookmarkxx"><b>create-key-pair</b></a> (<i>key-name</i> &key (<i>region</i> *default-region*)): creates
a new 2048 bit RSA key pair, used when lauching new instances, and
subsequent access thereafter. On success, return a list of key name,
key fingerprint (SHA-1 digest of the DER encoded private key) and the
key material (an unencrypted PEM encoded RSA private key).
</li>
<li id="82">
<a href="ec2.htm#describe-key-pairs-op-bookmarkxx"><b>describe-key-pairs</b></a> (&key key-names (region *default-region*)):
retrieves the active key pairs and returns a list
of <a href="ec2.htm#ec2-key-class-bookmarkxx"><code>ec2-key</code></a> instances.
</li>
<li id="83">
<a href="ec2.htm#delete-key-pair-op-bookmarkxx"><b>delete-key-pair</b></a> (<i>key-name</i> &key (<i>identity</i> *default-identity*)): deletes
the key pair given
by <i>key-name</i>. Returns <code>t</code>
upon success.
</li>
</ul>

<h3 id="84">
Key pair manipulation examples
</h3>

<pre id="85">
cl-user(11): <b>(describe-key-pairs)</b>
(#&lt;ec2-key
    name=&quot;aws&quot;
    fingerprint=&quot;22:f9:ce:8e:ee:09:ce:54:61:80:6a:32:e6:70:d3:27:22:e0:5d:bf&quot;
    @ #x1001a3e6a2&gt;)
cl-user(12): <b>(create-key-pair "test-key")</b>
("test-key" "37:08:00:46:d1:01:ba:81:4b:f7:69:ea:23:00:31:28:20:fe:36:32"
 "-----BEGIN RSA PRIVATE KEY-----
MIIEpAIBAAKCAQEApheBcjqYIza2Bs71xLciKZP+QoXpn+Gg8ODRHwxQ4x67UXZrjBJ+LiBIHvvX
Tk6mV0dcgEVK9JayjdWFl8QEH2uQVISpwN8yAryyL9WlqhqK8PKumjEXFhwkRDY6Th7Affrt66rc
kDWF5oeR34SDS1hyVhs4bHV35ti4OMG352LsID9nuX/KUIpozXh8hUs/ZNpEKppsGlG0qcrCLuUX
[text deleted to save space]
mFgxEHBoDSi7EenJFm78iwIXJBvhT3IHxETZTXCcFvx/cQKBgQCAZ9A3CWBUbqIovJAGiRgfH/6r
A41m7GpYpg0hL9T0h0glNqGeeeH3MsMOeYnNyxKlJQdwCihSrm8t0X9ZG5YEThqdyrC6hoSvi006
/O/ua7m8nDDbppEdTh7tmYCSpt269HMDGxc6wIbc1FIJWBLKVox3chFA+aATADOqecYzLg==
-----END RSA PRIVATE KEY-----")
cl-user(13): <b>(describe-key-pairs)</b>
(#&lt;ec2-key
    name=&quot;aws&quot;
    fingerprint=&quot;22:f9:ce:8e:ee:09:ce:54:61:80:6a:32:e6:70:d3:27:22:e0:5d:bf&quot;
    @ #x1001aabd82&gt;
 #&lt;ec2-key
    name=&quot;test-key&quot;
    fingerprint=&quot;37:08:00:46:d1:01:ba:81:4b:f7:69:ea:23:00:31:28:20:fe:36:32&quot;
    @ #x1001aabd22&gt;)
cl-user(14): <b>(delete-key-pair "test-key")</b>
t
cl-user(15): <b>(describe-key-pairs)</b>
(#&lt;ec2-key
    name=&quot;aws&quot;
    fingerprint=&quot;22:f9:ce:8e:ee:09:ce:54:61:80:6a:32:e6:70:d3:27:22:e0:5d:bf&quot;
    @ #x1001adb922&gt;)
cl-user(16): 
</pre>



<hr><hr><h2 id="86"><a name="security-manipulation-1">7.0 Functions for security manipulation</a></h2>

<p id="87">
This section deals with creation, querying, deleting, authorizing and
revoking authorization for security
groups. See <a href="#security-manipulation-ops-2">Appendix C.4 Security manipulation operators</a>
for formal definitions of the functions mentioned in this section.
</p>

<ul>
<li id="88">
<a href="ec2.htm#create-security-group-op-bookmarkxx"><b>create-security-group</b></a> (<i>name
description</i> &key (<i>identity</i> *default-identity*)): creates a
new security group for <i>identity</i>
named <i>name</i> with
description <i>description</i>, both
strings. Returns <code>t</code> upon success.
</li>
<li id="89">
<a href="ec2.htm#describe-security-groups-op-bookmarkxx"><b>describe-security-groups</b></a> (&key
<i>group-names</i> (<i>identity</i> *default-identity*)): returns a list
of security groups, instances of
<a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>. Information about the
security-groups is updated before being returned.
</li>
<li id="90">
<a href="ec2.htm#delete-security-group-op-bookmarkxx"><b>delete-security-group</b></a> (<i>name</i>
&key (<i>identity</i> *default-identity*)):
deletes the security group
named <i>name</i>. Returns <code>t</code>
upon success.
</li>
<li id="91">
<a href="ec2.htm#authorize-security-group-ingress-op-bookmarkxx"><b>authorize-security-group-ingress</b></a>
(<i>name</i> &key (<i>identity</i> *default-identity*)
<i>ip-protocol from-port
to-port cidr-ip</i>): modifies security
group <i>name</i> by the actions specified in the given
keyword arguments. See the full description for details.
</li>
<li id="92">
<a href="ec2.htm#revoke-security-group-ingress-op-bookmarkxx"><b>revoke-security-group-ingress</b></a> (<i>name</i>
&key (<i>identity</i> *default-identity*) <i>ip-protocol
from-port to-port cidr-ip</i>): this function is the inverse of
<a href="ec2.htm#authorize-security-group-ingress-op-bookmarkxx"><b>authorize-security-group-ingress</b></a>, revoking
any authorization granted by previous calls to that function.
</li>
</ul>

<h3 id="93">
Security group examples
</h3>

<pre id="94">
cl-user(16): <b>(describe-security-groups)</b>
(#&lt;ec2-security-group
    owner-id=&quot;210979525344&quot;
    name=&quot;default&quot;
    description=&quot;default group&quot;
    ip-permissions=(#&lt;ec2-ip-permissions tcp: 0=&gt;65535&gt;
                    #&lt;ec2-ip-permissions udp: 0=&gt;65535&gt;
                    #&lt;ec2-ip-permissions icmp: -1=&gt;-1&gt;
                    #&lt;ec2-ip-permissions tcp: 22=&gt;22: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 80=&gt;80: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 3666=&gt;3666: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 3667=&gt;3667: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 8080=&gt;8080: 0.0.0.0/0&gt;)
    @ #x1001b08232&gt;)
cl-user(17): <b>(create-security-group "testgroup" "my test group")</b>
t
cl-user(18): <b>(authorize-security-group-ingress
	      "testgroup" :to-port 22 :from-port 22)</b>
t
cl-user(19): <b>(authorize-security-group-ingress
	      "testgroup" :to-port 80 :from-port 80)</b>
t
cl-user(20): <b>(describe-security-groups :group-names "testgroup")</b>
(#&lt;ec2-security-group
    owner-id=&quot;210979525344&quot;
    name=&quot;testgroup&quot;
    description=&quot;my test group&quot;
    ip-permissions=(#&lt;ec2-ip-permissions tcp: 22=&gt;22: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 80=&gt;80: 0.0.0.0/0&gt;)
    @ #x1001b87ee2&gt;)
cl-user(21): <b>(revoke-security-group-ingress
	      "testgroup" :to-port 80 :from-port 80)</b>
t
cl-user(22): <b>(describe-security-groups :group-names "testgroup")</b>
(#&lt;ec2-security-group
    owner-id=&quot;210979525344&quot;
    name=&quot;testgroup&quot;
    description=&quot;my test group&quot;
    ip-permissions=(#&lt;ec2-ip-permissions tcp: 22=&gt;22: 0.0.0.0/0&gt;)
    @ #x1001bc7252&gt;)
cl-user(23): <b>(delete-security-group "testgroup")</b>
t
cl-user(24): <b>(describe-security-groups)</b>
(#&lt;ec2-security-group
    owner-id=&quot;210979525344&quot;
    name=&quot;default&quot;
    description=&quot;default group&quot;
    ip-permissions=(#&lt;ec2-ip-permissions tcp: 0=&gt;65535&gt;
                    #&lt;ec2-ip-permissions udp: 0=&gt;65535&gt;
                    #&lt;ec2-ip-permissions icmp: -1=&gt;-1&gt;
                    #&lt;ec2-ip-permissions tcp: 22=&gt;22: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 80=&gt;80: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 3666=&gt;3666: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 3667=&gt;3667: 0.0.0.0/0&gt;
                    #&lt;ec2-ip-permissions tcp: 8080=&gt;8080: 0.0.0.0/0&gt;)
    @ #x1001bff662&gt;)
cl-user(25): 
</pre>



<hr><hr><h2 id="95"><a name="functions-elastic-address-manipulation-1">8.0 Functions for Elastic IP address manipulation</a></h2>

<p id="96">
This section deals with allocating, querying, releasing, associating
and disassociating Elastic IP
address. See <a href="#elastic-address-manip-ops-2">Appendix C.5 Elastic IP address manipulation operators</a>
for formal definitions of the functions mentioned in this section.
</p>

<ul>
<li id="97">
<a href="ec2.htm#allocate-address-op-bookmarkxx"><b>allocate-address</b></a> (&key (<i>identity</i>
*default-identity*)): allocates an Elastic, or static, IP address, which
is returned as a string, if successful.
</li>
<li id="98">
<a href="ec2.htm#describe-addresses-op-bookmarkxx"><b>describe-addresses</b></a> (): returns a list of
the current mapping of IP to AMI in a list.
</li>
<li id="99">
<a href="ec2.htm#release-address-op-bookmarkxx"><b>release-address</b></a> (<i>ip</i> &key
(<i>identity</i> *default-identity*)): releases an elastic IP address,
given by <i>ip</i>, a string.
</li>
<li id="100">
<a href="ec2.htm#associate-address-op-bookmarkxx"><b>associate-address</b></a> (<i>instance ip</i>):
associates IP <i>ip</i>, a string,
with <i>instance</i>, an <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>. Returns
<code>t</code> if successful.
</li>
<li id="101">
<a href="ec2.htm#disassociate-address-op-bookmarkxx"><b>disassociate-address</b></a> (<i>ip</i> &key
(<i>identity</i> *default-identity*)): disassociates
IP <i>ip</i> from whatever instance it is associated
with. Returns <code>t</code> if successful.
</li>
</ul>

<h3 id="102">
Elastic address examples
</h3>

<pre id="103">
cl-user(25): <b>(setq ip (allocate-address))</b>
"174.129.252.59"
cl-user(26): <b>(describe-addresses)</b>
(("174.129.252.59"))
cl-user(27): <b>(setq instances (run-instances "ami-2b5fba42" 1 1 :wait t))</b>
(#&lt;ec2-instance
    id=&quot;i-c71aa5ae&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-EC-35.compute-1.internal&quot;
    dns-name=&quot;ec2-67-202-33-184.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=0
    instance-type=&quot;m1.small&quot;
    launch-time=3437965713
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-f33c9e9a&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x1001de94e2&gt;
    @ #x1002012732&gt;)
cl-user(28): <b>(describe-instances :instances (car instances))</b>
(#&lt;ec2-instance
    id=&quot;i-c71aa5ae&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-EC-35.compute-1.internal&quot;
    dns-name=&quot;ec2-67-202-33-184.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=0
    instance-type=&quot;m1.small&quot;
    launch-time=3437965713
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-f33c9e9a&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x1001de94e2&gt;
    @ #x1002046df2&gt;)
cl-user(29): <b>(associate-address (car instances) ip)</b>
t
cl-user(30): <b>(describe-addresses)</b>
(("174.129.252.59" . "i-c71aa5ae"))
cl-user(31): <b>(describe-instances :instances (car instances))</b>
(#&lt;ec2-instance
    id=&quot;i-c71aa5ae&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-EC-35.compute-1.internal&quot;
    dns-name=&quot;ec2-174-129-252-59.compute-1.amazonaws.com&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=0
    instance-type=&quot;m1.small&quot;
    launch-time=3437965713
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-f33c9e9a&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x1001de94e2&gt;
    @ #x10020a6722&gt;)
cl-user(32): <b>(disassociate-address ip)</b>
t
cl-user(33): <b>(describe-addresses)</b>
(("174.129.252.59"))
cl-user(34): <b>(release-address ip)</b>
t
cl-user(35): <b>(describe-addresses)</b>
nil
cl-user(36): <b>(describe-instances :instances (car instances))</b>
(#&lt;ec2-instance
    id=&quot;i-c71aa5ae&quot;
    image-id=&quot;ami-2b5fba42&quot;
    state-name=:running
    state-code=16
    private-dns-name=&quot;domU-12-31-39-00-EC-35.compute-1.internal&quot;
    key-name=&quot;aws&quot;
    ami-launch-index=0
    instance-type=&quot;m1.small&quot;
    launch-time=3437965713
    availability-zone=&quot;us-east-1c&quot;
    kernel-id=&quot;aki-a71cf9ce&quot;
    ramdisk-id=&quot;ari-a51cf9cc&quot;
    reservation-id=&quot;r-f33c9e9a&quot;
    owner-id=&quot;210979525344&quot;
    identity=#&lt;ec2-identity
                ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
                ssh-user=&quot;root&quot;
                keypair-name=&quot;aws&quot;
                @ #x1001de94e2&gt;
    @ #x10021260e2&gt;)
cl-user(37): <b>(terminate-instances instances)</b>
((:instanceId "i-c71aa5ae" :shutdownState-code "32" :shutdownState-name
  "shutting-down" :previousState-code "16" :previousState-name "running"))
cl-user(38): 
</pre>

<p id="104">
In the above the DNS name changes from
"ec2-75-101-222-252.compute-1.amazonaws.com" to
"ec2-174-129-251-53.compute-1.amazonaws.com".  The former was the
default assigned DNS name and the latter the one from the allocated IP
address.  Note: it is unclear why the :dns-name slot of the instance
returned after disassociating the IP is unset in values returned by
the EC2 API.
</p>




<hr><hr><h2 id="105"><a name="ebs-manipulation-1">9.0 Functions for EBS manipulation</a></h2>

<p id="106">
This section deals with EBS volumes and
snapshots. See <a href="#ebs-manipulation-ops-2">Appendix C.6 Functionality for EBS manipulation</a>
for the formal descriptions of the functions mentioned.
</p>

<ul>
<li id="107">
<a href="ec2.htm#create-volume-op-bookmarkxx"><b>create-volume</b></a> (<i>availability-zone</i>
&key <i>size snapshot</i> (<i>identity</i> *default-identity*)):
create a volume in <i>availability-zone</i>,
with <i>size</i> or data from a snapshot you own given
by <i>snapshot</i>'.
</li>
<li id="108">
<a href="ec2.htm#describe-volumes-op-bookmarkxx"><b>describe-volumes</b></a> (&key <i>volumes</i>
(<i>identity</i> *default-identity*)): describes all active volumes (after
updating the cached information about them), or narrow to a specific
list of them given by <i>volumes</i>. Returns a list of
updated <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a> instances.
</li>
<li id="109">
<a href="ec2.htm#delete-volume-op-bookmarkxx"><b>delete-volume</b></a> (<i>volume</i>
&key (<i>identity</i> *default-identity*)): delete the
given volume.
</li>
<li id="110">
<a href="ec2.htm#attach-volume-op-bookmarkxx"><b>attach-volume</b></a> (<i>volume instance
device</i>): attach <i>volume</i>
to <i>instance</i> giving it the
name <i>device</i>. Returns an instance
of <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a> if successful.
</li>
<li id="111">
<a href="ec2.htm#detach-volume-op-bookmarkxx"><b>detach-volume</b></a> (<i>volume instance</i>
&key <i>device force</i>): detach <i>volume</i>
on <i>instance</i>. See the full description for the
meaning of the keyword arguments. Returns an instances
of <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a> if successful.
</li>
<li id="112">
<a href="ec2.htm#create-snapshot-op-bookmarkxx"><b>create-snapshot</b></a> (<i>volume</i>
&key (<i>identity</i> *default-identity*)): create a
snapshot of <i>volume</i>, returning
an <a href="ec2.htm#ec2-snapshot-class-bookmarkxx"><code>ec2-snapshot</code></a> if successful.
</li>
<li id="113">
<a href="ec2.htm#describe-snapshots-op-bookmarkxx"><b>describe-snapshots</b></a>
(&key <i>snapshots</i> (<i>identity</i> *default-identity*)): describe
the current snapshots after updating the cached information about
them. If <i>snapshots</i> is specified, just those
snapshots are described. Returns the list of snapshots described.
</li>
<li id="114">
<a href="ec2.htm#delete-snapshot-op-bookmarkxx"><b>delete-snapshot</b></a> (<i>snapshot</i>
&key (<i>identity</i> *default-identity*)): deletes
the given <i>snapshot</i>.
Returns <code>t</code> if successful.
</li>
</ul>

<h3 id="115">
Example with volumes and snapshots
</h3>

<pre id="116">
cl-user(38): <b>(setq i (car (run-instances "ami-2b5fba42" 1 1 :wait t)))</b>
#&lt;ec2-instance
   id=&quot;i-b41aa5dd&quot;
   image-id=&quot;ami-2b5fba42&quot;
   state-name=:running
   state-code=16
   private-dns-name=&quot;domU-12-31-39-00-ED-54.compute-1.internal&quot;
   dns-name=&quot;ec2-75-101-174-18.compute-1.amazonaws.com&quot;
   key-name=&quot;aws&quot;
   ami-launch-index=0
   instance-type=&quot;m1.small&quot;
   launch-time=3437965855
   availability-zone=&quot;us-east-1c&quot;
   kernel-id=&quot;aki-a71cf9ce&quot;
   ramdisk-id=&quot;ari-a51cf9cc&quot;
   reservation-id=&quot;r-d23c9ebb&quot;
   owner-id=&quot;210979525344&quot;
   identity=#&lt;ec2-identity
               ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
               ssh-user=&quot;root&quot;
               keypair-name=&quot;aws&quot;
               @ #x10017dd802&gt;
   @ #x1001a7dd72&gt;
cl-user(39): <b>(setq v1 (create-volume "us-east-1c" :size 1))</b>
#&lt;ec2-volume
   id=&quot;vol-4593772c&quot;
   size=&quot;1&quot;
   status=&quot;creating&quot;
   create-time=&quot;2008-12-11T06:32:02.000Z&quot;
   @ #x1001ab7bf2&gt;
cl-user(40): <b>(describe-volumes)</b>
(#&lt;ec2-volume
    id=&quot;vol-4593772c&quot;
    size=&quot;1&quot;
    status=&quot;available&quot;
    create-time=&quot;2008-12-11T06:32:02.000Z&quot;
    @ #x1001ad19a2&gt;
 #&lt;ec2-volume
    id=&quot;vol-9b8d69f2&quot;
    size=&quot;200&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-05T22:07:41.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001ada132&gt;)
    @ #x1001ada1c2&gt;)
cl-user(41): <b>(attach-volume v1 i "/dev/sdh")</b>
#&lt;ec2-attachment
   volume-id=&quot;vol-4593772c&quot;
   instance-id=&quot;i-b41aa5dd&quot;
   status=&quot;attaching&quot;
   attach-time=&quot;2008-12-11T06:32:13.000Z&quot;
   device=&quot;/dev/sdh&quot;
   @ #x1001afbf32&gt;
cl-user(42): <b>(describe-volumes)</b>
(#&lt;ec2-volume
    id=&quot;vol-4593772c&quot;
    size=&quot;1&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-11T06:32:02.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001b183d2&gt;)
    @ #x1001b18462&gt;
 #&lt;ec2-volume
    id=&quot;vol-9b8d69f2&quot;
    size=&quot;200&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-05T22:07:41.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001b184e2&gt;)
    @ #x1001b18572&gt;)
cl-user(43): 
</pre>

<p id="117">
Now, on the instance itself, I initialize the new attached device (we
are showing the shell interaction, with the # prompt indicating the
user is <b>root</b>):
</p>

<pre id="118">
# <b>fdisk /dev/sdh</b>
...

Command (m for help): <b>p</b>

Disk /dev/sdh: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x5f4d21ed

   Device Boot      Start         End      Blocks   Id  System

Command (m for help): <b>n</b>
Command action
   e   extended
   p   primary partition (1-4)
<b>p</b>
Partition number (1-4): <b>1</b>
First cylinder (1-130, default 1): 

Using default value 1
Last cylinder or +size or +sizeM or +sizeK (1-130, default 130): 
Using default value 130

Command (m for help): <b>p</b>

Disk /dev/sdh: 1073 MB, 1073741824 bytes
255 heads, 63 sectors/track, 130 cylinders
Units = cylinders of 16065 * 512 = 8225280 bytes
Disk identifier: 0x5f4d21ed

   Device Boot      Start         End      Blocks   Id  System
/dev/sdh1               1         130     1044193+  83  Linux

Command (m for help): <b>w</b>
The partition table has been altered!

Calling ioctl() to re-read partition table.
Syncing disks.
# <b>mkfs /dev/sdh1</b>
mke2fs 1.40.4 (31-Dec-2007)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
130560 inodes, 261048 blocks
13052 blocks (5.00%) reserved for the super user
First data block=0
Maximum filesystem blocks=268435456
8 block groups
32768 blocks per group, 32768 fragments per group
16320 inodes per group
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376

Writing inode tables: done                            
Writing superblocks and filesystem accounting information: done

This filesystem will be automatically checked every 38 mounts or
180 days, whichever comes first.  Use tune2fs -c or -i to override.
# <b>mkdir /v1</b>
# <b>mount /dev/sdh1 /v1</b>
# <b>df -h /v1</b>
Filesystem            Size  Used Avail Use% Mounted on
/dev/sdh1            1004M  1.3M  952M   1% /v1
# 
</pre>

<p id="119">
Now back in Lisp:
</p>

<pre id="120">
cl-user(43): <b>(create-snapshot v1)</b>
#&lt;ec2-snapshot
   id=&quot;snap-c821c2a1&quot;
   volume-id=&quot;vol-4593772c&quot;
   status=&quot;pending&quot;
   start-time=&quot;2008-12-11T06:34:20.000Z&quot;
   @ #x1001b48562&gt;
cl-user(44): <b>(describe-snapshots)</b>
(#&lt;ec2-snapshot
    id=&quot;snap-c821c2a1&quot;
    volume-id=&quot;vol-4593772c&quot;
    status=&quot;completed&quot;
    start-time=&quot;2008-12-11T06:34:20.000Z&quot;
    progress=&quot;100%&quot;
    @ #x1001b60ee2&gt;)
cl-user(45): 
</pre>

<p id="121">
Now, create a new volume from a snapshot, instead of specifying the
size directly:
</p>

<pre id="122">
cl-user(45): <b>(setq snapshot (car (describe-snapshots)))</b>
#&lt;ec2-snapshot
   id=&quot;snap-c821c2a1&quot;
   volume-id=&quot;vol-4593772c&quot;
   status=&quot;completed&quot;
   start-time=&quot;2008-12-11T06:34:20.000Z&quot;
   progress=&quot;100%&quot;
   @ #x1001b82f12&gt;
cl-user(46): <b>(setq v2 (create-volume "us-east-1c" :snapshot snapshot))</b>
#&lt;ec2-volume
   id=&quot;vol-4693772f&quot;
   size=&quot;1&quot;
   status=&quot;creating&quot;
   create-time=&quot;2008-12-11T06:34:47.000Z&quot;
   snapshot-id=&quot;snap-c821c2a1&quot;
   @ #x1001ba25c2&gt;
cl-user(47): <b>(attach-volume v2 i "/dev/sdi")</b>
#&lt;ec2-attachment
   volume-id=&quot;vol-4693772f&quot;
   instance-id=&quot;i-b41aa5dd&quot;
   status=&quot;attaching&quot;
   attach-time=&quot;2008-12-11T06:34:56.000Z&quot;
   device=&quot;/dev/sdi&quot;
   @ #x1001bbd6c2&gt;
cl-user(48): <b>(describe-volumes)</b>
(#&lt;ec2-volume
    id=&quot;vol-4693772f&quot;
    size=&quot;1&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-11T06:34:47.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001bdba42&gt;)
    @ #x1001bdbad2&gt;
 #&lt;ec2-volume
    id=&quot;vol-4593772c&quot;
    size=&quot;1&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-11T06:32:02.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001bdbb52&gt;)
    @ #x1001bdbbe2&gt;
 #&lt;ec2-volume
    id=&quot;vol-9b8d69f2&quot;
    size=&quot;200&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-05T22:07:41.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001bdbc62&gt;)
    @ #x1001bdbcf2&gt;)
</pre>

<p id="123">
Let's undo what we did above:
</p>

<pre id="124">
cl-user(151): <b>(delete-snapshot snapshot)</b>
t
cl-user(152): <b>(describe-snapshots)</b>
nil
</pre>

<p id="125">
Detach is required before delete:
</p>

<pre id="126">
cl-user(52): <b>(delete-volume v1)</b>
Error: IncorrectState: The volume 'vol-4593772c' is 'in-use'..
  [condition type: ec2-error]

Restart actions (select using :continue):
 0: Return to Top Level (an "abort" restart).
 1: Abort entirely from this (lisp) process.
[1] cl-user(53): <b>:res</b>
cl-user(54): <b>(detach-volume v1 i :device "/dev/sdh")</b>
#&lt;ec2-attachment
   volume-id=&quot;vol-4593772c&quot;
   instance-id=&quot;i-b41aa5dd&quot;
   status=&quot;detaching&quot;
   attach-time=&quot;2008-12-11T06:32:13.000Z&quot;
   device=&quot;/dev/sdh&quot;
   @ #x1001c61152&gt;
cl-user(55): <b>(detach-volume v2 i :device "/dev/sdi")</b>
#&lt;ec2-attachment
   volume-id=&quot;vol-4693772f&quot;
   instance-id=&quot;i-b41aa5dd&quot;
   status=&quot;detaching&quot;
   attach-time=&quot;2008-12-11T06:34:56.000Z&quot;
   device=&quot;/dev/sdi&quot;
   @ #x1001c7e262&gt;
</pre>

<p id="127">
/dev/sdh1 is still mounted, so it will not detach:
</p>

<pre id="128">
cl-user(56): <b>(describe-volumes)</b>
(#&lt;ec2-volume
    id=&quot;vol-4693772f&quot;
    size=&quot;1&quot;
    status=&quot;available&quot;
    create-time=&quot;2008-12-11T06:34:47.000Z&quot;
    @ #x1001e3f2a2&gt;
 #&lt;ec2-volume
    id=&quot;vol-4593772c&quot;
    size=&quot;1&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-11T06:32:02.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001e3f322&gt;)
    @ #x1001e3f3b2&gt;
 #&lt;ec2-volume
    id=&quot;vol-9b8d69f2&quot;
    size=&quot;200&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-05T22:07:41.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001e3f432&gt;)
    @ #x1001e3f4c2&gt;)
</pre>

<p id="129">
It is now unmounted, so the status should change:
</p>

<pre id="130">
cl-user(57): <b>(describe-volumes)</b>
(#&lt;ec2-volume
    id=&quot;vol-4693772f&quot;
    size=&quot;1&quot;
    status=&quot;available&quot;
    create-time=&quot;2008-12-11T06:34:47.000Z&quot;
    @ #x1001e714e2&gt;
 #&lt;ec2-volume
    id=&quot;vol-4593772c&quot;
    size=&quot;1&quot;
    status=&quot;available&quot;
    create-time=&quot;2008-12-11T06:32:02.000Z&quot;
    @ #x1001e71572&gt;
 #&lt;ec2-volume
    id=&quot;vol-9b8d69f2&quot;
    size=&quot;200&quot;
    status=&quot;in-use&quot;
    create-time=&quot;2008-12-05T22:07:41.000Z&quot;
    attachments=(#&lt;ec2-attachment # # # # @ #x1001e715f2&gt;)
    @ #x1001e71682&gt;)
cl-user(58): 
</pre>



<hr><hr><h2 id="131"><a name="high-level-funs-1">10.0 High-level EC2 functions</a></h2>

<p id="132">
This section details the high-level EC2 functions, some of which
require SSH access to the
instance. See <a href="#ec2-high-level-ops-2">Appendix C.7 High-level operators</a> for
the formal descriptions of the functions mentioned.
</p>

<ul>
<li id="133">
<a href="ec2.htm#wait-for-instances-op-bookmarkxx"><b>wait-for-instances</b></a> (<i>instances</i>
&key (<i>state</i> :running) <i>verbose</i> (<i>sleep</i> 2)
<i>identity</i>): waits
for <i>instances</i> to enter a
particular <i>state</i>, then returns newly made
<a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>s with slots containing new
values.
</li>
<li id="134">
<a href="ec2.htm#wait-for-instance-op-bookmarkxx"><b>wait-for-instance</b></a> (<i>instance</i>
&key (<i>state</i> :running) <i>verbose</i> (<i>sleep</i> 2)
<i>identity</i>): waits
for <i>instance</i> to enter a
particular <i>state</i>, then returns a newly made
<a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a> with slots containing new
values.
</li>
<li id="135">
<a href="ec2.htm#query-status-op-bookmarkxx"><b>query-status</b></a> (<i>instance</i>): returns
the status of <i>instance</i>and, as a second return value, a new copy
of the instance, just in case it changed.
</li>
<li id="136">
<a href="ec2.htm#query-load-op-bookmarkxx"><b>query-load</b></a> (<i>instance</i>): returns the
three values printed by the <b>/usr/bin/uptime</b> command, as
multiple values. (This function requires SSH access and only works
with Linux guest operating system.)
</li>
<li id="137">
<a href="ec2.htm#query-memory-op-bookmarkxx"><b>query-memory</b></a> (<i>instance</i>): returns
two values as multiple values, the used and free memory as reported by
the <b>/usr/bin/free</b> command. (This function requires SSH access
and only works with Linux guest operating system.)
</li>
<li id="138">
<a href="ec2.htm#ssh-command-output-op-bookmarkxx"><b>ssh-command-output</b></a> (<i>instance
command</i> &key &allow-other-keys): just
like <a href="os-interface.htm#command-output-op-bookmarkxx"><b>excl.osi:command-output</b></a>, except
it takes an additional required argument (the first), which is the
instance on which to execute the command via ssh.
</li>
<li id="139">
<a href="ec2.htm#ssh-copy-file-op-bookmarkxx"><b>ssh-copy-file</b></a> (<i>instance local-file
remote-file</i> &key (<i>preserve-time</i> t) <i>recurse</i>
&allow-other-keys): Copy <i>local-file</i> to the
pathname relative to <i>instance</i> using name
<i>remote-file</i>.
</li>
</ul>

<h3 id="140">
Example using query-status, query-load, and query-memory
</h3>

<pre id="141">
cl-user(58): <b>(query-status i)</b>
:running
#&lt;ec2-instance
   id=&quot;i-b41aa5dd&quot;
   image-id=&quot;ami-2b5fba42&quot;
   state-name=:running
   state-code=16
   private-dns-name=&quot;domU-12-31-39-00-ED-54.compute-1.internal&quot;
   dns-name=&quot;ec2-75-101-174-18.compute-1.amazonaws.com&quot;
   key-name=&quot;aws&quot;
   ami-launch-index=0
   instance-type=&quot;m1.small&quot;
   launch-time=3437965855
   availability-zone=&quot;us-east-1c&quot;
   kernel-id=&quot;aki-a71cf9ce&quot;
   ramdisk-id=&quot;ari-a51cf9cc&quot;
   reservation-id=&quot;r-d23c9ebb&quot;
   owner-id=&quot;210979525344&quot;
   identity=#&lt;ec2-identity
               ssh-identity-file=&quot;~/.ssh/id_rsa-aws&quot;
               ssh-user=&quot;root&quot;
               keypair-name=&quot;aws&quot;
               @ #x10017dd802&gt;
   @ #x1001ea26d2&gt;
cl-user(59): <b>(query-load i)</b>
0.0
0.05
0.02
cl-user(60): <b>(query-memory i)</b>
298136
1449628
cl-user(61): 
</pre>



<hr><hr><h2 id="142"><a name="misc-ops-1">11.0 Miscellaneous functions</a></h2>

<p id="143">
See <a href="#ec2-misc-ops-2">Appendix C.8 Miscellaneous operators</a> for formal
definitions of the functions listed in this section.
</p>

<ul>
<li id="144">
<a href="ec2.htm#describe-availability-zones-op-bookmarkxx"><b>describe-availability-zones</b></a>
(&key <i>zone-names</i> (<i>identity</i> *default-identity*)): returns
a list of availability zones and their current status.
</li>
</ul>

<h3 id="145">
Example using describe-availability-zones
</h3>
<pre id="146">
cl-user(117): <b>(describe-availability-zones)</b>
(("us-east-1c" . "available") ("us-east-1b" . "available")
 ("us-east-1a" . "available"))
cl-user(119): 
</pre>

<ul>
<li id="147">
<a href="ec2.htm#get-console-output-op-bookmarkxx"><b>get-console-output</b></a> (<i>instance</i>):
returns a cons of the universal time and the console output
from <i>instance</i>, as a string. If no output is yet
available, then <code>nil</code> is returned for the
string (so the return value is a singleton list containing the
universal time).
</li>
</ul>

<h3 id="148">
Example using get-console-output
</h3>

<pre id="149">
cl-user(65): <b>(get-console-output i)</b>
(3437966094
 . "Linux version 2.6.21.7-2.fc8xen (mockbuild@xenbuilder1.fedora.redhat.com) (gcc version 4.1.2 20070925 (Red Hat 4.1.2-33)) #1 SMP Fri Feb 15 12:39:36 EST 2008
BIOS-provided physical RAM map:
sanitize start
sanitize bail 0
...
Fedora release 8 (Werewolf)
Kernel 2.6.21.7-2.fc8xen on an i686

domU-12-31-39-00-ED-54 login: ")
cl-user(66): 
</pre>

<ul>
<li id="150">
<a href="ec2.htm#reboot-instances-op-bookmarkxx"><b>reboot-instances</b></a> (<i>instances</i>
&key <i>verbose</i>): returns the specified
instances. Returns <code>t</code> if successful.
</li>
<li id="151">
<a href="ec2.htm#describe-regions-op-bookmarkxx"><b>describe-regions</b></a>
(&rest <i>region-names</i>): returns a list of regions and
(possibly) their url.
</li>
</ul>

<h3 id="152">
Example using describe-regions
</h3>
<pre id="153">
cl-user(7): <b>(describe-regions)</b>
(("us-east-1") ("eu-west-1"))
cl-user(8): 
</pre>




<hr><hr><h2 id="154"><a name="ec2-vars-1">Appendix A: EC2 variables</a></h2>

<hr><h3 id="155"><a name="s_aws-access-key_s-var-bookmarkxx"></a>*aws-access-key*</h3><h3 id="156">Variable</h3><h4 id="157">Package: net.ec2</h4>

<p id="158">
This variable is no longer supported. Instead, use the
<a href="ec2.htm#ec2-identity-access-key-op-bookmarkxx"><b>ec2-identity-access-key</b></a> accessot to
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> instance.
</p>
<hr>

<hr><h3 id="159"><a name="s_aws-secret-access-key_s-var-bookmarkxx"></a>*aws-secret-access-key*</h3><h3 id="160">Variable</h3><h4 id="161">Package: net.ec2</h4>

<p id="162">
This variable is no longer supported. Instead, use the
<a href="ec2.htm#ec2-identity-secret-access-key-op-bookmarkxx"><b>ec2-identity-secret-access-key</b></a> accessot to
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> instance.
</p>
<hr>

<hr><h3 id="163"><a name="s_aws-keypair-name_s-var-bookmarkxx"></a>*aws-keypair-name*</h3><h3 id="164">Variable</h3><h4 id="165">Package: net.ec2</h4>

<p id="166">
This variable is no longer supported. Instead, use the
<a href="ec2.htm#ec2-identity-keypair-name-op-bookmarkxx"><b>ec2-identity-keypair-name</b></a> accessot to
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> instance.
</p>
<hr>


<hr><h3 id="167"><a name="s_ec2-identity_s-var-bookmarkxx"></a>*ec2-identity*</h3><h3 id="168">Variable</h3><h4 id="169">Package: net.ec2</h4>


<p id="170">
<b>This variable has been removed</b>. In earlier versions of the
interface, there was only one <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> instance so it made sense to
have it be the value of a variable, but now identities are associated
with regions and there can be many.
</p>
<hr>


<hr><h3 id="171"><a name="s_ec2-signature-version_s-var-bookmarkxx"></a>*ec2-signature-version*</h3><h3 id="172">Variable</h3><h4 id="173">Package: net.ec2</h4>

<p id="174">
The signature version for API calls.  Do not change the value of
this symbol. 
</p>
<hr>

<hr><h3 id="175"><a name="s_ec2-signature-method_s-var-bookmarkxx"></a>*ec2-signature-method*</h3><h3 id="176">Variable</h3><h4 id="177">Package: net.ec2</h4>

<p id="178">
The signature method for API calls. You would specify the type of
encoding used by setting or binding this variable but currently only
"HmacSHA1" is supported so there is no reason to modify the value. (We
do not support SHA-256 in ACL yet.) 
</p>
<hr>

<hr><h3 id="179"><a name="s_ec2-api-version_s-var-bookmarkxx"></a>*ec2-api-version*</h3><h3 id="180">Variable</h3><h4 id="181">Package: net.ec2</h4>

<p id="182">
The EC2 API version used by the Lisp API.  Do not change the value of
this symbol. 
</p>
<hr>

<hr><h3 id="183"><a name="s_default-ssh-identity-file_s-var-bookmarkxx"></a>*default-ssh-identity-file*</h3><h3 id="184">Variable</h3><h4 id="185">Package: net.ec2</h4>

<p id="186">
This variable is no longer supported.
</p>


<hr>

<hr><h3 id="187"><a name="s_default-ssh-user_s-var-bookmarkxx"></a>*default-ssh-user*</h3><h3 id="188">Variable</h3><h4 id="189">Package: net.ec2</h4>

<p id="190">
This variable is no longer supported.
</p>
<hr>


<hr><h3 id="191"><a name="s_default-instance-type_s-var-bookmarkxx"></a>*default-instance-type*</h3><h3 id="192">Variable</h3><h4 id="193">Package: net.ec2</h4>

<p id="194">
This variable is no longer supported.
</p>

<hr>



<hr><h3 id="195"><a name="s_default-ami-name_s-var-bookmarkxx"></a>*default-ami-name*</h3><h3 id="196">Variable</h3><h4 id="197">Package: net.ec2</h4>

<p id="198">
This variable is no longer supported.
</p>

<hr>

<hr><h3 id="199"><a name="s_default-instance-type_s-var-bookmarkxx"></a>*default-instance-type*</h3><h3 id="200">Variable</h3><h4 id="201">Package: net.ec2</h4>

<p id="202">
A string naming the default instance type. This
and <a href="ec2.htm#s_default-ami-name_s-var-bookmarkxx"><code>*default-ami-name*</code></a> must match (see the
description of <a href="ec2.htm#s_default-ami-name_s-var-bookmarkxx"><code>*default-ami-name*</code></a>).
</p>
<p id="203">
The initial value is "m1.large".
</p>

<hr>



<hr><hr><h2 id="204"><a name="ec2-classes-1">Appendix B: EC2 classes</a></h2>



<hr><h2 id="205"><a name="ec2-instance-class-2">Appendix B.1 The ec2-instance class</a></h2>

<hr><h3 id="206"><a name="ec2-instance-class-bookmarkxx"></a>ec2-instance</h3><h3 id="207">Class</h3><h4 id="208">Package: net.ec2</h4>

<p id="209">
The class for which many API
functions return an instance. This represents a running AMI in the
cloud.
</p>
<p id="210">
The predicate that tests whether an object is an ec2-instance is
<a href="ec2.htm#ec2-instance-p-op-bookmarkxx"><b>ec2-instance-p</b></a>. The following are accessors for the slots of this
class:
</p>

<ul>
<li id="211">
<a href="ec2.htm#ec2-instance-region-op-bookmarkxx"><b>ec2-instance-region</b></a>
</li>
<li id="212">
<a href="ec2.htm#ec2-instance-ami-launch-index-op-bookmarkxx"><b>ec2-instance-ami-launch-index</b></a>
</li>
<li id="213">
<a href="ec2.htm#ec2-instance-availability-zone-op-bookmarkxx"><b>ec2-instance-availability-zone</b></a>
</li>
<li id="214">
<a href="ec2.htm#ec2-instance-dns-name-op-bookmarkxx"><b>ec2-instance-dns-name</b></a>
</li>
<li id="215">
<a href="ec2.htm#ec2-instance-id-op-bookmarkxx"><b>ec2-instance-id</b></a>
</li>
<li id="216">
<a href="ec2.htm#ec2-instance-identity-op-bookmarkxx"><b>ec2-instance-identity</b></a>
</li>
<li id="217">
<a href="ec2.htm#ec2-instance-image-id-op-bookmarkxx"><b>ec2-instance-image-id</b></a>
</li>
<li id="218">
<a href="ec2.htm#ec2-instance-instance-type-op-bookmarkxx"><b>ec2-instance-instance-type</b></a>
</li>
<li id="219">
<a href="ec2.htm#ec2-instance-kernel-id-op-bookmarkxx"><b>ec2-instance-kernel-id</b></a>
</li>
<li id="220">
<a href="ec2.htm#ec2-instance-key-name-op-bookmarkxx"><b>ec2-instance-key-name</b></a>
</li>
<li id="221">
<a href="ec2.htm#ec2-instance-launch-time-op-bookmarkxx"><b>ec2-instance-launch-time</b></a>
</li>
<li id="222">
<a href="ec2.htm#ec2-instance-owner-id-op-bookmarkxx"><b>ec2-instance-owner-id</b></a>
</li>
<li id="223">
<a href="ec2.htm#ec2-instance-previous-state-code-op-bookmarkxx"><b>ec2-instance-previous-state-code</b></a>
</li>
<li id="224">
<a href="ec2.htm#ec2-instance-previous-state-name-op-bookmarkxx"><b>ec2-instance-previous-state-name</b></a>
</li>
<li id="225">
<a href="ec2.htm#ec2-instance-private-dns-name-op-bookmarkxx"><b>ec2-instance-private-dns-name</b></a>
</li>
<li id="226">
<a href="ec2.htm#ec2-instance-ramdisk-id-op-bookmarkxx"><b>ec2-instance-ramdisk-id</b></a>
</li>
<li id="227">
<a href="ec2.htm#ec2-instance-reason-op-bookmarkxx"><b>ec2-instance-reason</b></a>
</li>
<li id="228">
<a href="ec2.htm#ec2-instance-reservation-id-op-bookmarkxx"><b>ec2-instance-reservation-id</b></a>
</li>
<li id="229">
<a href="ec2.htm#ec2-instance-state-code-op-bookmarkxx"><b>ec2-instance-state-code</b></a>
</li>
<li id="230">
<a href="ec2.htm#ec2-instance-state-name-op-bookmarkxx"><b>ec2-instance-state-name</b></a>
</li>
</ul>


<hr>

<hr><h3 id="231"><a name="ec2-instance-p-op-bookmarkxx"></a>ec2-instance-p</h3><h3 id="232">Generic Function</h3><h4 id="233">Package: net.ec2</h4>

<p id="234"><b>Arguments: </b><i>
object
</i></p>

<p id="235">
The predicate for the class <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>, returning
true when the argument is an ec2-instance
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="236"><a name="ec2-instance-region-op-bookmarkxx"></a>ec2-instance-region</h3><h3 id="237">Generic Function</h3><h4 id="238">Package: net.ec2</h4>

<p id="239"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="240">
Accessor of the slot of <i>ec2-instance</i> (an
<a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>) holding the region at the
time of the instance's creation.
</p>

<hr>

<hr><h3 id="241"><a name="ec2-instance-dns-name-op-bookmarkxx"></a>ec2-instance-dns-name</h3><h3 id="242">Generic Function</h3><h4 id="243">Package: net.ec2</h4>

<p id="244"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="245">
Accessor of data returned by EC2 API calls.
</p>

<hr>


<hr><h3 id="246"><a name="ec2-instance-id-op-bookmarkxx"></a>ec2-instance-id</h3><h3 id="247">Generic Function</h3><h4 id="248">Package: net.ec2</h4>

<p id="249"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="250">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="251"><a name="ec2-instance-image-id-op-bookmarkxx"></a>ec2-instance-image-id</h3><h3 id="252">Generic Function</h3><h4 id="253">Package: net.ec2</h4>

<p id="254"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="255">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="256"><a name="ec2-instance-state-name-op-bookmarkxx"></a>ec2-instance-state-name</h3><h3 id="257">Generic Function</h3><h4 id="258">Package: net.ec2</h4>

<p id="259"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="260">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="261"><a name="ec2-instance-state-code-op-bookmarkxx"></a>ec2-instance-state-code</h3><h3 id="262">Generic Function</h3><h4 id="263">Package: net.ec2</h4>

<p id="264"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="265">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="266"><a name="ec2-instance-previous-state-name-op-bookmarkxx"></a>ec2-instance-previous-state-name</h3><h3 id="267">Generic Function</h3><h4 id="268">Package: net.ec2</h4>

<p id="269"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="270">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="271"><a name="ec2-instance-previous-state-code-op-bookmarkxx"></a>ec2-instance-previous-state-code</h3><h3 id="272">Generic Function</h3><h4 id="273">Package: net.ec2</h4>

<p id="274"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="275">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="276"><a name="ec2-instance-private-dns-name-op-bookmarkxx"></a>ec2-instance-private-dns-name</h3><h3 id="277">Generic Function</h3><h4 id="278">Package: net.ec2</h4>

<p id="279"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="280">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="281"><a name="ec2-instance-owner-id-op-bookmarkxx"></a>ec2-instance-owner-id</h3><h3 id="282">Generic Function</h3><h4 id="283">Package: net.ec2</h4>

<p id="284"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="285">
The value is meta-information indirectly gleaned from EC2 API calls.
</p>

<hr>


<hr><h3 id="286"><a name="ec2-instance-reason-op-bookmarkxx"></a>ec2-instance-reason</h3><h3 id="287">Generic Function</h3><h4 id="288">Package: net.ec2</h4>

<p id="289"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="290">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="291"><a name="ec2-instance-key-name-op-bookmarkxx"></a>ec2-instance-key-name</h3><h3 id="292">Generic Function</h3><h4 id="293">Package: net.ec2</h4>

<p id="294"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="295">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="296"><a name="ec2-instance-ami-launch-index-op-bookmarkxx"></a>ec2-instance-ami-launch-index</h3><h3 id="297">Generic Function</h3><h4 id="298">Package: net.ec2</h4>

<p id="299"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="300">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="301"><a name="ec2-instance-instance-type-op-bookmarkxx"></a>ec2-instance-instance-type</h3><h3 id="302">Generic Function</h3><h4 id="303">Package: net.ec2</h4>

<p id="304"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="305">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="306"><a name="ec2-instance-launch-time-op-bookmarkxx"></a>ec2-instance-launch-time</h3><h3 id="307">Generic Function</h3><h4 id="308">Package: net.ec2</h4>

<p id="309"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="310">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="311"><a name="ec2-instance-availability-zone-op-bookmarkxx"></a>ec2-instance-availability-zone</h3><h3 id="312">Generic Function</h3><h4 id="313">Package: net.ec2</h4>

<p id="314"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="315">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="316"><a name="ec2-instance-kernel-id-op-bookmarkxx"></a>ec2-instance-kernel-id</h3><h3 id="317">Generic Function</h3><h4 id="318">Package: net.ec2</h4>

<p id="319"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="320">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="321"><a name="ec2-instance-ramdisk-id-op-bookmarkxx"></a>ec2-instance-ramdisk-id</h3><h3 id="322">Generic Function</h3><h4 id="323">Package: net.ec2</h4>

<p id="324"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="325">
Accessor of data returned by EC2 API calls.
</p>

<hr>

<hr><h3 id="326"><a name="ec2-instance-reservation-id-op-bookmarkxx"></a>ec2-instance-reservation-id</h3><h3 id="327">Generic Function</h3><h4 id="328">Package: net.ec2</h4>

<p id="329"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="330">
The value is meta-information indirectly gleaned from EC2 API calls.
</p>

<hr>

<hr><h3 id="331"><a name="ec2-instance-identity-op-bookmarkxx"></a>ec2-instance-identity</h3><h3 id="332">Generic Function</h3><h4 id="333">Package: net.ec2</h4>

<p id="334"><b>Arguments: </b><i>
ec2-instance
</i></p>

<p id="335">
The EC2 identity used in SSH access of the remotely running
instance.
</p>

<hr>




<hr><h2 id="336"><a name="ec2-image-2">Appendix B.2 The ec2-image class</a></h2>


<hr><h3 id="337"><a name="ec2-image-class-bookmarkxx"></a>ec2-image</h3><h3 id="338">Class</h3><h4 id="339">Package: net.ec2</h4>

<p id="340">
The class for which many API
functions return an instance. This represents images which can be
run on the cloud. 
</p>
<p id="341">
The predicate that tests whether an object is an ec2-instance is
<a href="ec2.htm#ec2-image-p-op-bookmarkxx"><b>ec2-image-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="342">
<a href="ec2.htm#ec2-image-architecture-op-bookmarkxx"><b>ec2-image-architecture</b></a>
</li>
<li id="343">
<a href="ec2.htm#ec2-image-id-op-bookmarkxx"><b>ec2-image-id</b></a>
</li>
<li id="344">
<a href="ec2.htm#ec2-image-is-public-op-bookmarkxx"><b>ec2-image-is-public</b></a>
</li>
<li id="345">
<a href="ec2.htm#ec2-image-kernel-id-op-bookmarkxx"><b>ec2-image-kernel-id</b></a>
</li>
<li id="346">
<a href="ec2.htm#ec2-image-location-op-bookmarkxx"><b>ec2-image-location</b></a>
</li>
<li id="347">
<a href="ec2.htm#ec2-image-owner-id-op-bookmarkxx"><b>ec2-image-owner-id</b></a>
</li>
<li id="348">
<a href="ec2.htm#ec2-image-ramdisk-id-op-bookmarkxx"><b>ec2-image-ramdisk-id</b></a>
</li>
<li id="349">
<a href="ec2.htm#ec2-image-state-op-bookmarkxx"><b>ec2-image-state</b></a>
</li>
<li id="350">
<a href="ec2.htm#ec2-image-type-op-bookmarkxx"><b>ec2-image-type</b></a>
</li>
</ul>


<hr>

<hr><h3 id="351"><a name="ec2-image-p-op-bookmarkxx"></a>ec2-image-p</h3><h3 id="352">Generic Function</h3><h4 id="353">Package: net.ec2</h4>

<p id="354"><b>Arguments: </b><i>
object
</i></p>

<p id="355">
The predicate for the class <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>, returning
true when the argument is an ec2-image
and <code>nil</code> otherwise.
</p>

<hr>


<hr><h3 id="356"><a name="ec2-image-architecture-op-bookmarkxx"></a>ec2-image-architecture</h3><h3 id="357">Generic Function</h3><h4 id="358">Package: net.ec2</h4>

<p id="359"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="360">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="361"><a name="ec2-image-id-op-bookmarkxx"></a>ec2-image-id</h3><h3 id="362">Generic Function</h3><h4 id="363">Package: net.ec2</h4>

<p id="364"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="365">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="366"><a name="ec2-image-is-public-op-bookmarkxx"></a>ec2-image-is-public</h3><h3 id="367">Generic Function</h3><h4 id="368">Package: net.ec2</h4>

<p id="369"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="370">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="371"><a name="ec2-image-kernel-id-op-bookmarkxx"></a>ec2-image-kernel-id</h3><h3 id="372">Generic Function</h3><h4 id="373">Package: net.ec2</h4>

<p id="374"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="375">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="376"><a name="ec2-image-location-op-bookmarkxx"></a>ec2-image-location</h3><h3 id="377">Generic Function</h3><h4 id="378">Package: net.ec2</h4>

<p id="379"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="380">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="381"><a name="ec2-image-owner-id-op-bookmarkxx"></a>ec2-image-owner-id</h3><h3 id="382">Generic Function</h3><h4 id="383">Package: net.ec2</h4>

<p id="384"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="385">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="386"><a name="ec2-image-ramdisk-id-op-bookmarkxx"></a>ec2-image-ramdisk-id</h3><h3 id="387">Generic Function</h3><h4 id="388">Package: net.ec2</h4>

<p id="389"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="390">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="391"><a name="ec2-image-state-op-bookmarkxx"></a>ec2-image-state</h3><h3 id="392">Generic Function</h3><h4 id="393">Package: net.ec2</h4>

<p id="394"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="395">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>

<hr><h3 id="396"><a name="ec2-image-type-op-bookmarkxx"></a>ec2-image-type</h3><h3 id="397">Generic Function</h3><h4 id="398">Package: net.ec2</h4>

<p id="399"><b>Arguments: </b><i>
ec2-image
</i></p>

<p id="400">
The accessor to the named slot of an <a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>.
</p>
<hr>




<hr><h2 id="401"><a name="ec2-key-2">Appendix B.3 The ec2-key class</a></h2>


<hr><h3 id="402"><a name="ec2-key-class-bookmarkxx"></a>ec2-key</h3><h3 id="403">Class</h3><h4 id="404">Package: net.ec2</h4>

<p id="405">
The class for which many API
functions return an instance. This represents the SSH keyname used to
access a remotely running instance.
</p>
<p id="406">
The predicate that tests whether an object is an ec2-key is
<a href="ec2.htm#ec2-key-p-op-bookmarkxx"><b>ec2-key-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="407">
<a href="ec2.htm#ec2-key-fingerprint-op-bookmarkxx"><b>ec2-key-fingerprint</b></a>
</li>
<li id="408">
<a href="ec2.htm#ec2-key-name-op-bookmarkxx"><b>ec2-key-name</b></a>
</li>
</ul>


<hr>

<hr><h3 id="409"><a name="ec2-key-p-op-bookmarkxx"></a>ec2-key-p</h3><h3 id="410">Generic Function</h3><h4 id="411">Package: net.ec2</h4>

<p id="412"><b>Arguments: </b><i>
object
</i></p>

<p id="413">
The predicate for the class <a href="ec2.htm#ec2-key-class-bookmarkxx"><code>ec2-key</code></a>, returning
true when the argument is an ec2-key
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="414"><a name="ec2-key-name-op-bookmarkxx"></a>ec2-key-name</h3><h3 id="415">Generic Function</h3><h4 id="416">Package: net.ec2</h4>

<p id="417"><b>Arguments: </b><i>
ec2-key
</i></p>

<p id="418">
The accessor to the named slot of an <a href="ec2.htm#ec2-key-class-bookmarkxx"><code>ec2-key</code></a>.
</p>
<hr>

<hr><h3 id="419"><a name="ec2-key-fingerprint-op-bookmarkxx"></a>ec2-key-fingerprint</h3><h3 id="420">Generic Function</h3><h4 id="421">Package: net.ec2</h4>

<p id="422"><b>Arguments: </b><i>
ec2-key
</i></p>

<p id="423">
The accessor to the named slot of an <a href="ec2.htm#ec2-key-class-bookmarkxx"><code>ec2-key</code></a>.
</p>
<hr>



<hr><h2 id="424"><a name="ec2-security-group-2">Appendix B.4 The ec2-security-group class</a></h2>


<hr><h3 id="425"><a name="ec2-security-group-class-bookmarkxx"></a>ec2-security-group</h3><h3 id="426">Class</h3><h4 id="427">Package: net.ec2</h4>

<p id="428">
The class for which some API functions return an instance. This
represents a security group definition.
</p>
<p id="429">
The predicate that tests whether an object is an ec2-security-group is
<a href="ec2.htm#ec2-security-group-p-op-bookmarkxx"><b>ec2-security-group-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="430">
<a href="ec2.htm#ec2-security-group-description-op-bookmarkxx"><b>ec2-security-group-description</b></a>
</li>
<li id="431">
<a href="ec2.htm#ec2-security-group-ip-permissions-op-bookmarkxx"><b>ec2-security-group-ip-permissions</b></a>
</li>
<li id="432">
<a href="ec2.htm#ec2-security-group-name-op-bookmarkxx"><b>ec2-security-group-name</b></a>
</li>
<li id="433">
<a href="ec2.htm#ec2-security-group-owner-id-op-bookmarkxx"><b>ec2-security-group-owner-id</b></a>
</li>
</ul>


<hr>

<hr><h3 id="434"><a name="ec2-security-group-p-op-bookmarkxx"></a>ec2-security-group-p</h3><h3 id="435">Generic Function</h3><h4 id="436">Package: net.ec2</h4>

<p id="437"><b>Arguments: </b><i>
object
</i></p>

<p id="438">
The predicate for the class <a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>, returning
true when the argument is an ec2-security-group
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="439"><a name="ec2-security-group-description-op-bookmarkxx"></a>ec2-security-group-description</h3><h3 id="440">Generic Function</h3><h4 id="441">Package: net.ec2</h4>

<p id="442"><b>Arguments: </b><i>
ec2-security-group
</i></p>

<p id="443">
The accessor to the named slot of an <a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>.
</p>
<hr>

<hr><h3 id="444"><a name="ec2-security-group-ip-permissions-op-bookmarkxx"></a>ec2-security-group-ip-permissions</h3><h3 id="445">Generic Function</h3><h4 id="446">Package: net.ec2</h4>

<p id="447"><b>Arguments: </b><i>
ec2-security-group
</i></p>

<p id="448">
The accessor to the named slot of an <a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>.
</p>
<hr>

<hr><h3 id="449"><a name="ec2-security-group-name-op-bookmarkxx"></a>ec2-security-group-name</h3><h3 id="450">Generic Function</h3><h4 id="451">Package: net.ec2</h4>

<p id="452"><b>Arguments: </b><i>
ec2-security-group
</i></p>

<p id="453">
The accessor to the named slot of an <a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>.
</p>
<hr>

<hr><h3 id="454"><a name="ec2-security-group-owner-id-op-bookmarkxx"></a>ec2-security-group-owner-id</h3><h3 id="455">Generic Function</h3><h4 id="456">Package: net.ec2</h4>

<p id="457"><b>Arguments: </b><i>
ec2-security-group
</i></p>

<p id="458">
The accessor to the named slot of an <a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>.
</p>
<hr>



<hr><h2 id="459"><a name="ec2-ip-permissions-2">Appendix B.5 The ec2-ip-permissions class</a></h2>

<hr><h3 id="460"><a name="ec2-ip-permissions-class-bookmarkxx"></a>ec2-ip-permissions</h3><h3 id="461">Class</h3><h4 id="462">Package: net.ec2</h4>

<p id="463">
The class for which some
API functions return an instance.  This represents the permissions
which can be set for access to an
instance.
</p>
<p id="464">
The predicate that tests whether an object is an ec2-ip-permissions is
<a href="ec2.htm#ec2-ip-permissions-p-op-bookmarkxx"><b>ec2-ip-permissions-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="465">
<a href="ec2.htm#ec2-ip-permissions-from-port-op-bookmarkxx"><b>ec2-ip-permissions-from-port</b></a>
</li>
<li id="466">
<a href="ec2.htm#ec2-ip-permissions-ip-protocol-op-bookmarkxx"><b>ec2-ip-permissions-ip-protocol</b></a>
</li>
<li id="467">
<a href="ec2.htm#ec2-ip-permissions-ip-ranges-op-bookmarkxx"><b>ec2-ip-permissions-ip-ranges</b></a>
</li>
<li id="468">
<a href="ec2.htm#ec2-ip-permissions-to-port-op-bookmarkxx"><b>ec2-ip-permissions-to-port</b></a>
</li>
</ul>


<hr>

<hr><h3 id="469"><a name="ec2-ip-permissions-p-op-bookmarkxx"></a>ec2-ip-permissions-p</h3><h3 id="470">Generic Function</h3><h4 id="471">Package: net.ec2</h4>

<p id="472"><b>Arguments: </b><i>
object
</i></p>

<p id="473">
The predicate for the class <a href="ec2.htm#ec2-ip-permissions-class-bookmarkxx"><code>ec2-ip-permissions</code></a>, returning
true when the argument is an ec2-ip-permissions
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="474"><a name="ec2-ip-permissions-from-port-op-bookmarkxx"></a>ec2-ip-permissions-from-port</h3><h3 id="475">Generic Function</h3><h4 id="476">Package: net.ec2</h4>

<p id="477"><b>Arguments: </b><i>
ec2-ip-permissions
</i></p>

<p id="478">
The accessor to the named slot of an <a href="ec2.htm#ec2-ip-permissions-class-bookmarkxx"><code>ec2-ip-permissions</code></a>.
</p>
<hr>

<hr><h3 id="479"><a name="ec2-ip-permissions-ip-protocol-op-bookmarkxx"></a>ec2-ip-permissions-ip-protocol</h3><h3 id="480">Generic Function</h3><h4 id="481">Package: net.ec2</h4>

<p id="482"><b>Arguments: </b><i>
ec2-ip-permissions
</i></p>

<p id="483">
The accessor to the named slot of an <a href="ec2.htm#ec2-ip-permissions-class-bookmarkxx"><code>ec2-ip-permissions</code></a>.
</p>
<hr>

<hr><h3 id="484"><a name="ec2-ip-permissions-ip-ranges-op-bookmarkxx"></a>ec2-ip-permissions-ip-ranges</h3><h3 id="485">Generic Function</h3><h4 id="486">Package: net.ec2</h4>

<p id="487"><b>Arguments: </b><i>
ec2-ip-permissions
</i></p>

<p id="488">
The accessor to the named slot of an <a href="ec2.htm#ec2-ip-permissions-class-bookmarkxx"><code>ec2-ip-permissions</code></a>.
</p>
<hr>

<hr><h3 id="489"><a name="ec2-ip-permissions-to-port-op-bookmarkxx"></a>ec2-ip-permissions-to-port</h3><h3 id="490">Generic Function</h3><h4 id="491">Package: net.ec2</h4>

<p id="492"><b>Arguments: </b><i>
ec2-ip-permissions
</i></p>

<p id="493">
The accessor to the named slot of an <a href="ec2.htm#ec2-ip-permissions-class-bookmarkxx"><code>ec2-ip-permissions</code></a>.
</p>
<hr>




<hr><h2 id="494"><a name="ec2-volume-2">Appendix B.6 The ec2-volume class</a></h2>

<hr><h3 id="495"><a name="ec2-volume-class-bookmarkxx"></a>ec2-volume</h3><h3 id="496">Class</h3><h4 id="497">Package: net.ec2</h4>

<p id="498">
The class for which some API functions return an
instance. This represents the volume definition, or unit of storage.
</p>
<p id="499">
The predicate that tests whether an object is an ec2-volume is
<a href="ec2.htm#ec2-volume-p-op-bookmarkxx"><b>ec2-volume-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="500">
<a href="ec2.htm#ec2-volume-attachments-op-bookmarkxx"><b>ec2-volume-attachments</b></a>
</li>
<li id="501">
<a href="ec2.htm#ec2-volume-create-time-op-bookmarkxx"><b>ec2-volume-create-time</b></a>
</li>
<li id="502">
<a href="ec2.htm#ec2-volume-id-op-bookmarkxx"><b>ec2-volume-id</b></a>
</li>
<li id="503">
<a href="ec2.htm#ec2-volume-size-op-bookmarkxx"><b>ec2-volume-size</b></a>
</li>
<li id="504">
<a href="ec2.htm#ec2-volume-snapshot-id-op-bookmarkxx"><b>ec2-volume-snapshot-id</b></a>
</li>
<li id="505">
<a href="ec2.htm#ec2-volume-status-op-bookmarkxx"><b>ec2-volume-status</b></a>
</li>
<li id="506">
<a href="ec2.htm#ec2-volume-availability-zone-op-bookmarkxx"><b>ec2-volume-availability-zone</b></a>
</li>
</ul>


<hr>

<hr><h3 id="507"><a name="ec2-volume-p-op-bookmarkxx"></a>ec2-volume-p</h3><h3 id="508">Generic Function</h3><h4 id="509">Package: net.ec2</h4>

<p id="510"><b>Arguments: </b><i>
object
</i></p>

<p id="511">
The predicate for the class <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>, returning
true when the argument is an ec2-volume
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="512"><a name="ec2-volume-attachments-op-bookmarkxx"></a>ec2-volume-attachments</h3><h3 id="513">Generic Function</h3><h4 id="514">Package: net.ec2</h4>

<p id="515"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="516">
The accessor to the named slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>

<hr><h3 id="517"><a name="ec2-volume-create-time-op-bookmarkxx"></a>ec2-volume-create-time</h3><h3 id="518">Generic Function</h3><h4 id="519">Package: net.ec2</h4>

<p id="520"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="521">
The accessor to the named slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>

<hr><h3 id="522"><a name="ec2-volume-id-op-bookmarkxx"></a>ec2-volume-id</h3><h3 id="523">Generic Function</h3><h4 id="524">Package: net.ec2</h4>

<p id="525"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="526">
The accessor to the named slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>

<hr><h3 id="527"><a name="ec2-volume-size-op-bookmarkxx"></a>ec2-volume-size</h3><h3 id="528">Generic Function</h3><h4 id="529">Package: net.ec2</h4>

<p id="530"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="531">
The accessor to the named slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>

<hr><h3 id="532"><a name="ec2-volume-snapshot-id-op-bookmarkxx"></a>ec2-volume-snapshot-id</h3><h3 id="533">Generic Function</h3><h4 id="534">Package: net.ec2</h4>

<p id="535"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="536">
The accessor to the named slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>

<hr><h3 id="537"><a name="ec2-volume-status-op-bookmarkxx"></a>ec2-volume-status</h3><h3 id="538">Generic Function</h3><h4 id="539">Package: net.ec2</h4>

<p id="540"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="541">
The accessor to the named slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>

<hr><h3 id="542"><a name="ec2-volume-availability-zone-op-bookmarkxx"></a>ec2-volume-availability-zone</h3><h3 id="543">Generic Function</h3><h4 id="544">Package: net.ec2</h4>

<p id="545"><b>Arguments: </b><i>
ec2-volume
</i></p>

<p id="546">
(Previously names <b>ec2-volume-zone</b>.)  The accessor to the named
slot of an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
</p>
<hr>



<hr><h2 id="547"><a name="ec2-attachment-2">Appendix B.7 The ec2-attachment class</a></h2>

<hr><h3 id="548"><a name="ec2-attachment-class-bookmarkxx"></a>ec2-attachment</h3><h3 id="549">Class</h3><h4 id="550">Package: net.ec2</h4>

<p id="551">
The class for which some API functions return an instance. This
represents an attached volume on an
instance.
</p>
<p id="552">
The predicate that tests whether an object is an ec2-attachment is
<a href="ec2.htm#ec2-attachment-p-op-bookmarkxx"><b>ec2-attachment-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="553">
<a href="ec2.htm#ec2-attachment-attach-time-op-bookmarkxx"><b>ec2-attachment-attach-time</b></a>
</li>
<li id="554">
<a href="ec2.htm#ec2-attachment-device-op-bookmarkxx"><b>ec2-attachment-device</b></a>
</li>
<li id="555">
<a href="ec2.htm#ec2-attachment-instance-id-op-bookmarkxx"><b>ec2-attachment-instance-id</b></a>
</li>
<li id="556">
<a href="ec2.htm#ec2-attachment-size-op-bookmarkxx"><b>ec2-attachment-size</b></a>
</li>
<li id="557">
<a href="ec2.htm#ec2-attachment-status-op-bookmarkxx"><b>ec2-attachment-status</b></a>
</li>
<li id="558">
<a href="ec2.htm#ec2-attachment-volume-id-op-bookmarkxx"><b>ec2-attachment-volume-id</b></a>
</li>
</ul>


<hr>

<hr><h3 id="559"><a name="ec2-attachment-p-op-bookmarkxx"></a>ec2-attachment-p</h3><h3 id="560">Generic Function</h3><h4 id="561">Package: net.ec2</h4>

<p id="562"><b>Arguments: </b><i>
object
</i></p>

<p id="563">
The predicate for the class <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>, returning
true when the argument is an ec2-attachment
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="564"><a name="ec2-attachment-attach-time-op-bookmarkxx"></a>ec2-attachment-attach-time</h3><h3 id="565">Generic Function</h3><h4 id="566">Package: net.ec2</h4>

<p id="567"><b>Arguments: </b><i>
ec2-attachment
</i></p>

<p id="568">
The accessor to the named slot of an <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>.
</p>
<hr>

<hr><h3 id="569"><a name="ec2-attachment-device-op-bookmarkxx"></a>ec2-attachment-device</h3><h3 id="570">Generic Function</h3><h4 id="571">Package: net.ec2</h4>

<p id="572"><b>Arguments: </b><i>
ec2-attachment
</i></p>

<p id="573">
The accessor to the named slot of an <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>.
</p>
<hr>

<hr><h3 id="574"><a name="ec2-attachment-instance-id-op-bookmarkxx"></a>ec2-attachment-instance-id</h3><h3 id="575">Generic Function</h3><h4 id="576">Package: net.ec2</h4>

<p id="577"><b>Arguments: </b><i>
ec2-attachment
</i></p>

<p id="578">
The accessor to the named slot of an <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>.
</p>
<hr>

<hr><h3 id="579"><a name="ec2-attachment-size-op-bookmarkxx"></a>ec2-attachment-size</h3><h3 id="580">Generic Function</h3><h4 id="581">Package: net.ec2</h4>

<p id="582"><b>Arguments: </b><i>
ec2-attachment
</i></p>

<p id="583">
The accessor to the named slot of an <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>.
</p>
<hr>

<hr><h3 id="584"><a name="ec2-attachment-status-op-bookmarkxx"></a>ec2-attachment-status</h3><h3 id="585">Generic Function</h3><h4 id="586">Package: net.ec2</h4>

<p id="587"><b>Arguments: </b><i>
ec2-attachment
</i></p>

<p id="588">
The accessor to the named slot of an <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>.
</p>
<hr>

<hr><h3 id="589"><a name="ec2-attachment-volume-id-op-bookmarkxx"></a>ec2-attachment-volume-id</h3><h3 id="590">Generic Function</h3><h4 id="591">Package: net.ec2</h4>

<p id="592"><b>Arguments: </b><i>
ec2-attachment
</i></p>

<p id="593">
The accessor to the named slot of an <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a>.
</p>
<hr>



<hr><h2 id="594"><a name="ec2-snapshot-2">Appendix B.8 The ec2-snapshot class</a></h2>


<hr><h3 id="595"><a name="ec2-snapshot-class-bookmarkxx"></a>ec2-snapshot</h3><h3 id="596">Class</h3><h4 id="597">Package: net.ec2</h4>

<p id="598">
The class for which some API functions return an
instance. This represents a snapshot of a volume.
</p>
<p id="599">
The predicate that tests whether an object is an
ec2-snapshot is
<a href="ec2.htm#ec2-snapshot-p-op-bookmarkxx"><b>ec2-snapshot-p</b></a>. The following are accessors
for the slots of this class:
</p>

<ul>
<li id="600">
<a href="ec2.htm#ec2-snapshot-id-op-bookmarkxx"><b>ec2-snapshot-id</b></a>
</li>
<li id="601">
<a href="ec2.htm#ec2-snapshot-progress-op-bookmarkxx"><b>ec2-snapshot-progress</b></a>
</li>
<li id="602">
<a href="ec2.htm#ec2-snapshot-start-time-op-bookmarkxx"><b>ec2-snapshot-start-time</b></a>
</li>
<li id="603">
<a href="ec2.htm#ec2-snapshot-status-op-bookmarkxx"><b>ec2-snapshot-status</b></a>
</li>
<li id="604">
<a href="ec2.htm#ec2-snapshot-volume-id-op-bookmarkxx"><b>ec2-snapshot-volume-id</b></a>
</li>
</ul>


<hr>

<hr><h3 id="605"><a name="ec2-snapshot-p-op-bookmarkxx"></a>ec2-snapshot-p</h3><h3 id="606">Generic Function</h3><h4 id="607">Package: net.ec2</h4>

<p id="608"><b>Arguments: </b><i>
object
</i></p>

<p id="609">
The predicate for the class <a href="ec2.htm#ec2-snapshot-class-bookmarkxx"><code>ec2-snapshot</code></a>, returning
true when the argument is an ec2-snapshot
and <code>nil</code> otherwise.
</p>

<hr>

<hr><h3 id="610"><a name="ec2-snapshot-id-op-bookmarkxx"></a>ec2-snapshot-id</h3><h3 id="611">Generic Function</h3><h4 id="612">Package: net.ec2</h4>

<p id="613"><b>Arguments: </b><i>
ec2-snapshot
</i></p>

<p id="614">
The accessor to the named slot of the snapshot class.
</p>

<hr>

<hr><h3 id="615"><a name="ec2-snapshot-progress-op-bookmarkxx"></a>ec2-snapshot-progress</h3><h3 id="616">Generic Function</h3><h4 id="617">Package: net.ec2</h4>

<p id="618"><b>Arguments: </b><i>
ec2-snapshot
</i></p>

<p id="619">
The accessor to the named slot of the snapshot class.
</p>

<hr>

<hr><h3 id="620"><a name="ec2-snapshot-start-time-op-bookmarkxx"></a>ec2-snapshot-start-time</h3><h3 id="621">Generic Function</h3><h4 id="622">Package: net.ec2</h4>

<p id="623"><b>Arguments: </b><i>
ec2-snapshot
</i></p>

<p id="624">
The accessor to the named slot of the snapshot class.
</p>

<hr>

<hr><h3 id="625"><a name="ec2-snapshot-status-op-bookmarkxx"></a>ec2-snapshot-status</h3><h3 id="626">Generic Function</h3><h4 id="627">Package: net.ec2</h4>

<p id="628"><b>Arguments: </b><i>
ec2-snapshot
</i></p>

<p id="629">
The accessor to the named slot of the snapshot class.
</p>

<hr>

<hr><h3 id="630"><a name="ec2-snapshot-volume-id-op-bookmarkxx"></a>ec2-snapshot-volume-id</h3><h3 id="631">Generic Function</h3><h4 id="632">Package: net.ec2</h4>

<p id="633"><b>Arguments: </b><i>
ec2-snapshot
</i></p>

<p id="634">
The accessor to the named slot of the snapshot class.
</p>

<hr>





<hr><hr><h2 id="635"><a name="ec2-ops-1">Appendix C: EC2 operators</a></h2>

<hr><h2 id="636"><a name="ec2-image-ops-2">Appendix C.1 Image manipulation operators</a></h2>

<hr><h3 id="637"><a name="copy-image-op-bookmarkxx"></a>copy-image</h3><h3 id="638">Function</h3><h4 id="639">Package: net.ec2</h4>

<p id="640"><b>Arguments: </b><i>
source-region source-image-id </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="641">
Copies <i>source-image-id</i>
from <i>source-region</i> to the region specified in
<i>identity</i>. This allows copying AMIs from one
region to another.
</p>

<hr>

<hr><h3 id="642"><a name="register-image-op-bookmarkxx"></a>register-image</h3><h3 id="643">Function</h3><h4 id="644">Package: net.ec2</h4>

<p id="645"><b>Arguments: </b><i>
manifest </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="646">
Register an image with Amazon. <b><i>manifest</i></b>
is the full path to your AMI manifest in Amazon S3 storage, a string.
</p>
<p id="647">
The return value is an image ID, which is unique to the AMI you just
registered.
</p>
<p id="648">
See <a href="ec2.htm#deregister-image-op-bookmarkxx"><b>deregister-image</b></a>.
</p>
<hr>
	
<hr><h3 id="649"><a name="describe-images-op-bookmarkxx"></a>describe-images</h3><h3 id="650">Function</h3><h4 id="651">Package: net.ec2</h4>

<p id="652"><b>Arguments: </b><i>
</i>&amp;key <i>image-id owner executable-by</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="653">
Return a list of available images (<a href="ec2.htm#ec2-image-class-bookmarkxx"><code>ec2-image</code></a>
instances). The search can be narrowed by supplying any of the keyword
arguments.
</p>
<p id="654">
<b><i>image-id</i></b> is a list of image IDs to use in
the search. It is a list of strings, or a single string.
</p>
<p id="655">
<b><i>owner</i></b> is a list of owners to use in the
search. It is a list of strings, or a single string.
</p>
<p id="656">
<b><i>executable-by</i></b> is a list which specific
users have access. It is a list of strings, or a single string.
</p>
<hr>

<hr><h3 id="657"><a name="deregister-image-op-bookmarkxx"></a>deregister-image</h3><h3 id="658">Function</h3><h4 id="659">Package: net.ec2</h4>

<p id="660"><b>Arguments: </b><i>
image-id </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>


<p id="661">
Deregister an image,
where <b><i>image-id</i></b> is the image instance
returned by a call to <a href="ec2.htm#register-image-op-bookmarkxx"><b>register-image</b></a> or <a href="ec2.htm#describe-images-op-bookmarkxx"><b>describe-images</b></a>.
</p>
<p id="662">
Returns <code>t</code> upon success.
</p>
<hr>




<hr><h2 id="663"><a name="ops-instance-manip-2">Appendix C.2 Instance manipulation operators</a></h2>

<p id="664">
See <a href="#instance-manipulation-ops-1">Section 5.0 Functions for instance manipulation</a> for
more information and examples.
</p>

<hr><h3 id="665"><a name="run-instances-op-bookmarkxx"></a>run-instances</h3><h3 id="666">Function</h3><h4 id="667">Package: net.ec2</h4>

<p id="668"><b>Arguments: </b><i>
image-id min-count max-count </i>&amp;key <i>wait verbose identity region instance-type kernel-id ramdisk-id availability-zone</i><i>
</i></p>

<p id="669">
Runs one or more instances on the cloud.  Upon success returns a list
of <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a> instances.
</p>
<p id="670">
<b><i>image-id</i></b> is a string naming an
image. <b><i>min-count</i></b>
and <b><i>max-count</i></b> are
numbers. If <i>min-count</i> cannot be launched, none
are launched. No more than <i>max-count</i> will be
launched but the number actually launched may be less
than <i>max-count</i>.
</p>
<p id="671">
The keyword arguments are:
</p>
<ul>
<li id="672">
<b><i>wait</i></b>: if specified true, wait for the
instance to start and become available. If <i>wait</i>
is <code>nil</code>, then this function returns
immediately, even before the newly run instance is usable.
</li>
<li id="673">
<b><i>verbose</i></b>: if specified true, messages about
the operation of the function are printed. Especially useful with
<code>:wait t</code>.
</li>
<li id="674">
<b><i>identity</i></b>: this argument specifies how
the instance will be accessed after it has started. Without it,
you could create an orphaned image--you would need to use the EC2
comand line tools or some other means to terminate the instance.
</li>
<li id="675">
<b><i>region</i></b> specifies the
region. If <i>identity</i> is also specified, it must be
associated with <i>region</i>
if <i>region</i> is also specified and the value of
<i>region</i> defaults to the region associated with the
specified <i>identity</i>.
</li>
<li id="676">
<b><i>instance-type</i></b> specifies what type of
instance you would like. For example, "m1.large" or "m1.xlarge".
</li>
<li id="677">
<b><i>kernel-id</i></b>, <b><i>ramdisk-id</i></b>
and <b><i>availability-zone</i></b>: these can be
supplied to change the what and where the instance runs.
</li>
</ul>

<hr>

<hr><h3 id="678"><a name="describe-instances-op-bookmarkxx"></a>describe-instances</h3><h3 id="679">Function</h3><h4 id="680">Package: net.ec2</h4>

<p id="681"><b>Arguments: </b><i>
</i>&amp;key  (<i>states</i> (quote (:running :shutting-down :pending)))<i> identity instances region</i><i>
</i></p>


<p id="682">
Return a list of instances running in the cloud after updating the
cached information in Lisp. The keywords can narrow the result, which
is a list of <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a> instances.
</p>
<p id="683">
One of <i>instance</i> and <i>identity</i>
must be specified. If instance is specified,
the <i>region</i> and <i>identity</i> are
inferred, so they should not be specified (as they will be either
redundant or incorrect).
</p>
<p id="684">
<b><i>states</i></b> specifies which states to
consider. Valid values are: <code>:running</code>,
<code>:shutting-down</code>, <code>:pending</code> and
<code>:terminated</code>. These values are determined by the
EC2 API, given here:
<a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html">http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-lifecycle.html</a>,
and are just keyword versions of the strings used to represent these
states in the EC2 API.
</p>
<p id="685">
<b><i>identity</i></b> specifies which identity to use
for the API access. Should not be specified
if <i>instance</i> is.
</p>
<p id="686">
The argument <b><i>region</i></b> specifies the
region. If <i>identity</i> is also specified, it must be
associated with <i>region</i>
if <i>region</i> is also specified and the value of
<i>region</i> defaults to the region associated with the
specified <i>identity</i>. Should not be specified
if <i>instance</i> is.
</p>
<p id="687">
<b><i>instances</i></b> narrows the search to a specific
set of instances. This is useful because the data in Lisp
representing running instances does grow stale over time, and the
state of a running instance changes.
</p>

<hr>

<hr><h3 id="688"><a name="terminate-instances-op-bookmarkxx"></a>terminate-instances</h3><h3 id="689">Function</h3><h4 id="690">Package: net.ec2</h4>

<p id="691"><b>Arguments: </b><i>
instances </i>&amp;key <i>verbose</i><i>
</i></p>


<p id="692">
Terminate the set of instances given
by <b><i>instances</i></b>, which should be a single
instance of a list of instances, all of class <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>s.
</p>
<p id="693">
If <b><i>verbose</i></b> is specified true, additional
information will be printed.
</p>
<p id="694">
Returns a list of status information for each terminated instance.
</p>

<hr>




<hr><h2 id="695"><a name="key-pair-ops-2">Appendix C.3 Key pair manipulation operators</a></h2>

<p id="696">
See <a href="#key-pair-manipulation-1">Section 6.0 Functions for key pair manipulation</a> for more
information and examples using the functions defined in this section.
</p>

<hr><h3 id="697"><a name="create-key-pair-op-bookmarkxx"></a>create-key-pair</h3><h3 id="698">Function</h3><h4 id="699">Package: net.ec2</h4>

<p id="700"><b>Arguments: </b><i>
key-name </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="701">
Create a new 2048 bit RSA key pair, used when lauching new
instances, and subsequent access thereafter. On success, return a
list of key name, key fingerprint (SHA-1 digest of the DER encoded
private key) and the key material (an unencrypted PEM encoded RSA
private key).
</p>
<p id="702">
The third list item, the PEM encoded RSA private key can be used as
the contents for the file pointed to by
<a href="ec2.htm#s_default-ssh-identity-file_s-var-bookmarkxx"><code>*default-ssh-identity-file*</code></a>. The key-name
can be used as the value of the variable <a href="ec2.htm#s_aws-keypair-name_s-var-bookmarkxx"><code>*aws-keypair-name*</code></a>.
</p>
<hr>

<hr><h3 id="703"><a name="describe-key-pairs-op-bookmarkxx"></a>describe-key-pairs</h3><h3 id="704">Function</h3><h4 id="705">Package: net.ec2</h4>

<p id="706"><b>Arguments: </b><i>
</i>&amp;key <i>key-names</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="707">
Retrieve the active key pairs and return a list
of <a href="ec2.htm#ec2-key-class-bookmarkxx"><code>ec2-key</code></a> instances, after updating the
information cached in Lisp about them.
</p>
<hr>

<hr><h3 id="708"><a name="delete-key-pair-op-bookmarkxx"></a>delete-key-pair</h3><h3 id="709">Function</h3><h4 id="710">Package: net.ec2</h4>

<p id="711"><b>Arguments: </b><i>
key-name </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="712">
Delete the key pair given by <b><i>key-name</i></b>.
Returns <code>t</code> upon success.
</p>
<hr>



<hr><h2 id="713"><a name="security-manipulation-ops-2">Appendix C.4 Security manipulation operators</a></h2>

<p id="714">
See <a href="#security-manipulation-1">Section 7.0 Functions for security manipulation</a> for more
information and examples using the functions defined in this section.
</p>

<hr><h3 id="715"><a name="create-security-group-op-bookmarkxx"></a>create-security-group</h3><h3 id="716">Function</h3><h4 id="717">Package: net.ec2</h4>

<p id="718"><b>Arguments: </b><i>
name description </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="719">
Creates a new security group named <b><i>name</i></b>
with description `description', both strings.
Returns <code>t</code> upon success.
</p>

<hr>

<hr><h3 id="720"><a name="describe-security-groups-op-bookmarkxx"></a>describe-security-groups</h3><h3 id="721">Function</h3><h4 id="722">Package: net.ec2</h4>

<p id="723"><b>Arguments: </b><i>
</i>&amp;key <i>group-names</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="724">
Returns a list of security groups, instances of <a href="ec2.htm#ec2-security-group-class-bookmarkxx"><code>ec2-security-group</code></a>,
after updating the information cached in Lisp about
them. If <i>group-names</i> is specified, only those
will be updated and returned.
</p>

<hr>

<hr><h3 id="725"><a name="delete-security-group-op-bookmarkxx"></a>delete-security-group</h3><h3 id="726">Function</h3><h4 id="727">Package: net.ec2</h4>

<p id="728"><b>Arguments: </b><i>
name </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>


<p id="729">
Deletes a security group named <b><i>name</i></b>.
Returns <code>t</code> upon success.
</p>

<hr>

<hr><h3 id="730"><a name="authorize-security-group-ingress-op-bookmarkxx"></a>authorize-security-group-ingress</h3><h3 id="731">Function</h3><h4 id="732">Package: net.ec2</h4>

<p id="733"><b>Arguments: </b><i>
name </i>&amp;key  (<i>identity</i> *default-identity*)<i> ip-protocol from-port to-port cidr-ip</i><i>
</i></p>


<p id="734">
Modify security group <b><i>name</i></b> by the actions
specified in the given keyword arguments. There are two types of
authorization: user/group pair permission and CIDR IP permission.
</p>
<h3 id="735">
user/group pair permission:
</h3>
<p id="736">
<b><i>source-group-name</i></b> and
<b><i>source-group-owner-id</i></b> are used to add an
owner to a group.
</p>
<h3 id="737">
CIDR IP permission:
</h3>
<p id="738">
<b><i>ip-protocol</i></b> is the protocol for the
authorization, one
of <code>:tcp</code>, <code>:udp</code>,
or <code>:icmp</code>. The default protocol
is <code>:tcp</code>.
</p>
<p id="739">
<b><i>from-port</i></b>
and <b><i>to-port</i></b> are the source and destination
ports, both integers.
</p>
<p id="740">
<b><i>cidr-ip</i></b> is the IP range, a string. For
example, "0.0.0.0/0" for all IP addresses, the default.
</p>

<hr>

<hr><h3 id="741"><a name="revoke-security-group-ingress-op-bookmarkxx"></a>revoke-security-group-ingress</h3><h3 id="742">Function</h3><h4 id="743">Package: net.ec2</h4>

<p id="744"><b>Arguments: </b><i>
name </i>&amp;key  (<i>identity</i> *default-identity*)<i> ip-protocol from-port to-port cidr-ip</i><i>
</i></p>



<p id="745">
This function is the inverse of <a href="ec2.htm#authorize-security-group-ingress-op-bookmarkxx"><b>authorize-security-group-ingress</b></a>, revoking
any authorization granted by previous calls to that function.
</p>

<hr>



<hr><h2 id="746"><a name="elastic-address-manip-ops-2">Appendix C.5 Elastic IP address manipulation operators</a></h2>

<p id="747">
See <a href="#functions-elastic-address-manipulation-1">Section 8.0 Functions for Elastic IP address manipulation</a>
for more information and examples.
</p>

<hr><h3 id="748"><a name="allocate-address-op-bookmarkxx"></a>allocate-address</h3><h3 id="749">Function</h3><h4 id="750">Package: net.ec2</h4>

<p id="751"><b>Arguments: </b><i>
</i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="752">
Allocates an Elastic, or static, IP address
for <b><i>identity</i></b>, which defaults
to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>. It is returned as a
string, if successful.
</p>

<hr>

<hr><h3 id="753"><a name="describe-addresses-op-bookmarkxx"></a>describe-addresses</h3><h3 id="754">Function</h3><h4 id="755">Package: net.ec2</h4>

<p id="756"><b>Arguments: </b><i>
</i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="757">
Returns a list of the current mapping of IP to AMI
for <b><i>identity</i></b> (defaults
to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>) in a list.
</p>

<hr>

<hr><h3 id="758"><a name="release-address-op-bookmarkxx"></a>release-address</h3><h3 id="759">Function</h3><h4 id="760">Package: net.ec2</h4>

<p id="761"><b>Arguments: </b><i>
ip </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="762">
Release an elastic IP address for <b><i>identity</i></b>,
given by <b><i>ip</i></b>, a
string. <i>identity</i> defaults to
<a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>.
</p>

<hr>

<hr><h3 id="763"><a name="associate-address-op-bookmarkxx"></a>associate-address</h3><h3 id="764">Function</h3><h4 id="765">Package: net.ec2</h4>

<p id="766"><b>Arguments: </b><i>
instance ip
</i></p>

<p id="767">
Associate IP <b><i>ip</i></b>, a string, with 
<b><i>instance</i></b> (an <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>). Returns
<code>t</code> if successful. The relevant region
(see <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>) is inferred from
the <i>instance</i>.
</p>

<hr>

<hr><h3 id="768"><a name="disassociate-address-op-bookmarkxx"></a>disassociate-address</h3><h3 id="769">Function</h3><h4 id="770">Package: net.ec2</h4>

<p id="771"><b>Arguments: </b><i>
ip </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="772">
Disassociates IP <b><i>ip</i></b>' from whatever
instance it is associated with in <b><i>identity</i></b>,
which defaults to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>. Returns <code>t</code>
if successful.
</p>

<hr>



<hr><h2 id="773"><a name="ebs-manipulation-ops-2">Appendix C.6 Functionality for EBS manipulation</a></h2>

<p id="774">
See <a href="#ebs-manipulation-1">Section 9.0 Functions for EBS manipulation</a> for further
information and an example using these functions.
</p>


<hr><h3 id="775"><a name="create-volume-op-bookmarkxx"></a>create-volume</h3><h3 id="776">Function</h3><h4 id="777">Package: net.ec2</h4>

<p id="778"><b>Arguments: </b><i>
availability-zone </i>&amp;key <i>size snapshot</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="779">

Create a volume in <b><i>availability-zone</i></b>,
which should be a string naming an availability-zone (see
<a href="ec2.htm#describe-availability-zones-op-bookmarkxx"><b>describe-availability-zones</b></a>), with
specified <b><i>size</i></b> (a number of gigabytes) or
with data from a snapshot you own given
by <b><i>snapshot</i></b>,
in <b><i>identity</i></b>, which defaults
to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>. Only one of the
arguments <i>size</i> or <i>snapshot</i>
can be given.
</p>

<hr>

<hr><h3 id="780"><a name="describe-volumes-op-bookmarkxx"></a>describe-volumes</h3><h3 id="781">Function</h3><h4 id="782">Package: net.ec2</h4>

<p id="783"><b>Arguments: </b><i>
</i>&amp;key <i>volumes</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="784">
return a list of all active volumes (if <i>volumes</i>
is unspecified) or a list of volumes specified
by <i>volumes</i> in <b><i>identity</i></b>,
which defaults to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>. 
<b><i>volumes</i></b>,
if specified, should be a list of <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>
instances. Returns a list of <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a> instances.
</p>

<hr>

<hr><h3 id="785"><a name="delete-volume-op-bookmarkxx"></a>delete-volume</h3><h3 id="786">Function</h3><h4 id="787">Package: net.ec2</h4>

<p id="788"><b>Arguments: </b><i>
volume </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="789">
Delete the given volume in <b><i>identity</i></b>, which
defaults to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>. <b><i>volume</i></b>
must be of type <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>.
Returns <code>t</code> if successful.
</p>

<hr>

<hr><h3 id="790"><a name="attach-volume-op-bookmarkxx"></a>attach-volume</h3><h3 id="791">Function</h3><h4 id="792">Package: net.ec2</h4>

<p id="793"><b>Arguments: </b><i>
volume instance device
</i></p>

<p id="794">
Attach <i>volume</i> (an <a href="ec2.htm#ec2-volume-class-bookmarkxx"><code>ec2-volume</code></a>)
to <i>instance</i> (an <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>) giving it
the name <i>device</i> (a string). The relevant region
(see <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>) is inferred from
the <i>instance</i>.
</p>
<p id="795">
Returns an instance of
<a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a> if successful.
</p>

<hr>

<hr><h3 id="796"><a name="detach-volume-op-bookmarkxx"></a>detach-volume</h3><h3 id="797">Function</h3><h4 id="798">Package: net.ec2</h4>

<p id="799"><b>Arguments: </b><i>
volume instance </i>&amp;key <i>device force</i><i>
</i></p>

<p id="800">
Detach <b><i>volume</i></b>
on <b><i>instance</i></b> in the region
(see <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>) inferred from
the <i>instance</i>. If <b><i>device</i></b>
is given, only detach if <i>volume</i> is attached using
that device name. If
<b><i>force</i></b> is specified
non-<code>nil</code>, detach even if in use. Returns an
instance of <a href="ec2.htm#ec2-attachment-class-bookmarkxx"><code>ec2-attachment</code></a> if successful.
</p>

<hr>

<hr><h3 id="801"><a name="create-snapshot-op-bookmarkxx"></a>create-snapshot</h3><h3 id="802">Function</h3><h4 id="803">Package: net.ec2</h4>

<p id="804"><b>Arguments: </b><i>
volume </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="805">
Create a snapshot of <b><i>volume</i></b>
in <b><i>identity</i></b> (which defaults
to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>), returning an
<a href="ec2.htm#ec2-snapshot-class-bookmarkxx"><code>ec2-snapshot</code></a> if successful.
</p>

<hr>

<hr><h3 id="806"><a name="describe-snapshots-op-bookmarkxx"></a>describe-snapshots</h3><h3 id="807">Function</h3><h4 id="808">Package: net.ec2</h4>

<p id="809"><b>Arguments: </b><i>
</i>&amp;key <i>snapshots</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="810">
Returns a list of description of all current snapshots
in <b><i>identity</i></b> (which defaults
to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>), or of those specified
by <b><i>snapshots</i></b> if specified, after updating
the information cached in Lisp about them. Returns a list
of <a href="ec2.htm#ec2-snapshot-class-bookmarkxx"><code>ec2-snapshot</code></a> instances.
</p>

<hr>

<hr><h3 id="811"><a name="delete-snapshot-op-bookmarkxx"></a>delete-snapshot</h3><h3 id="812">Function</h3><h4 id="813">Package: net.ec2</h4>

<p id="814"><b>Arguments: </b><i>
snapshot </i>&amp;key  (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="815">
Delete the given <b><i>snapshot</i></b>
in <b><i>identity</i></b>, which defaults
to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>.
Returns <code>t</code> if successful.
</p>

<hr>





<hr><h2 id="816"><a name="ec2-high-level-ops-2">Appendix C.7 High-level operators</a></h2>

<p id="817">
See <a href="#high-level-funs-1">Section 10.0 High-level EC2 functions</a> for more
information on these functions.
</p>

<hr><h3 id="818"><a name="wait-for-instances-op-bookmarkxx"></a>wait-for-instances</h3><h3 id="819">Function</h3><h4 id="820">Package: net.ec2</h4>

<p id="821"><b>Arguments: </b><i>
instances </i>&amp;key  (<i>state</i> :running)<i> verbose</i> (<i>sleep</i> 2)<i> identity</i><i>
</i></p>

<p id="822">
Wait for <b><i>instances</i></b> to enter a particular
<b><i>state</i></b>. <i>instances</i> can
be a single instance of a list of instances (see <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>). The
relevant regions (see <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>) is inferred from
the <i>instances</i>, as are the relevant identities
(see <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>).
</p>
<p id="823">
<b><i>state</i></b> is a keyword identifying the state
the instances should be in when this function returns. The default
is <code>:running</code>. See <a href="ec2.htm#describe-instances-op-bookmarkxx"><b>describe-instances</b></a> for
other possible values for state (we list the possible values in one
place only so changes can most easily be tracked consistently.)
</p>
<p id="824">
<b><i>verbose</i></b> causes reports sent to
<a href="../ansicl/dictentr/terminal.htm"><code>*terminal-io*</code></a> of the
actions performed.
</p>
<p id="825">
<b><i>sleep</i></b> specifies the query period.
</p>
<p id="826">
<b><i>identity</i></b> specifies which identity to use
for the API access.
</p>
<p id="827">
When the instances are in the new state, this function returns a list
of the newly made instances of type <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>. New
instances are returned rather than the argument list of instances
because the status of various slots in those objects could have
different values.
</p>

<hr>

<hr><h3 id="828"><a name="wait-for-instance-op-bookmarkxx"></a>wait-for-instance</h3><h3 id="829">Function</h3><h4 id="830">Package: net.ec2</h4>

<p id="831"><b>Arguments: </b><i>
instance </i>&amp;key  (<i>state</i> :running)<i> verbose</i> (<i>sleep</i> 2)<i> identity</i><i>
</i></p>

<p id="832">
Wait for <b><i>instance</i></b> to enter a particular
<b><i>state</i></b>. <i>instance</i> must be a single instance (see <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>). The relevant region
(see <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>) is inferred from
the <i>instance</i>, as are the relevant identity
(see <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>).
</p>
<p id="833">
<b><i>state</i></b> is a keyword identifying the state
the instance should be in when this function returns. The default
is <code>:running</code>. See <a href="ec2.htm#describe-instances-op-bookmarkxx"><b>describe-instances</b></a> for
other possible values for state (we list the possible values in one
place only so changes can most easily be tracked consistently.)
</p>
<p id="834">
<b><i>verbose</i></b> causes reports sent to
<a href="../ansicl/dictentr/terminal.htm"><code>*terminal-io*</code></a> of the
actions performed.
</p>
<p id="835">
<b><i>sleep</i></b> specifies the query period.
</p>
<p id="836">
<b><i>identity</i></b> specifies which identity to use
for the API access.
</p>
<p id="837">
When the instance is in the new state, this function returns a newly
made instance of type <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>. A new instance is returned
rather than the argument instance because the status of
various slots could have different values.
</p>

<hr>

<hr><h3 id="838"><a name="query-status-op-bookmarkxx"></a>query-status</h3><h3 id="839">Function</h3><h4 id="840">Package: net.ec2</h4>

<p id="841"><b>Arguments: </b><i>
instance
</i></p>

<p id="842">
Return two values: the status of <b><i>instance</i></b>,
and a new copy of the instance, just in case it changed. The relevant
region (see <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>) is inferred from
the <i>instance</i>, as is the relevant identity
(see <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>).
</p>
<p id="843">
<b><i>identity</i></b> specifies which identity to use
for the API access.
</p>

<hr>

<hr><h3 id="844"><a name="query-load-op-bookmarkxx"></a>query-load</h3><h3 id="845">Function</h3><h4 id="846">Package: net.ec2</h4>

<p id="847"><b>Arguments: </b><i>
instance
</i></p>


<p id="848">
Return as multiple values the three values printed by
the <b>/usr/bin/uptime</b> command.
</p>
<p id="849">
This function requires SSH access and only works with Linux guest
operating system.
</p>

<hr>

<hr><h3 id="850"><a name="query-memory-op-bookmarkxx"></a>query-memory</h3><h3 id="851">Function</h3><h4 id="852">Package: net.ec2</h4>

<p id="853"><b>Arguments: </b><i>
instance
</i></p>

<p id="854">
Return two values: the used and free memory as reported by the
<b>/usr/bin/free</b> command.
</p>
<p id="855">
This function requires SSH access and only works with Linux guest
operating system.
</p>

<hr>

<hr><h3 id="856"><a name="ssh-command-output-op-bookmarkxx"></a>ssh-command-output</h3><h3 id="857">Function</h3><h4 id="858">Package: net.ec2</h4>

<p id="859"><b>Arguments: </b><i>
instance command </i>&amp;key <i>  &amp;allow-other-keys
</i></p>
<p id="860">
This function is just
like <a href="os-interface.htm#command-output-op-bookmarkxx"><b>excl.osi:command-output</b></a>, except
it takes an additional required argument (the first), which is the
instance on which to execute the command via ssh.
</p>

<hr>

<hr><h3 id="861"><a name="ssh-copy-file-op-bookmarkxx"></a>ssh-copy-file</h3><h3 id="862">Function</h3><h4 id="863">Package: net.ec2</h4>

<p id="864"><b>Arguments: </b><i>
instance local-file remote-file </i>&amp;key  (<i>preserve-time</i> t)<i> recurse</i><i>  &amp;allow-other-keys
</i></p>

<p id="865">
Copy <b><i>local-file</i></b> to the pathname relative
to <b><i>instance</i></b> using
name <b><i>remote-file</i></b>.  All keywords to
<a href="os-interface.htm#command-output-op-bookmarkxx"><b>excl.osi:command-output</b></a> are also
accepted.  <b><i>preserve-time</i></b>
and <b><i>recurse</i></b> correspond to the -p and -r
scp command line arguments.
</p>

<hr>





<hr><h2 id="866"><a name="ec2-misc-ops-2">Appendix C.8 Miscellaneous operators</a></h2>

<p id="867">
See <a href="#misc-ops-1">Section 11.0 Miscellaneous functions</a> for more information and
examples.
</p>


<hr><h3 id="868"><a name="describe-availability-zones-op-bookmarkxx"></a>describe-availability-zones</h3><h3 id="869">Function</h3><h4 id="870">Package: net.ec2</h4>

<p id="871"><b>Arguments: </b><i>
</i>&amp;key <i>zone-names</i> (<i>identity</i> *default-identity*)<i>
</i></p>

<p id="872">
Returns a list of availability zones and their current
status. <b><i>zone-names</i></b>, which must be a single
name or a list of names, can be used to narrow the return value search
to a specific set of zone names. identity specifies the region and
defaults to <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a>.
</p>
<hr>


<hr><h3 id="873"><a name="get-console-output-op-bookmarkxx"></a>get-console-output</h3><h3 id="874">Function</h3><h4 id="875">Package: net.ec2</h4>

<p id="876"><b>Arguments: </b><i>
instance 
</i></p>

<p id="877">
Return the console output from <b><i>instance</i></b>,
as a string. The relevant region is inferred from
the <i>instance</i>.
</p>
<p id="878">
The actual return value is a dotted cons of the time the
output was last updated and a string containing the output. If no
output is yet available, then <code>nil</code> is returned
for the string.
</p>
<p id="879">
The time is in Common Lisp universal time.
</p>
<p id="880">
The return value from the EC2 API is a base64 string. This function
converts the base64 to a human readable string.
</p>

<hr>

<hr><h3 id="881"><a name="reboot-instances-op-bookmarkxx"></a>reboot-instances</h3><h3 id="882">Function</h3><h4 id="883">Package: net.ec2</h4>

<p id="884"><b>Arguments: </b><i>
instances </i>&amp;key <i>verbose</i><i>
</i></p>

<p id="885">
Reboots the specified instances (a single instance or a list of
instances of class <a href="ec2.htm#ec2-instance-class-bookmarkxx"><code>ec2-instance</code></a>). Returns <code>t</code>
if successful.
</p>
<p id="886">
If <b><i>verbose</i></b> is specified true, additional
information will be printed.
</p>

<hr>

<hr><h3 id="887"><a name="describe-regions-op-bookmarkxx"></a>describe-regions</h3><h3 id="888">Function</h3><h4 id="889">Package: net.ec2</h4>

<p id="890"><b>Arguments: </b><i>
</i> &amp;rest <i>region-names</i><i>
</i></p>

<p id="891">
Returns a list of regions and (possibly) their url.
</p>
<p id="892">
<b><i>region-names</i></b> can be used to narrow the
return value search to a specific set of region names.
</p>

<hr>

<hr><h3 id="893"><a name="find-region-by-name-op-bookmarkxx"></a>find-region-by-name</h3><h3 id="894">Function</h3><h4 id="895">Package: net.ec2</h4>

<p id="896"><b>Arguments: </b><i>
substring </i>&amp;key  (<i>if-does-not-exist</i> :error)<i>
</i></p>

<p id="897">
This function returns an <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a> instance corresponding to the
region named by the <b><i>substring</i></b> argument.
If no region can be found with that matching that name, as a
substring, the result depends on the value of
the <b><i>if-does-not-exist</i></b> keyword argument,
which can have the following values:
</p>
<ul>
<li id="898">
<code>:error</code> (the default): an error is signaled
</li>
<li id="899">
non-<code>nil</code> but not <code>:error</code>: a
warning is signaled, <code>nil</code> is returned
</li>
<li id="900">
<code>nil</code>: <code>nil</code> is returned
</li>
</ul>

<hr>






<hr><hr><h2 id="901"><a name="ec2-other-1">Appendix D: EC2 other functionality: ec2-region, ec2-identity, and ec2-error</a></h2>

<hr><h3 id="902"><a name="ec2-region-class-bookmarkxx"></a>ec2-region</h3><h3 id="903">Class</h3><h4 id="904">Package: net.ec2</h4>

<p id="905">
This is the class for ec2-regions. You can have several regions and
have an identy for each region. ec2-instances have a region slot and
the region can be inferred from an instance. There are several
variables holding region objects and new regions can be created with
<a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>,
specifying the name and the URL (both of which are defined by
Amazon). Here is an example:
</p>

<pre id="906">
(make-instance 'ec2-region :region-name "us-east-1" 
                 :region-url "https://ec2.amazonaws.com/")
</pre>

<p id="907">
The variable <a href="ec2.htm#s_default-identity_s-var-bookmarkxx"><code>*default-identity*</code></a> can be used to specify
the default value of the <i>region</i> keyword argument
to many functions. The value of the variable <a href="ec2.htm#s_all-regions_s-var-bookmarkxx"><code>*all-regions*</code></a> is a list
of all operating regions.
</p>

<hr>

<p id="908">
There are two accessors to <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a> slots:
</p>

<hr><h3 id="909"><a name="ec2-region-name-op-bookmarkxx"></a>ec2-region-name</h3><h3 id="910">Generic Function</h3><h4 id="911">Package: net.ec2</h4>

<p id="912"><b>Arguments: </b><i>
ec2-region
</i></p>

<p id="913">
The official EC2 name of the region (e.g.,
"us-west-1"). See <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>.
</p>

<hr>

<hr><h3 id="914"><a name="ec2-region-endpoint-op-bookmarkxx"></a>ec2-region-endpoint</h3><h3 id="915">Generic Function</h3><h4 id="916">Package: net.ec2</h4>

<p id="917"><b>Arguments: </b><i>
ec2-region
</i></p>

<p id="918">
Accessor for the endpoint slot of the argument <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>.
</p>

<hr>

<hr><h3 id="919"><a name="ec2-region-uri-op-bookmarkxx"></a>ec2-region-uri</h3><h3 id="920">Generic Function</h3><h4 id="921">Package: net.ec2</h4>

<p id="922"><b>Arguments: </b><i>
ec2-region
</i></p>

<p id="923">
The default method of this generic function computes the URI for the
endpoint of of the ec2-region instance. It works essentially as
follows:
</p>

<pre id="924">
     (net.uri:parse-uri
       (format nil "https://~a/" (ec2-region-endpoint region)))
</pre>

<p id="925">
See <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>.
</p>

<hr>

<p id="926">
The predicate for ec2-region is:
</p>

<hr><h3 id="927"><a name="ec2-region-p-op-bookmarkxx"></a>ec2-region-p</h3><h3 id="928">Generic Function</h3><h4 id="929">Package: net.ec2</h4>

<p id="930"><b>Arguments: </b><i>
object
</i></p>

<p id="931">
Returns true if <b><i>object</i></b> is an instance
of <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>. Returns <code>nil</code>
otherwise.
</p>

<hr>

<p id="932">
The following variables are predefined regions.
</p>

<hr><h3 id="933"><a name="s_region-us-east_s-var-bookmarkxx"></a>*region-us-east*</h3><h3 id="934">Variable</h3><h4 id="935">Package: net.ec2</h4>

<p id="936">
This variable has been removed. See <a href="ec2.htm#find-region-by-name-op-bookmarkxx"><b>find-region-by-name</b></a> and
<a href="ec2.htm#s_all-regions_s-var-bookmarkxx"><code>*all-regions*</code></a> which can be used to get
region objects.
</p>

<hr>


<hr><h3 id="937"><a name="s_region-us-west_s-var-bookmarkxx"></a>*region-us-west*</h3><h3 id="938">Variable</h3><h4 id="939">Package: net.ec2</h4>

<p id="940">
This variable has been removed. See <a href="ec2.htm#find-region-by-name-op-bookmarkxx"><b>find-region-by-name</b></a> and
<a href="ec2.htm#s_all-regions_s-var-bookmarkxx"><code>*all-regions*</code></a> which can be used to get
region objects.
</p>

<hr>

<hr><h3 id="941"><a name="s_region-eu-west_s-var-bookmarkxx"></a>*region-eu-west*</h3><h3 id="942">Variable</h3><h4 id="943">Package: net.ec2</h4>

<p id="944">
This variable has been removed. See <a href="ec2.htm#find-region-by-name-op-bookmarkxx"><b>find-region-by-name</b></a> and
<a href="ec2.htm#s_all-regions_s-var-bookmarkxx"><code>*all-regions*</code></a> which can be used to get
region objects.
</p>

<hr>

<hr><h3 id="945"><a name="s_region-ap-southeast_s-var-bookmarkxx"></a>*region-ap-southeast*</h3><h3 id="946">Variable</h3><h4 id="947">Package: net.ec2</h4>

<p id="948">
This variable has been removed. See <a href="ec2.htm#find-region-by-name-op-bookmarkxx"><b>find-region-by-name</b></a> and
<a href="ec2.htm#s_all-regions_s-var-bookmarkxx"><code>*all-regions*</code></a> which can be used to get
region objects.
</p>

<hr>

<hr><h3 id="949"><a name="s_default-region_s-var-bookmarkxx"></a>*default-region*</h3><h3 id="950">Variable</h3><h4 id="951">Package: net.ec2</h4>

<p id="952">
This variable can be set to an <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a> instance. 
</p>

<hr>

<hr><h3 id="953"><a name="s_all-regions_s-var-bookmarkxx"></a>*all-regions*</h3><h3 id="954">Variable</h3><h4 id="955">Package: net.ec2</h4>

<p id="956">
A list of all operating regions. See <a href="ec2.htm#ec2-region-class-bookmarkxx"><code>ec2-region</code></a>
and <a href="ec2.htm#find-region-by-name-op-bookmarkxx"><b>find-region-by-name</b></a>.
</p>

<hr>

<h3 id="957">
ec2-identity
</h3>

<hr><h3 id="958"><a name="ec2-identity-class-bookmarkxx"></a>ec2-identity</h3><h3 id="959">Class</h3><h4 id="960">Package: net.ec2</h4>


<p id="961">
This is the class for ec2-identities. Identities are
region-specific. You create an identity and associate it with a
region.  The slots are <code>access-key</code>,
<code>secret-access-key</code>, <code>account-number</code>,
<code>certificate</code>,
<code>private-key</code>, <code>keypair-name</code>, 
<code>ssh-user</code>,
and <code>ssh-identity-file</code>. See
<a href="#ec2-requirements-1">Section 2.0 EC2 setup and requirements</a> for information of
initializing the EC2 API. You create and identity instance with
<a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>, as always with
CLOS objects:
</p>

<pre id="962">
(make-instance 'ec2-identity)
</pre>

<hr>

<hr><h3 id="963"><a name="s_default-identity_s-var-bookmarkxx"></a>*default-identity*</h3><h3 id="964">Variable</h3><h4 id="965">Package: net.ec2</h4>

<p id="966">
This variable can be set to an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> instance. It serves as the
default for the <i>identity</i> keyword argument to many
functions. This variable should be set when you use the EC2 interface.
</p>

<hr>

<p id="967">
This function will copy ec2-identity instances:
</p>

<hr><h3 id="968"><a name="copy-ec2-identity-op-bookmarkxx"></a>copy-ec2-identity</h3><h3 id="969">Function</h3><h4 id="970">Package: net.ec2</h4>

<p id="971"><b>Arguments: </b><i>
ec2-identity </i>&amp;key <i>ssh-identity-file ssh-user keypair-name region</i><i>
</i></p>


<p id="972">
This function allows for an easy method for creating an identity
in a different region, etc, while starting with an existing
instance.
</p>

<hr>

<p id="973">
These are the accessors to <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a> slots:
</p>

<hr><h3 id="974"><a name="ec2-identity-region-op-bookmarkxx"></a>ec2-identity-region</h3><h3 id="975">Generic Function</h3><h4 id="976">Package: net.ec2</h4>

<p id="977"><b>Arguments: </b><i>
ec2-identity
</i></p>


<p id="978">
Accesses the rigion associated with the argument, which should be an
instance of <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="979"><a name="ec2-identity-ssh-identity-file-op-bookmarkxx"></a>ec2-identity-ssh-identity-file</h3><h3 id="980">Generic Function</h3><h4 id="981">Package: net.ec2</h4>

<p id="982"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="983">
Accessor to the <code>ssh-identity-file</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="984"><a name="ec2-identity-keypair-name-op-bookmarkxx"></a>ec2-identity-keypair-name</h3><h3 id="985">Generic Function</h3><h4 id="986">Package: net.ec2</h4>

<p id="987"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="988">
Accessor to the <code>keypair-name</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="989"><a name="ec2-identity-ssh-user-op-bookmarkxx"></a>ec2-identity-ssh-user</h3><h3 id="990">Generic Function</h3><h4 id="991">Package: net.ec2</h4>

<p id="992"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="993">
Accessor to the <code>ssh-user</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="994"><a name="ec2-identity-access-key-op-bookmarkxx"></a>ec2-identity-access-key</h3><h3 id="995">Generic Function</h3><h4 id="996">Package: net.ec2</h4>

<p id="997"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="998">
Accessor to the <code>access-key</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="999"><a name="ec2-identity-secret-access-key-op-bookmarkxx"></a>ec2-identity-secret-access-key</h3><h3 id="1000">Generic Function</h3><h4 id="1001">Package: net.ec2</h4>

<p id="1002"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="1003">
Accessor to the <code>secret-access-key</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="1004"><a name="ec2-identity-account-number-op-bookmarkxx"></a>ec2-identity-account-number</h3><h3 id="1005">Generic Function</h3><h4 id="1006">Package: net.ec2</h4>

<p id="1007"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="1008">
Accessor to the <code>account-number</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="1009"><a name="ec2-identity-certificate-op-bookmarkxx"></a>ec2-identity-certificate</h3><h3 id="1010">Generic Function</h3><h4 id="1011">Package: net.ec2</h4>

<p id="1012"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="1013">
Accessor to the <code>certificate</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<hr><h3 id="1014"><a name="ec2-identity-private-key-op-bookmarkxx"></a>ec2-identity-private-key</h3><h3 id="1015">Generic Function</h3><h4 id="1016">Package: net.ec2</h4>

<p id="1017"><b>Arguments: </b><i>
ec2-identity
</i></p>

<p id="1018">
Accessor to the <code>private-key</code> slot of
an <a href="ec2.htm#ec2-identity-class-bookmarkxx"><code>ec2-identity</code></a>.
</p>

<hr>

<h3 id="1019">
ec2-error
</h3>

<hr><h3 id="1020"><a name="ec2-error-class-bookmarkxx"></a>ec2-error</h3><h3 id="1021">Class</h3><h4 id="1022">Package: net.ec2</h4>

<p id="1023">
The condition type of errors signaled by the Allegro CL EC2 API.
</p>

<hr>



</body><hr><p id="2"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/ec2.htm">10.0 version</a></td></tr></table></html>