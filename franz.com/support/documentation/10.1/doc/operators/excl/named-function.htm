<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>named-function</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Special Operator</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/excl/named-function.htm">10.0 version</a></td></tr></table><h2 id="2">named-function</h2>

<p id="3"><b>Arguments: </b><i>name lambda-expression</i></p>

<p id="4">
This special operator extension operates approximately as though it
were defined by this macro:
</p>
<pre id="5">
 (defmacro excl:named-function (name function) (declare (ignore name)) 
     `(function ,function))
</pre>

<p id="6">
except that when the form is compiled or executed the resultant
function is given the specified name.  The name has no semantic
effect, but may be helpful when encountered in the debugger or in
profiler output.  Also, if an appropriate function spec handler has
been defined, the function name (or its closure template) can be
accessed by name for tracing, disassembly, etc.  For more info about
function specs, see <a href="../../implementation.htm#function-specs-1">Function specs (fspecs)</a>
in <a href="../../implementation.htm">implementation.htm</a>.
</p>
<p id="7">
There is an alternate macro definition for <a href="named-function.htm"><b>named-function</b></a> which will be used
automatically by <a href="../../../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a> for the benefit of
portable code walkers.
</p>

<pre id="8">
 cl-user(1): (defun make-counter-function (&amp;optional (initial 0)) 
	       (let ((cons (list initial)))
		 (named-function counter-function
		   (lambda () (incf (car cons))))))
 make-counter-function
 cl-user(2): (make-counter-function)
 #&lt;Interpreted Closure counter-function @ #x10022764a2&gt;
 cl-user(3): (funcall *)
 1
 cl-user(4): (funcall **)
 2
 cl-user(5): 
</pre>

<p id="9">
When compiling a <a href="named-function.htm"><b>named-function</b></a> form, the compiler treats the
form just like a function form, except that the name is used if
possible in the resulting function. This is especially useful for
closures of a particular kind, as in the following example:
</p>

<pre id="10">
user(1): (defun get-one-arg-frobber (ix) 
            (named-function frobber 
              (lambda (arg) (frob-by-index ix arg)))) 
get-one-arg-frobber 
user(2): (compile *) 
Warning: While compiling these undefined 
functions were referenced: frob-by-index.
get-one-arg-frobber 
nil 
nil 
user(3): (get-one-arg-frobber 10) 
#&lt;Closure frobber @ #x2065dea9&gt; 
user(4): 
</pre>

<p id="11">
Note that the name of the closure is taken from the <a href="named-function.htm"><b>named-function</b></a> form. Contrast that
with the following definition using the more traditional function
form:
</p>

<pre id="12">
user(7): (defun get-one-arg-frobber (ix) 
            (function (lambda (arg)
                         (frob-by-index ix arg)))) 
get-one-arg-frobber 
user(8): (compile *) 
Warning: While compiling these undefined 
functions were referenced: frob-by-index.
get-one-arg-frobber 
nil 
nil 
user(9): (get-one-arg-frobber 12) 
#&lt;Closure (:internal get-one-arg-frobber 0) @ #x20664fa1&gt; 
user(10): 
</pre>

<p id="13">
See also <a href="named-annotated-function.htm"><b>named-annotated-function</b></a>.
</p>

<hr><p id="14"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/excl/named-function.htm">10.0 version</a></td></tr></table></body></html>