<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>validate-lisp-source</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/excl/validate-lisp-source.htm">10.0 version</a></td></tr></table><h2 id="2">validate-lisp-source</h2>

<p id="3"><b>Arguments: </b><i>
function </i> &amp;optional <i>reachable</i> (<i>ordering</i> t)<i>trace</i><i>
</i></p>

<p id="4">
Source level debug info is propagated from the source all the way
through the compilation of a function, and depending on the compexity
of the function this information can become garbled along the way, due
to reorderings, optimizations, implementation strategies, or simply
high function complexity.
</p>
<p id="5">
This function returns the number of problems seen after analyzing the
source-level-debug info for
function. If <b><i>trace</i></b> is given and true,
progress will be printed verbosely whenever searching for a path from
one program counter in the function to another.  Program counters are
always relative to the start of the function, beginning with 0.
Function can be a function or closure object, or it can be
any <a href="../../../ansicl/dictentr/fboundp.htm"><b>fboundp</b></a> function
spec.
</p>
<p id="6">
The current validation styles available currently
are <b><i>reachable</i></b>
and <b><i>ordering</i></b>.  Note
that <i>ordering</i> defaults to true,
and <i>reachable</i> defaults
to <code>nil</code>. It is much more likely that a
function will have problems with reachablity than with ordering, so a
quick test for gross errors would be something like
</p>

<pre id="7">
 (validate-lisp-source 'foo)
</pre>

<p id="8">
If you want to validate only reachable problems, use
</p>

<pre id="9">
 (validate-lisp-source 'foo t nil)
</pre>

<p id="10">
and if you want all validations, use
</p>

<pre id="11">
 (validate-lisp-source 'foo t)
</pre>

<p id="12">
<a href="validate-lisp-source.htm"><b>validate-lisp-source</b></a> is
highly compute-intensive.  You can demonstrate this by calling with
the <i>trace</i> argument
non-<code>nil</code>.
</p>
<h3 id="13">
Source record validation concepts
</h3>
<p id="14">
A Lisp source record is identified by its index, and it contains a
number of fields which are important to validation and which can be
seen by using <a href="print-function-meta-info.htm"><b>print-function-meta-info</b></a>:
</p>
<ul>
<li id="15">
<b>The next and branch fields</b>: labelled "nxt" and "br",
respectively, in the <a href="print-function-meta-info.htm"><b>print-function-meta-info</b></a> output, these fields
specify one or more indexes each indicating where execution might
continue from here.
</li>
<li id="16">
<b>The parent/child fields</b>: Like the next and branch fields, the
parent ("par") and child ("chld") fields are each an index, indicating
a macroexpansion relationship.  The child field indicates that this
record is a macro form: the child field indexes the record which
represents the form this form expanded to (each expansion is a single
macroexpansion, as with <a href="../../../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a> or
<b>excl::compiler-macroexpand-1</b>).  The parent field indexes the
parent, and each pair always reference each other.  If the child
record is also a macro form, it will also have a child record which
indexes a third record, which will in turn point back to it via the
parent field.
</li>
<li id="17">
<b>The pc, next-pc, and branch-pc fields</b>: Labelled "pc", "nxt",
and "br" in the second half of each record in <a href="print-function-meta-info.htm"><b>print-function-meta-info</b></a> output, these
values are actual relative program-counter values.  A record has only
one pc field, and may have 0 or more next-pc and branch-pc fields,
depending on the branch-type.
</li>
<li id="18">
<b>The entry-type field</b>: this field describes in a keyword what
kind of record this is.  <code>nil</code> in this field
means that there is no special consideration for this record.  A
non-exhaustive list of entry-types is:
<ul>
<li id="19">
<code>:ref</code> - A variable is being referenced.
</li>
<li id="20">
<code>:call</code> - A call to a function is about to occur;
arguments have already been placed.
</li>
<li id="21">
<code>:early</code> - A call to a function is being considered,
but arguments have not yet been placed.
</li>
<li id="22">
<code>:clone</code> - assembler code has split off into two or
more branches in implementing this form, and this record is a copy of
a previous record.
</li>
<li id="23">
<code>:init</code> - This record represents the storing of an
initialization form into a variable being bound by a <a href="../../../ansicl/dictentr/letlet.htm"><b>let</b></a> form.
</li>
<li id="24">
<code>:setq</code> - A variable is about to be <b>setq</b>'d.
</li>
</ul>
</li>
<li id="25">
<b>The branch-type field</b>: this field describes what the branching
characteristics are of this record.  If the field is nil, then no
branching occurs; the record only contains one next or branch field,
and thus only one next-pc or branch-pc field.  A non-exhaustive list
of branch-types is:
<ul>
<li id="26">
<code>:bcc</code> - Branch on Condition Code: A decision will be
made whether to branch or not.  A next and branch field will always be
present.
</li>
<li id="27">
<code>:jmp</code> - branch unconditionally: Usually the
branch/branch-pc fields will point to the target record/pc, and there
will be no next/next-pc fields.
</li>
<li id="28">
<code>:call</code> - A call to a function. The function is
determined by what is in the function name register, and a decision
about whether to break at the beginning of that function is determined
by the step type.  The next fields will be filled in with the next
record after the call, unless it is a tail-call.
</li>
<li id="29">
<code>:ret</code> - This record is a return record; there are no
next or branch fields.
</li>
<li id="30">
<code>:case</code> - This record represents a table-calculated
jump, which may have next fields but always has multiple branch
fields.
</li>
<li id="31">
<code>:noreturn</code> - This record represents dead code, which
will not be returned to (e.g. by a tail call).
</li>
</ul>
</li>
</ul>
<p id="32">
The current validations are:
</p>
<ul>
<li id="33">
<b>ordering</b>: This validation ensures that the pc, next-pc, and
branch-pc fields are consistent with the record and its next and
branch fields.  Inconsistencies might result in the sudden loss of
stopping while single-stepping, as the stepper sets only
breakpoints where the code is likely to hit, moving forward from
the currently-stopped record.  For example, if Record 3 has pc=27,
and it has a next record index of 4 but record 4 has a pc of 25,
then record 3 will also have a next-pc of 25, and stepping from
record 3 to record 4 will not stop when desired because the
breakpoint has been set "behind" the current breakpoint.  Some
error messages that might be seen:
<ul>
<li id="34">
"pc is missing." This occurs when the compiler has not properly
propagated the source record all the way to the in-core assembler,
which should then assign a program counter to the record.
</li>
<li id="35">
"bcc: one of next-pc (~d) or branch-pc (~d) is missing."  This occurs
sometimes in high optimization and complex code situations, where
perhaps both branches to a decision point go to the same place
</li>
<li id="36">
"no next or branch pc" Unless this is dead code, the record should
always have at least one next-pc or branch-pc
</li>
<li id="37">
"next-pc (~d) doesn't follow pc (~d)" The next-pc field of this record
represents a point "earlier" in the program execution order.  The
next-pc might not be actually larger in value than the current pc, but
as long as the next-pc can be reached by jumping and/or branching
starting at this pc, this error will not be flagged.
</li>
</ul>
</li>
<li id="38">
<b>reachable</b>: This validation ensures that a reverse mapping from
pc to record number finds a record whose source actually correponds to
the instruction at that pc.  Failure for a pc to be reachable by the
source record which caused it will sometimes result in a breakpoint
being set in an unexpected location.
</li>
</ul>
<p id="39">
Condsider the following scenario with a function #'bas on some
imaginary architecture:
</p>

<pre id="40">
Record: 23 ... next: 24  ... pc: 120  next-pc: 95 form: (foo x)
Record: 24 ... next: 25  ... pc: 95 ...           form: (bar (foo x))
</pre>

<p id="41">
Record 23 has been placed after record 24, so it has a higher pc
value.
</p>
<p id="42">
If we intersperse source and assembler records (a truncated version of
what (print-function-meta-info 'bas :mixed t) would print), then we
might have something like this:
</p>

<pre id="43">
Record 24: pc: 95  ... form: (bar (foo x))
   95: call bar
   98: ...

Record 10: pc: 112 ... form: (/ z 0)
   112: load r1, z-in-memory
   117: jmp 128
Record 23: pc: 120  ...  form: (foo x)
   120: call foo
   125: jmp 95
   128: div 0
   133: ...
Record 40...
</pre>

<p id="44">
If for some reason (such as a divide by 0) an error occurs at the
instruction at 128, then the :zoom command would look at the pc at 128
and (incorrectly) associated it with record 23, instead of associating
it with record 10 as it should.  This is because the segment of code
between 128 and 133 is not assocated with the source record it should
be, and thus the instructions ar 128 and 133 are "not reachable" by
record 23.  Note the jump at 125 which is a good indicator of such a
problem - a jump instruction without a source record immediately
following will always result in a reachable failure.
</p>
<p id="45">
The message in the example situation above will be
</p>

<pre id="46">
Record 23 at pc: 120: (foo x)
  pc 133 doesn't follow record.
</pre>

<hr><p id="47"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/excl/validate-lisp-source.htm">10.0 version</a></td></tr></table></body></html>