<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>sharable-lock-lock</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Generic Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: mp</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/mp/sharable-lock-lock.htm">10.0 version</a></td></tr></table><h2 id="2">sharable-lock-lock</h2>



<p id="3"><b>Arguments: </b><i>
sharable-lock mode </i>&amp;key <i>yield-rate timeout recursive-p</i><i>
</i></p>

<p id="4">
Acquire a <a href="../../classes/mp/sharable-lock.htm"><code>sharable-lock</code></a> in
the specified mode.
</p>
<p id="5">
If the lock was acquired, The single value returned is one of the
keywords:
</p>
<ul>
<li id="6">
<code>:locked</code>: the lock was acquired in the requested
mode.
</li>
<li id="7">
<code>:recursive</code>: the lock is already owned in the
requested mode.  An additional access of the same mode is recorded for
this thread.
</li>
<li id="8">
<code>:downgrade</code>: the lock is already held in exclusive
mode, but a shared access from the same thread is recorded as well.
</li>
<li id="9">
<code>:upgrade</code>: the lock is already held in shared
mode; and additional shared access from the same thread is recorded.
</li>
</ul>
<p id="10">
If the call fails to acquire the lock, two values are returned.  The
first value is <code>nil</code> to indicate failure.  The
second value is a keyword that describes the reason:
</p>
<ul>
<li id="11">
<code>:timeout</code>: a timeout occurred before the lock
could be acquired.
</li>
<li id="12">
<code>:exclusive</code>: an exclusive locker prevented access.
</li>
<li id="13">
<code>:shared</code>: one or more shared lockers prevented
access.  An exclusive lock is delayed by any shared lockers.  A shared
lock is delayed if max-shared lockers are already locking.
</li>
<li id="14">
<code>:busy</code>: one or more other lockers prevented access
but it was not possible to tell which case.  Another attempt to
acquire the lock is likely to give another answer.
</li>
<li id="15">
<code>:recursive-error</code>: a recursive locking attempt is
not allowed because of the <i>recursive-p</i> setting.
</li>
<li id="16">
<code>:downgrade-error</code>: a downgrade is not allowed
because of the <i>recursive-p</i> setting.
</li>
<li id="17">
<code>:upgrade-error</code>: an upngrade is not allowed
because of the <i>recursive-p</i> setting.
</li>
<li id="18">
<code>:interrupting</code>: the locking call is in a
<a href="process-interrupt.htm"><b>process-interrupt</b></a> function
that has interrupted another locking attempt in a place that does not
allow any recursion.  Another attempt is likely to succeed, but the
attempt must be made with a new call to process-interrupt.  Looping or
waiting in the process-interrupt function is futile and
counterproductive.
</li>
<li id="19">
<code>:downgrade-state-error</code>: probably an
implementation error
</li>
<li id="20">
<code>:upgrade-state-error</code>: probably an implementation
error
</li>
</ul>

<p id="21">
The <b><i>mode</i></b> argument must be one of the
keywords <code>:shared</code> or <code>:exclusive</code>.
</p>
<p id="22">
The <b><i>yield-rate</i></b> argument, if specified,
must be a positive integer, or the keyword <code>:never</code>.
The specified value overrides the value in the lock instance.  If the
argument is omitted, or specified as <code>nil</code>,
than the value in the lock instance is used.
</p>
<p id="23">
The <b><i>timeout</i></b> argument, if specified, must
be a non-negative number of seconds.  The value determines how long
the program will wait if the lock is not immediately available.  A
timeout value of zero specifies that that the lock must be available
immediately only.
</p>
<p id="24">
The <b><i>recursive-p</i></b> argument may be used to
override the recursion specification in the sharable-lock instance.
If omitted, <code>nil</code>
or <code>:default</code>, the value in the lock instance is
used.  Otherwise, the value must be <code>t</code>, one of
the keywords allowed in <a href="make-sharable-lock.htm"><b>make-sharable-lock</b></a>, or a list of these keywords.
If the <i>recursive-p</i> setting does not allow a
recursive or repeated call, the behavior is determined by
the <i>timeout</i> argument.  If
the <i>timeout</i> argument is omitted, or non-zero, an
error of type <a href="../../classes/mp/sharable-lock-recursion-error.htm"><code>sharable-lock-recursion-error</code></a> is signaled;
otherwise one of the above keywords is returned as the second value.
</p>
<p id="25">
When the timeout value is greater than zero, and a timeout occurs, the
second value is <code>:timeout</code>.
</p>
<p id="26">
When the <i>timeout</i> value is zero, the lock is
acquired only if there is no delay. If there would be a delay, the
second value is one of the keywords listed above.
</p>

<p id="27">
See <a href="../../smp.htm#sharable-locks-2">Sharable
locks</a> in <a href="../../smp.htm">smp.htm</a>.
</p>
<p id="28">
See <a href="../../multiprocessing.htm">multiprocessing.htm</a>
for general
information on multiprocessing in Allegro CL.
</p>

<hr><p id="29"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/mp/sharable-lock-lock.htm">10.0 version</a></td></tr></table></body></html>