<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>make-sharable-lock</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: mp</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/mp/make-sharable-lock.htm">10.0 version</a></td></tr></table><h2 id="2">make-sharable-lock</h2>

<p id="3"><b>Arguments: </b><i>
</i>&amp;key <i>name max-shared yield-rate recursive-p safe-p auto-unlock-p constructor</i><i>
</i></p>

<p id="4">
This function returns a fresh instance of a <a href="../../classes/mp/sharable-lock.htm"><code>sharable-lock</code></a>.
</p>
<p id="5">
The <b><i>name</i></b> argument must be a string
or <code>nil</code>.  The name is used in status and error
messages.
</p>
<p id="6">
The <b><i>max-shared</i></b> argument must be an integer
greater than zero; it specifies the maximum number of simultaneous
shared users allowed at any moment. The default value is 20. The
size of the instance is proportional to this number. Values as high
as 1000 still perform reasonably well, but much larger values may
degrade performance noticably.
</p>
<p id="7">
The <b><i>yield-rate</i></b> argument must be an integer
greater than zero; it specifies how often a spin loop should yield.
The default value is 5.  Most of the low-level locking in SMP code is
done with spin loops testing control bits.  Such loops are very
effective for short delays since they do not involve any operating
system delays.  However, if longer delays can occur, especially when
the number of active threads is greater than the number of available
processors, then spin loops can consume large amounts of cpu time with
very little benefit.  When a value of n is specified for yield rate,
sharable-lock spin loops yield control every n-th iteration so that
other threads may run and possibly release the needed resource sooner.
If the yield-rate is specified as <b><i>:never</i></b>,
then no yield is done at all.
</p>


<p id="8">
The <b><i>recursive-p</i></b> argument specifies the
behavior when a lock is locked recursively or repeatedly in the same
thread. The value can be specified as a list containing any of the
keywords below.
</p>
<p id="9">
A value of <code>nil</code>, ie an empty list, prevents
any recursive or repeated locking.
</p>
<p id="10">
A non-<code>nil</code> value allows recursive or repeated
locking from the same thread.  Each locking call increments a counter
and unlock calls decrement the counter.  The lock is actually released
when the count is zero. Although recursive or repeated locking is
labeled with a mode, it does not actually change the state of the lock
in any way; any recursive code operates in the same locking
environment as the outermost or initial locking call.
</p>
<ul>
<li id="11">
<code>:exclusive</code>: allows an exclusive locking call to
succeed when an exclusive lock is already held in the same thread.
</li>
<li id="12">
<code>:shared</code>: allows a shared locking call to succeed
when a shared lock is already held in the same thread.
</li>
<li id="13">
<code>:downgrade</code>: allows a shared locking call to
succeed when an exclusive lock is already held in the same thread.
This is a potentially dangerous use of the lock since the outer
exclusive locking code may have made partial inconsistent changes to
some data object.
</li>
<li id="14">
<code>:upgrade</code>: allows an exclusive locking call to
succeed when a shared lock is already held in the same thread.  This
use is both dangerous and of questionable utility since the strength
of the lock has not changed.  Any modifications made in the upgrade
code will be seen by any number of shared users assuming unmutability
of the data.
</li>
</ul>
<p id="15">
The default setting is <code>t</code> to denote the list
<code>(:exclusive :shared)</code>.  The default is thus to allow
recursive or repeated access of the same mode.
</p>
<p id="16">
If shared access is used for read-only access to a data object, 
recursive access is safe and meaningful.  If exclusive access is used
to make multiple related changes to a data object, recursive access may be
meaningful, but the recursive acesses must be reviewed for possible
interference.
</p>
<p id="17">
Note also that separate counters are maintained for uses of the macros 
<a href="with-shared-lock.htm"><b>with-shared-lock</b></a> and
<a href="with-exclusive-lock.htm"><b>with-exclusive-lock</b></a>, and uses
of the <a href="sharable-lock-lock.htm"><b>sharable-lock-lock</b></a>
function.  A call to <a href="sharable-lock-unlock.htm"><b>sharable-lock-unlock</b></a> cannot release a lock
obtained with one of the macros.
</p>

<p id="18">
The <b><i>safe-p</i></b> argument specifies the behavior
if an attempt is made to unlock a lock that is already unlocked.  The
default value is <code>t</code>.  When the value is
non-<code>nil</code>, an error is signaled if an attempt
is made to unlock a lock that is already unlocked. When the value is
<code>nil</code>, the attempt is ignored silently.
</p>
<p id="19">
The <b><i>auto-unlock-p</i></b> argument specifies the
behavior if the locking process is terminated without releasing the
lock.  The default value is <code>nil</code>.  When the
value is <code>nil</code>, nothing is done.  When the
value is non-<code>nil</code>, a lock held by a terminated
process is automatically released when competition for the lock
occurs.
</p>

<p id="20">
The <b><i>constructor</i></b> argument specifies the
constructor used in creating a sharable-lock instance.  The default
constructor creates an instance of the <a href="../../classes/mp/sharable-lock.htm"><code>sharable-lock</code></a> struct.  A user-defined sub-class
must be a struct that includes <a href="../../classes/mp/sharable-lock.htm"><code>sharable-lock</code></a>.
</p>

<p id="21">
See <a href="../../smp.htm#sharable-locks-2">Sharable
locks</a> in <a href="../../smp.htm">smp.htm</a>.
</p>
<p id="22">
See <a href="../../multiprocessing.htm">multiprocessing.htm</a>
for general
information on multiprocessing in Allegro CL.
</p>

<hr><p id="23"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/mp/make-sharable-lock.htm">10.0 version</a></td></tr></table></body></html>