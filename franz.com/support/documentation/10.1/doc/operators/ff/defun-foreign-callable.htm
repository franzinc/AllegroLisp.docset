<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>defun-foreign-callable</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: ff</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/ff/defun-foreign-callable.htm">10.0 version</a></td></tr></table><h2 id="2">defun-foreign-callable</h2>

<p id="3"><b>Arguments: </b><i>
name arglist </i> &amp;rest <i> body</i><i>
</i></p>

<p id="4">
This macro creates a function that can be called from non-lisp
code. It is intended that such a function be callable from lisp as
well, but such functionality has not yet been provided. (This macro
replaces the obsolete <a href="defun-c-callable.htm"><b>defun-c-callable</b></a>.)
</p>

<p id="5">
<i>name</i> must be a symbol representing the name of
the new function to install.
</p>

<p id="6">
<i>arglist</i> is an argument list specification. Each
argument is either a symbol representing the name of an argument of
type <code>:long</code>, or it is a list of two elements
containing the argument name and foreign-type, respectively. See
<a href="../../ftype.htm#foreign-type-syntax-1">The Syntax for
Foreign Types</a> in <a href="../../ftype.htm">ftype.htm</a> for
information on pre-defined foreign types. Other foreign types can be
defined with <a href="def-foreign-type.htm"><b>def-foreign-type</b></a>. <code>(arg-name (:aligned
ftype))</code> is not supported though <code>(arg-name
:aligned)</code> is. The <code>:lisp</code> type is also
supported (meaning a Lisp object is passed from the foreign code to
Lisp) but see the warning below.
</p>
<p id="7">
If the foreign type represents
a <code>:struct</code>, <code>:union</code>,
or <code>:class</code>, it creates possible pass-by-value
semantics, based on the current value of <a href="../../variables/ff/s_pass-structs-by-value_s.htm"><code>*pass-structs-by-value*</code></a> or the value given to the
<code>:pass-structs-by-value</code> option.
</p>


<h3 id="8">
The :lisp argument type: signals a warning
</h3>
<p id="9">
If you specify an argument to be of type :lisp --
like <code>(arg-name :lisp)</code> -- a warning will be signaled
because doing so casually is dangerous. Unless the Lisp value is an
immediate (for example, a fixnum or a character), it is actually a
pointer which is passed to Lisp. If that pointer happens to be to an
object which has been moved by the garbage collector, then it will be
invlaid and may cause Lisp to fail with a gc error.
</p>
<p id="10">
The warning can be suppressed with the :lisp-args-will-not-move declaration:
</p>

<pre id="11">
cl-user(3): (ff:defun-foreign-callable foo ((x :double) (y :lisp)))
Warning: While defining foo: for foreign callback-arg named y,
         specifying :lisp as a foreign type for a transition from
         foreign to lisp space is dangerous because the object may move
         due to an intervening garbage collection. If the object is an
         aligned address consider instead using the :aligned
         specification.  Otherwise, if the object is static or if
         careful analysis shows that no movement can possibly occur,
         then add the :lisp-args-will-not-move option in the definition
         in order to remove this warning.
foo
cl-user(4): (ff:defun-foreign-callable foo ((x :double) (y :lisp)) 
                (declare (:lisp-args-will-not-move t)))
foo
cl-user(5):
</pre>

<p id="12">
Specifying the type as <code>:aligned</code> will not signal a
warning. Manipulating <code>:aligned</code> values (which look
like fixnums to Lisp) is complicated and aligned pointers can also be
moved, but that is uncommon. See <a href="../../ftype.htm#aligned-pointers-1">Aligned Pointers and the :aligned
type</a> in <a href="../../ftype.htm">ftype.htm</a>.
</p>


<h3 id="13">The body argument and its declaration</h3>

<p id="14">
The first form in the <i>body</i> can be a declaration
form, whose valid options are <code>:convention</code>,
<code>:unwind</code>, and <code>:returning</code>;
something like:
</p>

<pre id="15">
(defun-foreign-callable my-callback ()
    (declare (:convention :c))
  ...)
</pre>

<p id="16">
The possible values of the options are:
</p>
<ul>
<li id="17">
<code>:convention</code>: the convention provides for the
specialization of calling conventions due to language or
operating-system distinctions. The default convention is
<code>:c</code>, and is adequate for most
situations. <code>:fastcall</code> is also accepted. Other
values are distinguished by MS Windows-based systems including
<code>:stdcall</code>, <code>:method</code>, and
<code>:fastcall</code>, but <code>:fastcall</code> is not
supported and should not be specified. See <a name="def-foreign-call.htm#note-2-possible-values">Note 2: Possible
Values for Convention</a> on the page for <a href="def-foreign-call.htm"><b>def-foreign-call</b></a>.
</li>
<li id="18">
<code>:unwind</code>: on MS Windows based systems, defaults to
0, and to <code>nil</code> on all other systems. May be
<code>nil</code> or an integer.

</li>
<li id="19">
<code>:pass-structs-by-value</code>. This causes the
<a href="../../variables/ff/s_pass-structs-by-value_s.htm"><code>*pass-structs-by-value*</code></a>
variable to be set (after it has been bound to its own value at the
beginning of the macro call) to the value given. The valid values
are <code>nil</code>, <code>:warn</code>,
and <code>t</code>.
</li>
<li id="20">

<code>:returning</code>: this specifies the type of what is
returned by the called function. It is ignored except when the
declared value includes a foreign struct type (either a
<code>:struct</code>, a <code>:union</code>, or a
<code>:class</code>). Those can be passed by reference or by value
depending on the value of <a href="../../variables/ff/s_pass-structs-by-value_s.htm"><code>*pass-structs-by-value*</code></a> and the value given to
the <code>:pass-structs-by-value</code> option. If passing is by
reference, a hidden argument is provided and the structure is arranged
to be copied back to the caller, according to the calling convention
of the architecture. The general form is

<pre id="21">

(ff:defun-foreign-callable foo (...)
   (declare (:returning &lt;type&gt;)) 
   ...)

</pre>

<p id="22">
where <code>&lt;type&gt;</code> is a foreign type or its name
specifying a structure. This declaration is intended to eventually
replace the <i>convert-to-c-types</i> argument in
<a href="register-foreign-callable.htm"><b>register-foreign-callable</b></a>, and
cannot be used with it. 
</p>

</li>
</ul>
<p id="23">
New C++ and other language based systems tend to establish exception
handlers, and set up their own equivalent of unwind-protects in their
own langage. Lisp knows nothing about such exception handlers, and
thus tends to trash the handler chains that have been built up
whenever lisp code throws over non-lisp code to a catch form in lisp
code deeper in the stack. The non-lisp code had been expecting either
its own exception handling system to remove the exception from the
chain on the stack, or else normal functional returns to unwind the
stack in a normal fashion.
</p>
<p id="24">
When the <code>:unwind</code> value is <code>nil</code>, then no special unwinding takes place.  When the
argument is non-<code>nil</code> (e.g. 0), then a special
"throw-by-returning-to-c" style of unwinding occurs; a throw occurs,
not by removing the stack (including the foreign code which might have
established handlers), but instead by returning the unwind-value to
that code, which should then remove its own handler and return. When
the foreign code returns, the lisp throw is again resumed until it is
completed, or until the next lisp-to-nonlisp transition is
encountered.
</p>

<h3 id="25">Using a function defined by defun-foreign-callable</h3>
<p id="26">
In order to use a function defined by <a href="defun-foreign-callable.htm"><b>defun-foreign-callable</b></a>, the
function must first be registered using <a href="register-foreign-callable.htm"><b>register-foreign-callable</b></a>.
</p>

<p id="27">
What the foreign-callable function returns as a foreign value is
controlled by the call to <a href="register-foreign-callable.htm"><b>register-foreign-callable</b></a> (which
actually enables the foreign callable function). If the third
(optional) argument to <a href="register-foreign-callable.htm"><b>register-foreign-callable</b></a> is
<code>nil</code>, an unconverted Lisp value is returned in
the foreign return register. Programmers must use the specifications
in <b>[Allegro
directory]/misc/lisp.h</b> to interpret this value. If the
third argument is <code>t</code>, then the Lisp value of
the function is converted to a foreign value according to the default
conversion rules, and the resulting value is returned as the foreign
value returned by the Lisp function.</p>

<p id="28">
The body of the foreign callable Lisp function must be carefully
coded to return a Lisp value that will trigger an appropriate
conversion so that the desired foreign value will actually appear at
the interface.
</p>

<h3 id="29">
Strings passed as arguments
</h3>

<p id="30">
Consider this call to <a href="defun-foreign-callable.htm"><b>defun-foreign-callable</b></a>:
</p>
<pre id="31">
(defun-foreign-callable gdbm-error-handler ((string (* :char)))
  (error "gdbm error: ~a." (native-to-string string)))
</pre>
<p id="32">
The call <a href="../excl/native-to-string.htm"><b>native-to-string</b></a> is
necessary because the <i>string</i> argument in the
callback to Lisp is done with no string conversion at callback
time. The value of the <i>string</i> argument as passed
will be an integer representing a C address. <a href="../excl/native-to-string.htm"><b>native-to-string</b></a> does the necessary
conversion.
</p>

<p id="33">
See <a href="../../ftype.htm">ftype.htm</a> for
information on foreign types in Allegro CL and
<a href="../../foreign-functions.htm">foreign-functions.htm</a> for general
information on foreign functions in Allegro CL.
</p>

<hr><p id="34"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had moderate revisions compared to the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/ff/defun-foreign-callable.htm">10.0 version</a></td></tr></table></body></html>