<html><head><meta name="viewport" content="width=device-width, initial-scale=1"> <meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"><title>jlinker-init</title></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: net.jlinker</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/jlinker/jlinker-init.htm">10.0 version</a></td></tr></table><h2 id="2">jlinker-init</h2>




<p id="3"><b>Arguments: </b><i>
</i> &amp;optional <i>mode</i><i>
</i>&amp;key <i>port host file local-dist timeout java-args preload debug verbose error-p library java-home classpath jar report end-function poll-count poll-interval connection-pool preserve-client-calls jave-out</i><i>
</i></p>



<p id="4">
This function initializes a connection between Lisp and Java.  The
argument list supplied is combined with the value of <a href="../../variables/jlinker/s_jlinker-init_s.htm"><code>*jlinker-init*</code></a> in
order to form the actual initialization arguments. Supplied arguments
override any items in the value of <a href="../../variables/jlinker/s_jlinker-init_s.htm"><code>*jlinker-init*</code></a>.
</p>

<h3 id="5">
The mode argument
</h3>
<p id="6">
The optional <b><i>mode</i></b> argument may be one of
the following keywords (keywords in a single bullet are synonyms).
</p>
<ul>
<li id="7">
<b>:start</b> or <b>:start-java</b> (the default)
</li>
<li id="8">
<b>:lisp-advertises</b>
</li>
<li id="9">
<b>:java-advertises</b>
</li>
<li id="10">
<b>:native</b> or <b>:jni</b>
</li>
</ul>

<p id="11">
The <i>mode</i> argument specifies the way in which Lisp
and Java will communicate.  If the mode is not specified or
is <code>nil</code>, the default <b>:start-java</b> mode
is used.  You must specify a mode if you wish to supply values for any
keyword argument.
</p>

<p id="12">
When <i>mode</i> is <b>:start</b> (or the synonym
<b>:start-java</b>), the Lisp process starts a new Java VM in a
separate operating system process. See <a href="#start-java-mode">here
below</a> for more details.
</p>
<p id="13">
When <i>mode</i> is <b>:lisp-advertises</b>, the Lisp
process waits for a separate Java application to make contact. See <a href="#lisp-advertises-mode">here below</a> for more details.
</p>
<p id="14">
When <i>mode</i> is <b>:java-advertises</b>, the Lisp
process attempts to connect to a separate Java process. See <a href="#java-advertises-mode">here below</a> for more details.
</p>
<p id="15">
In all the above cases, the Lisp and Java parts of the application reside
in separate address spaces, and communication takes place through sockets.
</p>
<p id="16">
When <i>mode</i> is <b>:native</b> (or the synonym
<b>:jni</b>), the Java VM is loaded into the address space of the Lisp
process.  The Lisp and Java parts of the application share one address
space and one operating system process.  Communication takes place
through foreign calls. See <a href="#native-mode">here below</a> for
more details.
</p>
<p id="17">
At the application level, there is no difference between the socket
(all except <b>:native</b>/<b>:jni</b>) and foreign call
(<b>:native</b>/<b>:jni</b>) modes. The mode selection only affects
how the interface is initialized.
</p>
<h3 id="18">
jlinker-init return value
</h3>
<p id="19">
If jlinker is not initialized and the call to <a href="jlinker-init.htm"><b>jlinker-init</b></a> succeeds, the return
value is the keyword <b>:jlinker-init</b>.
</p>
<p id="20">
If jlinker is not initialized and the call to <a href="jlinker-init.htm"><b>jlinker-init</b></a>, the result
(returning a value or signaling an error) depends on the
<i>error-p</i> argument, as describes in the discussion
of arguments below.
</p>
<p id="21">
It is not an error to call <a href="jlinker-init.htm"><b>jlinker-init</b></a> when jlinker is
already initialized. In that case the function ignores any arguments
supplied and simply returns a keyword indicating the type of
connection, based on the mode in which it was started:
</p>
<ul>
<li id="22">
if the socket implementation is running (jlinker was started with
<i>mode</i> is anything other than <b>:native</b> or
<b>:jni</b>), then the return value is <b>:socket</b>.
</li>
<li id="23">
if the native implementation is running (jlinker was started with
<i>mode</i> is <b>:native</b> or <b>:jni</b>), then the
return value is <b>:native</b>.
</li>
</ul>

<h3 id="24">
jlinker-init keyword arguments
</h3>

<p id="25">
The meaning of many keyword arguments to <a href="jlinker-init.htm"><b>jlinker-init</b></a> is determined by the
mode but the following keyword arguments have a common meaning:
</p>

<table border="1" width="95%">
<tr>
<td width="30%"><strong>Keyword argument</strong></td>
<td width="30%"><strong>Default value</strong></td>
<td width="40%"><strong>Comment</strong></td>
</tr>
<tr>
<td width="30%">
<code>:error-p</code>
</td>
<td width="30%">
The value of <a href="../../variables/jlinker/s_jlinker-error-p_s.htm"><code>*jlinker-error-p*</code></a>. Note starting
in version 8.0, the initial value of <a href="../../variables/jlinker/s_jlinker-error-p_s.htm"><code>*jlinker-error-p*</code></a> is <code>t</code>. In earlier releases the initial value was <code>nil</code>.
</td>
<td width="40%">
When this argument is non-<code>nil</code>, errors
detected by <a href="jlinker-init.htm"><b>jlinker-init</b></a> are signaled as Lisp
errors. When this argument is <code>nil</code>, <a href="jlinker-init.htm"><b>jlinker-init</b></a> does not
signal errors; if errors are detected, the value returned is a list of
tokens that describe the error; if the operation succeeds, the value
is the symbol <b>:jlinker-init</b>.
</td>
</tr>
<tr>
<td width="30%"><code>:verbose</code>
</td>
<td width="30%">
<code>nil</code>
</td>
<td width="40%">
When this argument is non-<code>nil</code>, jlinker prints
progress messages. The content of the messages depends on the
<i>mode</i> argument.
</td>
</tr>
<tr>
<td width="30%">
<code>:debug</code>
</td>
<td width="30%">
The default is the value of <a href="../../variables/jlinker/s_jlinker-debug_s.htm"><code>*jlinker-debug*</code></a>.
</td>
<td width="40%">
If this argument is non-<code>nil</code>, the Java VM
prints progress and status messages to the <b>java.lang.System.out</b>
stream.
</td>
</tr>
<tr>
<td width="30%">
<code>:java-home</code>
</td>
<td width="30%">
The default is taken from the special variable <a href="../../variables/jlinker/s_jlinker-java-home_s.htm"><code>*jlinker-java-home*</code></a>.
</td>
<td width="40%">
This argument specifies the directory where the Java executable may be
found. Jlinker looks in the <i>bin/</i> sub-directory for a Java
executable. If the value is <code>nil</code>, then we
assume that the Java executable will be found by the operating system
if it is simply mentioned by name (ie, on Unix systems, it may be
found on the default PATH). Otherwise, the value must be a suitable
directory. If the value is :find (MS Windows only), the Windows
registry is examined to find the Java location.
</td>
</tr>
<tr>
<td width="30%"><code>:classpath</code> and
<code>:jar</code>
</td>
<td width="30%">
<code>nil</code> (for both)
</td>
<td width="40%">
These arguments specify how the Java classpath should be modified (in
those cases where a modification is relevant). See <a href="#classpath-jar-args">below</a> for more
information.
</td>
</tr>
<tr>
<td width="30%">
<code>:port</code>
</td>
<td width="30%">
If unspecified, the system asks the OS to assign a port number, and this 
default is normally sufficient.
</td>
<td width="40%">
This argument specifies the socket port used to communicate
between Lisp and Java. The default is to ask the OS to assign a port number, and
this default is normally sufficient. If a value is specified, it must
be a positive number greater than zero, and the given port number must
be available. 
<p id="26">
In earlier releases, two ports were used, one for Lisp and one for
Java, and they were specified with
arguments <i>lisp-port</i>
and <i>java-port</i>. Now only one port is used.  For
backward compatibility, when mode is <code>:start</code> or
<code>:lisp-advertises</code> the <i>lisp-port</i>
argument is used and the <i>java-port</i> argument is
ignored; when mode is <code>:java-advertises</code>, the
<i>java-port</i> argument is used and
the <i>lisp-port</i> argument is ignored.
</p>
<p id="27">
Starting with Version 7.1, multiple <a href="jlinker-init.htm"><b>jlinker-init</b></a> invocations can listen at
the same port number.  This is the default behavior
if <i>port</i> is specified
as <code>nil</code>, zero, or a positive number.  If it is
necessary for several calls to <a href="jlinker-init.htm"><b>jlinker-init</b></a> to listen at different
OS-assigned port numbers, the port argument should be specified as
<code>:new</code>.
</p>
</td>
</tr>
<tr>
<td width="30%">
<code>:local-dist</code>
</td>
<td width="30%">
The default value is "Lisp".
</td>
<td width="40%">
This argument specifies an alternate label for the Lisp
server in a jlinker connection. If multiple copies of jlinker
are running in the same image, this may help in some debugging
situations. 
</td>
</tr>
<tr>
<td width="30%">
<code>:preload</code>
</td>
<td width="30%">
<code>nil</code>
</td>
<td width="40%">
This argument specifies a file that is loaded during the initalization
of a socket connection. The file is generated by a call of the form
<code>(jlookup :gen-preload [filename])</code> (see <a href="jlookup.htm"><b>jlookup</b></a>).
</td>
</tr>
<tr>
<td width="30%">
<code>:report</code>
</td>
<td width="30%">
<code>nil</code>
</td>
<td width="40%">
This argument is in effect in modes
<code>:start-java</code> and
<code>:lisp-advertises</code>. If specified, this argument must
be a function of one argument. The function is called as soon as a
listening socket is created. The argument is the port number of the
listening socket.
</td>
</tr>
<tr>
<td width="30%">
<code>:end-function</code>
</td>
<td width="30%">
<code>nil</code>
</td>
<td width="40%">
If non-<code>nil</code>, should be a functions object or
function name. This function will be called when a jlinker connection
is terminated.  The function gets a single argument, the jlinker
connection instance. The argument was implemented but un-documented in
earlier current versions. The earlier implementations allowed the
function to be called more than once but no longer.
</td>
</tr>

<tr>
<td width="30%">
<code>:poll-count</code>
</td>
<td width="30%">
3
</td>
<td width="40%">
When mode is <code>:java-advertises</code>, this argument
specifies how many times Lisp will attempt to connect.
</td>
</tr>
<tr>
<td width="30%">
<code>:poll-interval</code>
</td>
<td width="30%">
5
</td>
<td width="40%">
When mode is <code>:java-advertises</code>, this argument
specifies how many seconds Lisp will wait between connection attempts.
</td>
</tr>
<tr>
<td width="30%">
<code>:connection-pool</code>
</td>
<td width="30%">
<a href="../../variables/jlinker/s_jlinker-default-connection-pool_s.htm"><code>*jlinker-default-connection-pool*</code></a>
</td>
<td width="40%">
This argument specifies the connection pool
parameters. When <code>nil</code>, no connection pool is
created and jlinker functions as in earlier versions with one port
from Lisp to Java and one from Java to Lisp. When the value
is <code>:delay</code>, the connection pool will be created
later when <a href="jstart-connection-pool.htm"><b>jstart-connection-pool</b></a> is called. Other
non-<code>nil</code> values specify the connection pool
parameters. See the description of <a href="../../variables/jlinker/s_jlinker-default-connection-pool_s.htm"><code>*jlinker-default-connection-pool*</code></a> for
more information.
</td>
</tr>
<tr>
<td width="30%">
<code>:preserve-client-calls</code>
</td>
<td width="30%">
<code>nil</code>
</td>
<td width="40%">
This argument specifies what happens to calls from Java in progress
when <a href="jlinker-end.htm"><b>jlinker-end</b></a> is
called. A value of <code>nil</code> specifies the behavior
of earlier versions of jlinker. Any running synchronous client calls
are killed. A positive number specifies the number of seconds to allow
after <a href="jlinker-end.htm"><b>jlinker-end</b></a>
exits. When the time runs out, the processes are killed. Any other
non-<code>nil</code> value allows the client calls to run
to completion.
</td>
</tr>


<tr>
<td width="30%">
<code>nil</code>
</td>
<td width="30%">
<code>nil</code>
</td>
<td width="40%">
This argument can be used to assist in diagnosing some Java problems.
When <i>debug</i> is non-<code>nil</code>,
this argument can be a string that is used to make two file names of
the form <b>javaout.log</b> and <b>javaoute.log</b>.  The standard
output and error output from the Java VM is collected in these files,
and printed to the Lisp console when <i>jlinker-end</i>
is run.
</td>
</tr>
</table>

<h3 id="28">
<a name="classpath-jar-args"></a>The classpath and jar keyword arguments
</h3> 

<p id="29">
Logical pathnames may be specified as values in place of regular pathnames.
If either argument is
specified, then the Java classpath value is the concatenation of the
following three values:
</p>
<ol>
<li id="30">
The <i>classpath</i> argument: A string is used
verbatim; A list (of strings) is concatenated into a string where the
list elements are separated by the classpath separator; <code>nil</code> or no value specified means use the string ".".
</li>
<li id="31">
The current value of the CLASSPATH environment variable.
</li>
<li id="32">
The resolved jar file path. This file must be visible to the Java VM
for the correct operation of the jlinker interface. 
</li>
</ol>
<p id="33">
If a <i>jar</i> argument was specified, it is used as
the resolved jar file path. Otherwise a default resolved jar file
path is determined in 2 steps:
</p>
<ol>
<li id="34">
If a file "jlinker.jar" exists in the current directory, it is the default.
</li>
<li id="35">
If the file with logical pathname "sys:jlinker;jlinker.jar" exists, it
is the default.
</li>
</ol>

<p id="36">
If the value of <i>jar</i> is specified to be <code>nil</code>, then we assume that the <i>jlinker.jar</i> file
is visible to the Java VM for reasons outside our control; for
example, it may have been installed in the Java library directory
along with the built-in Java libraries. In this case, the resolved jar
file path is the empty string.
</p>
<p id="37">
If neither <i>jar</i> nor <i>classpath</i>
are given values, then the behavior is compatible with older versions
of jlinker - the behavior is determined entirely by the value of the
<a href="../../variables/jlinker/s_jlinker-java-home_s.htm"><code>*jlinker-java-home*</code></a>
variable. Jlinker adds "." and "jlinker.jar" to the classpath on the
assumption that the <i>jlinker.jar</i> file is in the current
directory.
</p>

<h3 id="38">
<a name="start-java-mode"></a>
Mode :start-java
</h3>

<p id="39">
When <i>mode</i> is <code>:start-java</code> (or
the synonym <code>:start</code>), the Lisp process starts a new
Java VM in a separate operating system process.
</p>
<p id="40">
The arguments <i>java-home</i>,
<i>classpath</i>, <i>jar</i>,
<i>java-args</i>, and <i>debug</i>
determine how the Java VM is started from the Lisp process.
</p>
<p id="41">
The <i>port</i> argument may be specified if the default
is not sufficient (you may also use the
obsolete <i>lisp-port</i> argument but you may not use
the obsolete <i>java-port</i> argument). The
arguments <i>library</i>, <i>load</i>,
and <i>file</i> are ignored. The
argument <i>host</i> should not be specified.
</p>
<p id="42">
The <b><i>debug</i></b> argument: on Microsoft Windows,
the <i>debug</i> argument also determines the Java
executable. If <i>debug</i> is <code>nil</code>, we use the executable "javaw.exe"; if debug is
non-<code>nil</code>, we use the executable "java.exe"
which opens a console window where Java output may be seen.
</p>
<p id="43">
The <b><i>java-args</i></b> argument: the value should
be a list of string arguments passed to Java.These are added after the
ones passed by jLinker. If the first item in this list is a sub-list
starting with the keyword <code>:options</code>, then the
remainder of the sub-list is passed to Java in front of any options
passed by jLinker.
</p>
<p id="44">
When jlinker starts the JVM, a command string is composed with a class
name and some arguments to the jlinker startup class. An application
can pass additional arguments by listing them in
the <b><i>java-args</i></b> argument. Arguments to the
JVM must be inserted before the class name in the command string. If
the first item in the <i>java-args</i> list is itself a
list beginning with <code>:options</code>, then the items
following <code>:options</code> are inserted as JVM arguments.
For example, to specify a large memory for the JVM, use the argument
</p>
<pre id="45">
     :java-args '((:options "-Xmx2048m"))
</pre>

<h3 id="46">
<a name="lisp-advertises-mode"></a>
Mode :lisp-advertises
</h3>

<p id="47">
When <i>mode</i> is <code>:lisp-advertises</code>,
the Lisp process waits for a separate Java application to make
contact. The Java application uses static methods in the LispCall
class to make the connection.
</p>
<p id="48">
The <b><i>file</i></b> argument (you may also use the
obsolete <i>lisp-file</i> argument): this argument
specifies a file in which Lisp advertises the host and port where Java
must connect. The default is "JavaToLisp.trp". If this argument is
<code>nil</code>, Lisp simply listens at the specified
port and does not advertise in a file. In that case it is necessary to
specify <i>port</i> as a non-zero value.
</p>
<p id="49">
The <b><i>host</i></b> argument (you may also use the
obsolete <i>lisp-host</i> argument): this argument is
used when the file specified by the <i>file</i>
argument is written. The Java application needs to know the lisp-host
value if it is running on a different host. The default value is
"localhost".
</p>
<p id="50">
The <b><i>timeout</i></b> argument: if
non-<code>nil</code>, this argument specifies the number
of seconds Lisp will wait for a connection from Java. If the timeout
is a negative number <code>-v</code>, signal a continuable error
after <code>v</code> seconds.  If continued, wait
another <code>v</code> seconds.
</p>
<h3 id="51">
<a name="java-advertises-mode"></a>
Mode :java-advertises
</h3>

<p id="52">
When <i>mode</i> is <code>:java-advertises</code>,
the Lisp process attempts to connect to a separate Java process. The
Java application uses static methods in the LispCall class to make the
connection.
</p>
<p id="53">
The <b><i>file</i></b> argument (you may also use the
obsolete <i>java-file</i> argument): this argument
specifies a file in which Java advertises the host and port where Lisp
must connect. The default is "LispToJava.trp". If this argument is
<code>nil</code>, Java is assumed to listen at the
specified port and does not advertise in a file.
</p>
<p id="54">
The <b><i>host</i></b> argument (you may also use the
obsolete <i>java-host</i> argument): this argument must
specifiy the host where Java is advertising when
<i>file</i> is <code>nil</code>. The
default value is "localhost".
</p>
<p id="55">
The <b><i>port</i></b> argument (you may also use the
obsolete <i>java-port</i> argument): this argument must
specifiy the port where Java is advertising when
<i>file</i> is <code>nil</code>. When
<i>file</i> is <code>nil</code>, this
argument must be specified as positive number greater than zero.
</p>
<p id="56">
Lisp will attempt to connect <i>poll-count</i> times,
with <i>poll-interval</i> seconds between attempts.
</p>


<h3 id="57">
<a name="native-mode"></a>
Mode :native 
</h3>

<p id="58">
When <i>mode</i> is <code>:native</code> (or the
synonym <code>:jni</code>), the Java VM is loaded into the
address space of the Lisp process. The Lisp and Java parts of the
application share one address space and one operating system process.
Calls between Lisp and Java are equivalent to foreign library calls
and data is transmitted in registers or in memory-to-memory copies.
</p>
<p id="59">
The arguments <i>java-home</i>,
<i>library</i>, <i>classpath</i>,
<i>jar</i>, <i>java-args</i>, and
<i>debug</i> determine how the Java VM is started from
the Lisp process.
</p>
<p id="60">
The <i>port</i>,
<i>file</i>, 
<i>host</i>, and
<i>timeout</i> arguments are ignored.
</p>
<p id="61">
The <b><i>library</i></b> argument: this argument
specifies the pathname of the shared library where the Java VM is
implemented. The default value is taken from the special variable
<a href="../../variables/jlinker/s_jni-library_s.htm"><code>*jni-library*</code></a>.  On MS Windows,
the initial value is <code>:find</code> to specify that the
Windows Registry should be searched for the location of the Java
Library. Otherwise, the value must be a path string. A relative path
is merged with the value of the <i>java-home</i>
argument.
</p>
<p id="62">
The <b><i>java-args</i></b> argument: this argument may
be a list of strings that specify additional arguments passed to the
Java VM.  Some of these are described in the Java documentation and in
the file Xusage.txt in the Java runtime.
</p>
<p id="63">
For example, the argument "-Xmx256m" specifies 256 megabytes for the
Java heap while the argument "-Dfoo=bar" specifes the value "bar" for
the Java System.property. 
</p>
<p id="64">
The <b><i>load</i></b> argument: this argument forces a
re-load of the Java shared library.
</p>
<p id="65">
If a Lisp image is saved with <a href="../excl/dumplisp.htm"><b>dumplisp</b></a> while a jlinker native connections is
running, the saved image must re-initialize the Lisp-Java connection
when the saved image is re-started.  This is done by calling
</p>
<pre id="66">
(jlinker-init :native :load t :library "xxx" ...)
</pre>
<p id="67">
The <i>library</i> argument must be specified in this
case.
</p>









<p id="68">
See <a href="../../jlinker.htm">jlinker.htm</a> for more information on the
jLinker facility.
</p>

<hr><p id="69"><small>Copyright (c) 1998-2017, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 10.0 page.</small><br><small>Created 2017.2.15.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.1</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 10.0 to 10.1.</a></small><br><a href="http://www.franz.com/support/documentation/10.0/doc/operators/jlinker/jlinker-init.htm">10.0 version</a></td></tr></table></body></html>