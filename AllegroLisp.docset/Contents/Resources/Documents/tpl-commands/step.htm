<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>:step</title><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Top-level Command</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../introduction.htm#updates-s">Significantly revised from 9.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/tpl-commands/step.htm">9.0 version</a></td></tr></table><h2 id="2">:step</h2>

<p id="3"><b>Arguments: </b><i>
</i> &amp;rest <i>args</i><i>
</i></p>

<p id="4">
If not in ldb mode (ldb does not appear in the prompt), this command
initiates or affects stepping, as we now describe. See below for
behavior in ldb mode.
</p>

<p id="5">
The <a href="step.htm"><b>:step</b></a> top-level command
implements the functionality of the <a href="../../ansicl/dictentr/step.htm"><b>step</b></a> macro.
</p>

<p id="6">
With an argument of <code>t</code>, stepping is enabled
globally, otherwise the arguments are assumed to be symbols naming
functions wherein stepping should occur. Any non-functions supplied to
<a href="step.htm"><b>:step</b></a> will be flagged as invalid
arguments, but an error will not be signaled.
</p>

<p id="7">
Called with no arguments or <code>nil</code> as an
argument while not stepping, stepping is disabled. Use the command
<a href="sover.htm"><b>:sover</b></a> to get out of stepping in
order to turn stepping off. <a href="step.htm"><b>:step</b></a>
and <strong>:step nil</strong> have no effect while stepping is going
on. It is only useful to step through compiled code. When you try to
step through interpreted code, you end up stepping through the
interpreter itself, with most output irrelevant to understanding your
own code.
</p>

<p id="8">See also <a href="sover.htm"><b>:sover</b></a> and <a href="scont.htm"><b>:scont</b></a>.</p>

<p id="9">The minimal abbreviation of <a href="step.htm"><b>:step</b></a> is <strong>:st</strong>.</p>




<h3 id="10">
:step in ldb mode
</h3>

<p id="11">When in ldb-step mode, the step command recognizes several
sub-commands as its first argument:</p>

<table border="1" width="77%">
  <tr>
    <td width="28%"><strong>Subcommand</strong></td>
    <td width="72%"><strong>Action</strong></td>
  </tr>

  <tr>
    <td width="28%"><code>:step cont [n]</code></td>
    <td width="72%">Continues through the current instruction
    (skipping n steps if n supplied, otherwise skipping one) even if
    there is a breakpoint in it.</td>
  </tr>


  <tr>
    <td width="28%"><code>:step over [slide-dir]</code></td>
    <td width="72%">Step over a function call. See below for the
    meaning of <i>slide-dir</i>. This command
    is <i>sticky</i>, which means calls just
    to <b>:step</b> after a call to <b>:step over</b> will be another
    similar call to <b>:step over</b>.</td>
  </tr>
  <tr>
    <td width="28%"><code>:step into [slide-dir]</code></td>
    <td width="72%">Step into a function call. A primcall (a call to a
    runtime system function) is never stepped into. 
    See below for the
    meaning of <i>slide-dir</i>. This command
    is <i>sticky</i>, which means calls just
    to <b>:step</b> after a call to <b>:step into</b> will be another
    similar call to <b>:step into</b>.</td>
  </tr>
  <tr>
    <td width="28%"><code>:step - [slide-dir]</code></td>
    <td width="72%">Step as before but with a different slide-direction. 
    See below for the
    meaning of <i>slide-dir</i>. 
    </td>
  </tr>
  <tr>
    <td width="28%"><code>:step this</code></td>
    <td width="72%">No actual stepping is done, but the current instruction is re-printed in
    disassembled form. </td>
  </tr>
  <tr>
    <td width="28%"><code>:step return</code></td>
    <td width="72%">The currently-debugged function continues to its end, and the caller of
    the function is breakpointed just after the call (so step out to the caller
    of the current function).</td>
  </tr>

  <tr>
    <td width="28%"><code>:step type</code></td>
    <td width="72%">Prints information on what kind of stepping is
    being remembered for the &lt;return&gt; key. :none is printed
    until the first occurrence of either a <b>:step over</b>
    or <b>:step into</b> is done. See <a href="../debugging.htm#ldb-stepper-1">The Lisp DeBug (ldb) stepper</a>
    in <a href="../debugging.htm">debugging.htm</a>.</td>
  </tr>
</table>
<p id="12">
To step through only the top-level forms (i.e. un-macroexpanded)
specify <b>:step :over 0</b>.
</p>

<h3 id="13">
slide-direction
</h3>

<p id="14">
<i>slide-dir</i> is optional and directs the stepper
how to deal with macroexpansions and forms. The choices are:
</p>
<ul>
<li id="15">
<b>into</b>: means expand macros
</li>
<li id="16">
<b>across</b>: means step across the top levels of the current form
</li>
<li id="17">
<b>over</b>: means step over this form or macroexpansion and to the
next form
</li>
<li id="18">
<b>out</b>: means step until the next outer macroexpansion is
re-entered
</li>
<li id="19">
<b>[N]</b>: where N is a positive fixnum, allows N macroexpand levels
deep
</li>
</ul>
<p id="20">
The default is <b>:step :over :into</b> which steps over function
calls, but expands all macros within a function.
</p>
<p id="21">
To use <b>:step</b> in ldb mode, you must be at a breakpoint. Thus:
</p>

<pre id="22">
cl-user(1): :ldb t
[ldb] cl-user(2): :step into
You must be stopped at a breakpoint before ldb-stepping can begin.
[ldb] cl-user(3):
</pre>

<p id="23">
When not at a function call point, over and into are equivalent.
Typing return repeats the remembered previous command.
</p>
<h2 id="24">
Example
</h2>
<pre id="25">
cl-user(1): (declaim (optimize debug))
t
cl-user(2): (shell &quot;cat times.cl&quot;)

(defun doit (n)
  (let ((res))
    (do ((i 0 (1+ i)))
	((= i n)
	 res)
      (push i res))))
0
cl-user(3): :cf times
;;; Compiling file times.cl
;;; Writing fasl file times.fasl
;;; Fasl write complete
cl-user(4): :ld times
; Fast loading /net/penn/acl/duane/acl91/src/times.fasl
cl-user(5): :br doit :pos 57
Adding #&lt;Function doit&gt;: 41
break: lev=0 pc=41 rec=11               form=(= i n)

in #P&quot;times.cl&quot; starting at 57 ending at 64.
Possible slide directions: (into out across back)
Current step/slide type: over/into
cl-user(6): :ldb t
[ldb] cl-user(7): (doit 10)

Hit breakpoint at func = #&lt;Function doit&gt;, pc=41
break: lev=0 pc=41 rec=11               form=(= i n)

in #P&quot;times.cl&quot; starting at 57 ending at 64.
Possible slide directions: (into out across back)
Current step/slide type: over/into
[ldb-step] cl-user(8): :loc
Compiled lexical environment:
0(Required): n: 10
12(Reg/%r13): res: nil
13(Reg/%r12): i: 0
14(Reg/%rdi): nil: 0
[ldb-step] cl-user(9): :br
#&lt;Function doit&gt;: lisp:rec=11 pc=41 pos=57:64 hit 1 time
                  
[ldb-step] cl-user(10): :step cont 2
Continuing past #&lt;Lisp Bpt doit #11 pc: 41 @@57:64 lev: 0-2  @
                  #x10003a87e22&gt; 2 times

Hit breakpoint at func = #&lt;Function doit&gt;, pc=41
break: lev=0 pc=41 rec=11               form=(= i n)

in #P&quot;times.cl&quot; starting at 57 ending at 64.
Possible slide directions: (into out across back)
Current step/slide type: over/into
[ldb-step] cl-user(11): :loc
Compiled lexical environment:
0(Required): n: 10
12(Reg/%r13): res: (1 0)
13(Reg/%r12): i: 2
14(Reg/%rdi): nil: 2
[ldb-step] cl-user(12): :br
#&lt;Function doit&gt;: lisp:rec=11 pc=41 pos=57:64 hit 3 times
                  
[ldb-step] cl-user(13): 
</pre>

<p id="26">
Note that the <b>:step cont 2</b> command at prompt #10 causes the
iteration to skip from i=0 to i=2.
</p>
<p id="27">
Note that this transcript uses another undocumented command:
the <code>:pos</code> keyword argument to
the <a href="break.htm"><b>:break</b></a> command.
</p>


<p id="28">
See <a href="../operators/excl/with-breakpoints-installed.htm"><b>with-breakpoints-installed</b></a> and the <a href="break.htm"><b>:break</b></a>.
</p>

<p id="29">See <a href="../debugging.htm#ldb-stepper-1">The Lisp DeBug (ldb)
stepper</a> in <a href="../debugging.htm">debugging.htm</a> for
information on ldb stepping.</p>

<p id="30">
See <a href="../top-level.htm">top-level.htm</a> for more information on top-level
commands. See <a href="../debugging.htm">debugging.htm</a> for information on the
debugger and examples of stepping.
</p>

<hr><p id="31"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had significant revisions compared to the 9.0 page.</small><br><small>Created 2016.6.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../introduction.htm#updates-s">Significantly revised from 9.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/tpl-commands/step.htm">9.0 version</a></td></tr></table></body></html>