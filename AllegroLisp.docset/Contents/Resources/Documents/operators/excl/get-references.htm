<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>get-references</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s"> New since the initial 10.0 release.</a></small></td></tr></table><h2 id="2">get-references</h2>

<p id="3"><b>Arguments: </b><i>
object </i> &amp;optional <i>include-stacks</i><i>
</i></p>

<p id="4">
This function accepts an <b><i>object</i></b> and
returns a heapwalker vector filled with all objects in the lisp heap
or in lispstatic space which point directly to the given
object. Objects are usually found using <a href="get-objects.htm"><b>get-objects</b></a>.
</p>
<p id="5">
A heapwalk vector is a simple vector of type t whose first element is
the number of objects of which were found, whose next elements are the
objects found, and whose last elements are unspecified (the vector is
made somewhat bigger than is necessary). Thus suppose 32 objects
referencing <i>object</i> were found. The returned
vector will have 32 as its first element, then elements 1 through 33
will be those 32 objects. The vector may have length larger than 33,
and the remaining elements, if any, are unspecified.
</p>
<p id="6">
Note that compound structures might not point to the object directly;
for example, if a list has an element within it, the first call
to <a href="get-references.htm"><b>get-references</b></a> will
return only the cons cell whose car is that object; you would have to
repeat the <a href="get-references.htm"><b>get-references</b></a> on
that cons cell to find the cons whose cdr points to it, and so on
backward through the list until you find a recognizable structure,
symbol, or function that points to the head of the list.
</p>
<p id="7">
If you call this function interactively then the special variable
<a href="../../../ansicl/dictentr/unnamed2.htm"><code>*</code></a> tends to show up in
the results quite often, because it is changing every time to point to
the heapwalker vector result. On the other hand, the result is pretty
printed in the listener, and usually you can see the first value in
the most recent result. A useful paradigm once you have called
<a href="get-references.htm"><b>get-references</b></a> the first
time is
</p>

<pre id="8">
 (excl::get-references (aref * 1))
</pre>

<p id="9">
which can be repeated to chain backwards through the oldest link to
the original object, though sometimes you might want to index a
different item, depending on what looks interesting.  You may also
have to scroll back up the screen, so be sure to do this in a window
that can scroll quite a bit (such as an emacs buffer), since the
heapwalker vectors will tend to get long after a few iterations.
</p>
<p id="10">
Note the following:
</p>
<ul>
  <li id="11">
    Do a (gc t) -- that is, a global gc -- before you start using this
tool.  Heapwalkers don't care if an object is dead or not, so it may
be that you are grabbing objects from the heap which would have
    otherwise been collected because it was dead.
  </li>
  <li id="12">
    <a href="../../../ansicl/dictentr/unnamed2.htm"><code>*</code></a>, <a href="../../../ansicl/dictentr/unnamed2.htm"><code>**</code></a>, and <a href="../../../ansicl/dictentr/unnamed2.htm"><code>***</code></a> are assigned results from previous
invocations of <a href="get-references.htm"><b>get-references</b></a>, so it is likely that one of
    them will be in the next result vector.
  </li>
</ul>
<h3 id="13">
  The include-stacks argument
</h3>
<p id="14">
The <b><i>include-stacks</i></b> argument expands the
search for stack objects, providing reasonable results for stack
locations. Under the normal rules of <a href="get-references.htm"><b>get-references</b></a>, an object seen in a stack
location would result in the stack itself being seen in the heapwalker
results vector.  But because stacks are hard to identify, depending on
whether the scheduler is turned on, and also depending on whether
virtual threads, os-threads, or smp is impemented, and so the
<i>include-stacks</i> options choose to look at stacks
on a per-frame basis. Frames are identified by frame-descriptor
structs, and are unique per thread. A frame-descriptor might be valid
(because its invocation is still dynamically in scope), or invalid
(because its execution has terminated).  If the frame-descriptor is
valid, it can be queried by one of the debugger-api functions
(see <a href="../../debugger-api.htm">debugger-api.htm</a>, or simply by performing
debugger commands such as <a href="../../tpl-commands/zoom.htm"><b>:zoom</b></a>
and <a href="../../tpl-commands/local.htm"><b>:local</b></a> when the
frame-descriptor is found.
</p>
<p id="15">
Whenever a frame-descriptor is seen in a results vector due to the
<i>include-stacks</i> argument options, it may be
necessary to use the new :r option to
the <a href="../../tpl-commands/local.htm"><b>:local</b></a> command to see the raw
data - a much expanded view that includes slots of stack-allocated
objects.  Note that
there is no distinction made between a frame-descriptor whose frame
has a slot with the object in it and a frame-descriptor which as a
lisp struct actually references the object.
</p>
<p id="16">
The possible values for include-stacks are:
</p>
<ul>
  <li id="17">
<code>t</code>: besides heap objects which reference the
<i>object</i> argument, any frame which holds the object
will have its frame-desriptor added to the result vector.
  </li>
  <li id="18">
<code>:only</code>: same as <code>t</code>, but only
those objects which are on the stack and not referenced in the heap
will be captured. This is slightly different than other
<a href="get-references.htm"><b>get-references</b></a> results; the
<i>object</i> argument is ignored, and all objects
meeting the criterion are placed into the result vector (and not any
objects that reference those objects). This might provide a set of
objects from which to initiate further <a href="get-references.htm"><b>get-references</b></a> calls.  This option reveals any
truly transient data, but beware: when a result vector has captured
such an object it is no longer transient, since it is now also
referenced by a lisp object (the now-older results vector).
  </li>
  <li id="19">
<code>:all</code>: same as <code>:only</code>, but an
object meets the criterion even if it is referenced by a heap object.
The only criterion for an object to be in the results vector
with <code>:all</code> is that it be referenced on a stack
somewhere.
</li>
<li id="20">
<code>nil</code> (the default): stacks are not searched
at all - only the heap is searched.
</li>
</ul>

<p id="21">
See <a href="../../miscellaneous.htm#heap-walking-1">Heap
walkers in Allegro CL</a> for more information.
</p>

<hr><p id="22"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page is new in the  10.0 release.</small><br><small>Created 2016.6.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s"> New since the initial 10.0 release.</a></small></td></tr></table></body></html>