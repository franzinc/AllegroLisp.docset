<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>octets-to-native</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s"> Code change since the initial 10.0 release.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/excl/octets-to-native.htm">9.0 version</a></td></tr></table><h2 id="2">octets-to-native</h2>

<p id="3"><b>Arguments: </b><i>vector8 </i>&amp;key <i>address aligned</i> (<i>length</i> (position 0 vector8)) (<i>null-terminate</i> t)<i> result-vector</i><i>
</i></p>


<p id="4">
This function was modified by a patch which added the two additional
keyword arguments <i>null-terminate</i> and
<i>result-vector</i>. Behavior of this function if those
arguments are unspecified has not changed. The documentation assumes
the patch has been applied. (The patch is for version 10.0
only. Earlier versions are not changed.)
</p>




<p id="5">This function returns an address
when <b><i>result-vector</i></b>
is <code>nil</code> and
returns <b><i>result-vector</i></b> when that argument
is non-<code>nil</code>.
</p>

<p id="6">This function copies the 8-bit bytes from
<i>vector8</i>, a (simple-array (unsigned-byte 8) (*))
array, into one of the following locations, based on the arguments:
</p>
<ul>
<li id="7">
<b>static (i.e., non-Lisp heap) memory</b>,
when <b><i>address</i></b>
and <b><i>result-vector</i></b> are unspecified
or <code>nil</code>. The address of the first character of
the copied data is returned.
<li id="8">
</li>
<b>the location specified by <i>address</i></b>, when
<b><i>address</i></b> is
non-<code>nil</code>
and <b><i>result-vector</i></b> is unspecified or
<code>nil</code>. <i>address</i>, which
becomes the location of the first byte of the copied data, is
returned.
<li id="9">
</li>
<b>result-vector</b>, when <b><i>result-vector</i></b>
is non-<code>nil</code> (<i>address</i> is
ignored when <i>result-vector</i> is
non-<code>nil</code>). <i>result-vector</i>
is returned.
</li>
</ul>

<p id="10">
If the <i>address</i> argument is specified, it must be
an integer specifying an address. <b>The address may be in the Lisp
heap, but note that in an SMP Lisp, addresses in the Lisp heap are not
stable (the address may be valid when this function is called but a gc
may happen while this function is running with the possible result
that writing to the address can destroy Lisp data and cause Lisp
failure)</b>. In non-SMP Lisps, it is possible to ensure that garbage
collections do not occur while cons-free code is run but that is
difficult to impossible in an SMP Lisp. More commonly, the address is
in static space. The programmer must ensure that other data is not
overwritten by the octets being copied
when <i>address</i> is used. The system does no checking
on its own. If <b><i>result-vector</i></b> is specified
non-<code>nil</code>, <i>address</i> is
ignored.
</p>
<p id="11">
If address and result-vector are both unspecified or nil, new static
memory is allocated. When no longer needed, the resulting memory must
be passed to
<a href="aclfree.htm"><b>aclfree</b></a> to be reclaimed.
</p>

<p id="12">
If the <i>aligned</i> keyword argument is true, then
<i>address</i> is an aligned address. Aligned addresses
are returned by functions like <a href="lispval-to-aligned-malloc-address.htm"><b>lispval-to-aligned-malloc-address</b></a>.
</p>


<p id="13">If the <i>length</i> argument is specified, then it
specifies the number of elements to copy.</p>

<p id="14">
If result-vector is specified and not <code>nil</code>, it
must be an octet vector, i.e. a (simple-array (unsigned-byte 8)
(*)). vector8 will be copied to that vector. If result-array is in the
Lisp heap, Care should be taken not to take the address of the result
vector (e.g. with <a href="lispval-to-address.htm"><b>lispval-to-address</b></a>) until there is no chance
for a gc (again, this is hard to do in an SMP Lisp). This is not an
issue if <i>result-vector</i> is a static array
--see <a href="../../gc.htm#static-arrays-2">Static
arrays</a> in <a href="../../gc.htm">gc.htm</a>.
</p>

<p id="15">
The <b><i>null-terminate</i></b> argument controls
whether a single 0 octet is appended at the end of the copied
bytes. <i>null-terminate</i> defaults
to <code>t</code>. <code>:null-terminate nil</code>
can be specified to prevent the addition of the null-terminating
octet. If <i>null-terminate</i>
is <code>nil</code>, then
the <b><i>length</i></b> keyword must also be specified.
</p>




<p id="16">
In earlier releases, this function was called
<code>mb-to-native</code>. That name is preserved for backward
compatibility, but new code should use the new name.
</p>

<p id="17">
See also <a href="../../iacl.htm">iacl.htm</a> for general information on
international character set support in Allegro CL and
see <a href="native-to-octets.htm"><b>native-to-octets</b></a>
and <a href="string-to-native.htm"><b>string-to-native</b></a>.
</p>

<hr><p id="18"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 9.0 page.</small><br><small>Created 2015.5.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s"> Code change since the initial 10.0 release.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/excl/octets-to-native.htm">9.0 version</a></td></tr></table></body></html>