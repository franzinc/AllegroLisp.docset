<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>fast-and-clean</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 9.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/excl/fast-and-clean.htm">9.0 version</a></td></tr></table><h2 id="2">fast-and-clean</h2>

<p id="3"><b>Arguments: </b><i>
</i> &amp;body <i>body</i><i>
</i></p>

<p id="4">
This is a direct replacement for <code>(excl::fast (atomically
...))</code> when that was used to warn of a loss of expected
efficiency (fast and atomically were not exported or documented). It
will provide the same warnings and the same generated code that the
old combination gave. The new macro exists to provide
self-documentation of the intended use.
</p>
<p id="5">
Lisp interrupts and gc requests are honored only at certain points in
Lisp code.  The compiler verifies that during the execution
of <b><i>body</i></b> there are no checks for Lisp
interrupts or gc requests. If the compiler detects that this
assumption may be violated, an error is signaled at compile time.
This form is similar in effect to <a href="with-delayed-interrupts.htm"><b>with-delayed-interrupts</b></a>, but no explicit
interrupt or gc check is made; an interrupt or gc check will occur at
the next function call or loop iteration.
</p>
<p id="6">
The following well intentioned code does not work:
</p>

<pre id="7">
   (let (did-x did-y)
     (unwind-protect
        (progn 
          (incf x)
          (setq did-x t)
          (incf y)
          (setq did-y t)
          (do-something-with-x-and-y))
       (when did-x (decf x))
       (when did-y (decf y)))) 
</pre>

<p id="8">
If an interrupt resulting in a throw should happen between
the <b>incf</b> and <b>setq</b>, it could fail to decrement one of the
values.
</p>
<p id="9">
This will work correctly, but will involve some run-time overhead 
to suppress and check for interrupts.
</p>

<pre id="10">
   (let (did-x did-y)
     (unwind-protect
        (progn
          (with-delayed-interrupts
            (incf x)
	    (setq did-x t)
            (incf y)
	    (setq did-y t))
          (do-something-with-x-and-y))
       (with-delayed-interrupts
         (when did-x (decf x))
         (when did-y (decf y)))))
</pre>

<p id="11">
This works correctly with no overhead:
</p>

<pre id="12">
   (let (did-x did-y)
     (unwind-protect
        (progn
          (fast-and-clean
            ;; We add declarations to avoid any calling.
            (the fixnum (incf (the fixnum x)))
	    (setq did-x t)
            (the fixnum (incf (the fixnum y)))
	    (setq did-y t))
	  (do-something-with-x-and-y))
       (fast-and-clean
         (when did-x (the fixnum (decf (the fixnum x))))
         (when did-y (the fixnum (decf (the fixnum y)))))))
</pre>



<p id="13">
See <a href="../../smp.htm">smp.htm</a>
and <a href="../../multiprocessing.htm">multiprocessing.htm</a> for more information on
this macro and on multiprocessing.
</p>

<hr><p id="14"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page has had moderate revisions compared to the 9.0 page.</small><br><small>Created 2016.6.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 9.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/excl/fast-and-clean.htm">9.0 version</a></td></tr></table></body></html>