<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>string-to-native</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s"> Code change since the initial 10.0 release.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/excl/string-to-native.htm">9.0 version</a></td></tr></table><h2 id="2">string-to-native</h2>

<p id="3"><b>Arguments: </b><i>string </i>&amp;key  (<i>start</i> 0) (<i>end</i> (length string))<i> address</i> (<i>external-format</i> :default)<i> aligned</i> (<i>null-terminate</i> t)<i> result-vector</i></p>


<p id="4">
This function was modified by a patch which added the two additional
keyword arguments <i>null-terminate</i> and
<i>result-vector</i>. Behavior of this function if those
arguments are unspecified has not changed. The documentation assumes
the patch has been applied. (The patch is for version 10.0
only. Earlier versions are not changed.)
</p>




<p id="5">
There are two return values. The second return value is always the
number of bytes copied. The first return value depends on the value of
the <b><i>result-vector</i></b> argument:
</p>
<ul>
<li id="6">
If <i>result-vector</i> is <code>nil</code>
(the default), the first return value is the address of the first
copied byte.
</li>
<li id="7">
If <i>result-vector</i> is an octet vector, it is
returned as the first return value.
</li>
</ul>


<p id="8">This function converts (according to the
<i>external-format</i> argument) and copies the string
data from indices specified by <i>start</i> to
<i>end</i> out of the Lisp string into a location
determined by other arguments. Here is where the data is copied to:
</p>
<ul>
<li id="9">
If <i>result-vector</i> and <i>address</i>
are both <code>nil</code> or unspecified, the string data
is copied to static (ie, non-Lisp heap) memory. In that case the
address of the first character of the copied data is returned.
</li>
<li id="10">
If <i>address</i> is specified (as an integer giving a
valid address) and <i>result-vector</i>
is <code>nil</code> or unspecified, the string data is
copied to that address and no new memory is
allocated. <i>address</i> is typically in static space
(having previously been allocated and now being reused). Extreme care
should be excercised when address is in the Lisp heap as addresses may
not remain valid after a garbage collection. Note in SMP Lisps,
garbage collections cannot be avoided with certainty. Copying data to
an incorrect address in the Lisp heap can cause the data to be lost or
can cause data corruption and Lisp failure. Do not specify an address
in the Lisp heap when using a SMP Lisp. <i>address</i>
is returned as the first return value.
</li>
<li id="11">
If <i>result-vector</i> is an octet vector (of type
(unsigned-byte 8)) and <i>address</i>
is <code>nil</code>: the string data will be copied to it
and it is returned as the first return value. (It is an error to
specify non-<code>nil</code> values for both
<i>address</i> and <i>result-vector</i>.) 
The vector can be a static vector
(see <a href="../../gc.htm#weak-vecs-etc-1">Weak vectors,
finalizations, static arrays, etc.</a>
in <a href="../../gc.htm">gc.htm</a>), in which case its address can be used
freely. If result-vector is stored in the Lisp heap, care should be
taken not to take the address of the result vector (e.g. with
<a href="lispval-to-address.htm"><b>lispval-to-address</b></a>)
until there is no chance for a gc. In an SMP Lisp, it is difficult to
impossible to ensure garbage collections do not happen.
</li>
</ul>


<p id="12">
If the <i>aligned</i> keyword argument is true, then
<i>address</i> is an aligned address. Aligned addresses
are returned by functions like <a href="lispval-to-aligned-malloc-address.htm"><b>lispval-to-aligned-malloc-address</b></a>.
</p>
<p id="13">
The copied string data will be null-terminated if
the <b><i>null-terminate</i></b> keyword argument is
true (the default). Null terminated means that the byte following the
last data element is 0. The number of 8-bit bytes copied including the
null-terminator if present is returned as the second value of this
function.
</p>




<p id="14">
Conversion is done using the specified
<i>external-format</i>. If
<i>external-format</i> is not specified (or,
equivalently, if the value of <i>external-format</i> is
<code>:default</code>), then the external format returned by the
following form is used:
</p>
<pre id="15">
(locale-external-format *locale*)
</pre>
<p id="16">
See <a href="locale-external-format.htm"><b>locale-external-format</b></a>
and <a href="../../variables/excl/s_locale_s.htm"><code>*locale*</code></a>. See also
<a href="string-to-octets.htm"><b>string-to-octets</b></a>, <a href="native-to-string.htm"><b>native-to-string</b></a>, <a href="octets-to-native.htm"><b>octets-to-native</b></a>, and <a href="with-native-string.htm"><b>with-native-string</b></a>.
</p>

<p id="17">
See also <a href="../../iacl.htm">iacl.htm</a> for general
information on international character set support in Allegro
CL.
See 
<a href="../../foreign-functions.htm">foreign-functions.htm</a>
for information on foreign functions.
</p>

<hr><p id="18"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 9.0 page.</small><br><small>Created 2015.5.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s"> Code change since the initial 10.0 release.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/excl/string-to-native.htm">9.0 version</a></td></tr></table></body></html>