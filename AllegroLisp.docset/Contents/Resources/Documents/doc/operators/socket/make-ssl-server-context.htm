<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>make-ssl-server-context</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: unknown</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 9.0 to 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/socket/make-ssl-server-context.htm">9.0 version</a></td></tr></table><h2 id="2">make-ssl-server-context</h2>

<p id="3"><b>Arguments: </b><i>
</i>&amp;key <i>method certificate key certificate-password method verify max-depth ca-file ca-directory ciphers crl-check crl-file</i> (<i>prefer-server-cipher-order</i> t)<i>
</i></p>




<p id="4">
This function creates and returns an SSL context object (an instance
of the class <code>excl::ssl-context</code>) suitable for use as
the value of the <i>context</i> keyword argument
to <a href="make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a>.
</p>

<p id="5">
The context has values for all relevant arguments. For the
arguments <i>method</i>, <i>ciphers</i>,
<i>verify</i>, <i>max-depth</i>,
and <i>prefer-server-cipher-order</i>, specifying a
value in a call to 
<a href="make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a>
which is also passed a context object as the value of
the <i>context</i> argument causes the associated
argument value to be local to that connection (i.e. the specified
argument value overrides the value in the context object). The value
for the
arguments <i>certificate</i>, <i>key</i>,
<i>ca-file</i>, <i>ca-directory</i>,
<i>certificate-password</i>, <i>crl-file</i>,
and <i>crl-check</i> cannot be overridden when a context
is provided. It is an error to supply a context and values for any of
those arguments.
</p>
<p id="6">
The keyword arguments are:
</p>

<ul>
<li id="7">
<b><i>method</i></b>: (default
is <code>:tlsv1+</code>) this argument allows control over the
SSL protocol handshake process. Supported SSL protocols are SSLv2,
SSLv3, TLSv1, TLSv1.1, and TLSv1.2 from oldest to newest. The method
keyword argument can be:
<ul>
<li id="8">
A list of values specifying each SSL method to explicitly
support. Valid members of the list are <code>:sslv2</code>,
<code>:sslv3</code>, <code>:tlsv1</code>, 
<code>:tlsv1.1</code>, and 
<code>:tlsv1.2</code>. This provide the ability to specify
precisely which ssl methods one wants to allow, helping to mitigate
downgrade attacks to weaker methods (anything before tlsv1).
</li>
<li id="9">
<code>:tlsv1+</code>: support TLSv1, 
TLSv1.1, and 
TLSv1.2. This is the default.
</li>
<li id="10">
<code>:sslv3+</code>: support SSLv3, TLSv1, 
TLSv1.1, and 
TLSv1.2.
</li>
<li id="11">
<code>:sslv23</code>: the server will handle SSLv2, SSLv3, and
TLSv1. The highest protocol version that is common between the client
and server will be selected. This method allows for best
compatibility. This option is out of date but supported for backward
compatibility.
</li>
<li id="12">
<code>:sslv2</code>: the server will only handle SSLv2. This
option is not recommended as SSLv2 has known security issues (such as
susceptibility to man In the middle attacks).
</li>
<li id="13">
<code>:sslv3</code>: the server will only handle SSLv3. This
option is not recommended as SSLv3 has known security issues (such as
susceptibility to man In the middle attacks).
</li>
<li id="14">
<code>:tlsv1</code>: the server will only handle TLSv1.
</li>
</ul>
</li>
<li id="15">
<b><i>certificate</i></b>: (default
is <code>nil</code>) this argument names a file which
contains one or more PEM-encoded certificates. The first (or only)
certificate in the file will be used to identify the client (in the
case of <a href="make-ssl-client-stream.htm"><b>make-ssl-client-stream</b></a>). Optionally,
subsequent entries in the file may be used to supply intermediate CA
certificates (also known as a certificate chain).
</li>
<li id="16">
<b><i>key</i></b>: (default
is <code>nil</code>) this argument is a string or pathname
naming a file containing the private RSA key corresponding the the
public key in the certificate. The file must be in PEM format. The key
can be stored in an encrypted form which requires a pass phrase to
read, but in that case the certificate-password must also be
specified. If the key is stored in the certificate file, then you
needn't specify the key argument.
</li>
<li id="17">
<b><i>certificate-password</i></b>: (default
is <code>nil</code>) this argument, if specified, should
be a string. If the private key stored with the certificate inside the
file named by the certificate argument is encrypted, then this value
is used as the key to decrypt it.
</li>
<li id="18">
<b><i>verify</i></b>: (default
is <code>nil</code>) this argument can
be <code>nil</code>, <code>:optional</code>, or
<code>:required</code>. Due to the way OpenSSL is implemented,
the behavior of peer verification differs for servers and
clients; here is the behavior for servers:
<ul>
<li id="19">
<code>:verify nil</code> means that the server will not ask the
client to supply a certificate and will not do automatic verification
if the client supplies a certificate anyway. If the client does
provide a certificate, manual verification can be done using
<a href="get-ssl-peer-certificate.htm"><b>get-ssl-peer-certificate</b></a> and
<a href="get-ssl-verify-result.htm"><b>get-ssl-verify-result</b></a>.
</li>
<li id="20">
<code>:verify :optional</code> means that the client will be
asked to supply a certificate during SSL handshake. The certificate
(if supplied) will be automatically verified during SSL handshake. If
verification fails, an error will be generated during SSL handshake.
</li>
<li id="21">
<code>:verify :required</code> means that the client will be
asked to supply a certificate during SSL handshake. The client
certificate will be automatically verified during SSL handshake. If
the client does not supply a certificate or if verification of the
supplied certificate fails, an error will be generated during SSL
handshake.
</li>
</ul>

</li>
<li id="22">
<b><i>maxdepth</i></b>: (default is 10) the value must
be an integer which indicates the maximum allowable depth of the
certificate verification chain. If the chain exceeds this depth, an
error will be generated during SSL handshake.
</li>
<li id="23">
<b><i>ca-file</i></b>: (default is
nil) this argument specifies the name of
a file containing a series of trusted PEM-encoded Intermediate CA or
Root CA certificates that will be used during peer certificate
verification. Keep in mind that, when using on an SSL server, the
subject name information for each of these certificates is supplied to
the peer during SSL handshake, so you may want to keep the number of
certificates listed in the file to a minimum. A file containing
certificates of well-known root CAs can be found in <b>[acl
directory]/examples/ssl/ca-bundle.crt</b>.
</li>
<li id="24">
<b><i>ca-directory</i></b>: (default
is <code>nil</code>) this argument specifies the name of a
directory containing a series of trusted Intermediate CA or Root CA
certificate files that will be used during peer certificate
verification. Each file in the directory should contain one
certificate. The files should be named based on the hash value of the
certificate subject name. If more than one certificate with the same
hash value exists, the extension must be different (e.g. 9d66eef0.0,
9d66eef0.1 etc). The search is performed in the ordering of the
extension number, regardless of other properties of the
certificates. Use the <b>c_rehash</b> (available via standard OpenSSL
distributions) utility to create the necessary links.
</li>
<li id="25">
<b><i>ciphers</i></b>: (default is the string given at
the end of this paragraph) if the <i>ciphers</i> keyword
argument is supplied, it must be a string which specifies an OpenSSL
cipher list. This list determines which ciphers the SSL server will
support. The strongest common entry from this list and the list
supplied by the client during handshake will be used. If there is no
entry in common, SSL handshake will fail and an error will be
generated.  For details on the cipher list format, see the <b>CIPHER
LIST FORMAT</b> section of
<a href="http://www.openssl.org/docs/apps/ciphers.html">http://www.openssl.org/docs/apps/ciphers.html</a>. The default value is the string "ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:ECDH+3DES:DH+3DES:RSA+AESGCM:RSA+AES:RSA+3DES:!aNULL:!MD5:!DSS".
</li>
<li id="26">
<b><i>crl-check</i></b>: (default
is <code>nil</code>) this argument controls certificate
revocation list (CRL) checking. Its value may
be <code>nil</code> (the default) for no CRL
checking, <code>t</code> for CRL checking of the peer's
certificate (if provided by the peer), or <code>:all</code> for
CRL checking of all components of the peer's supplied certificate
chain. If this argument is non-<code>nil</code>, the
<i>verify</i> argument must also be
non-<code>nil</code>. If you enable CRL checking, you must
supply a proper PEM-encoded CRL, even if it contains zero
revocations. If you do not supply a CRL, peer verification will never
succeed.
</li>
<li id="27">
<b><i>crl-file</i></b>: (default is value of
the <i>ca-file</i> argument) this argument specifies the
location of a PEM-encoded CRL file. If <code>nil</code> or
not supplied, defaults to the value of
the <i>ca-file</i> argument. It is
acceptable for CRL to be included amongst other PEM-encoded
certificates.
</li>
<li id="28">
<b><i>prefer-server-cipher-order</i></b>: (default
is <code>t</code>). The typical behavior when choosing a
cipher during an SSLv3 or TLSv1 handshake is to use the client's
preference. If this argument is true (the default), the server's preference
will be used.
</li>
</ul>


<p id="29">
See 
<a href="../../socket.htm">socket.htm</a> for information on sockets. For
information on Secure Sockets, see the section <a href="../../socket.htm#ssl-1">Secure Socket Layer (SSL)</a> in
that document.
</p>

<hr><p id="30"><small>Copyright (c) 1998-2016, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br>
<small>This page was not revised from the 9.0 page.</small><br><small>Created 2015.5.21.</small><br>
</p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faq/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 10.0</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 9.0 to 10.0.</a></small><br><a href="http://www.franz.com/support/documentation/9.0/doc/operators/socket/make-ssl-server-context.htm">9.0 version</a></td></tr></table></body></html>